#!/usr/bin/env python

'''

GOAL:
- read catalog of spirals that is generated by LCSmergespiralscats.py
- make plots for paper
- run correlation/KS tests
- print latex tables with resulting KS statistics.  these are written to SamplePlots directory

USAGE:
- in ipython

  %run LCSanalysespirals.py

  - all spirals are s.XXX
  - sample that does not include coma is nc.XXX

  - Example commands from w/in ipython:
    s.compare_color()
    nc.compare_color()
  - To generate latex tables with KS statistics:
    print_tables()
    print_tables_nc()  

PAPER 1 PLOTS
  s.plotsizedvdr(plothexbin=True,plotmembcut=True,plotbadfits=0)
  s.compare_cluster_exterior()
  plotRe24vsReall()
  s.plotsizestellarmassblue()
  s.plotsizeBTblue()
  s.plotsizeNUVrblue()
  s.plotsizehist()
  plotsizevsMclallwhisker()
    
SIZE RATIO
- I set up self.size_ratio to be the size used in all plots.
- This can be set to the 24um size normalized by GIM2D total, GIM2D disk, or NSA total

KS STATISTICS 
- latex tables with resulting KS statistics are written to SamplePlots directory
- file ks.tex in ~/Dropbox/Research/MyPapers/LCSpaper1 merges all tables into one latex file
- to compile, in LCSpaper1 directory, type
  > pdflatex ks

REQUIRED MODULES:
- mystuff.py
- astropy.py
- LCScommon

**************************
written by Rose A. Finn
Jan 2014
**************************

'''

from LCScommon import *
from matplotlib import pyplot as plt
import numpy as np
from numpy.polynomial.polynomial import polyfit
import os
import mystuff as my
from astropy.io import fits
from astropy.table import Table
from astropy.table import Column
from astropy.cosmology import WMAP9 as cosmo

import astrofuncs
import chary_elbaz_24um as chary
import anderson
from scipy.stats import scoreatpercentile
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from matplotlib.mlab import PCA as mlabPCA
from scipy.optimize import leastsq
import weightedstats as ws

import argparse# here is min mass = 9.75

parser = argparse.ArgumentParser(description ='Run sextractor, scamp, and swarp to determine WCS solution and make mosaics')
parser.add_argument('--minmass', dest = 'minmass', default = 9., help = 'minimum stellar mass for sample.  default is log10(M*) > 7.9')
parser.add_argument('--diskonly', dest = 'diskonly', default = 1, help = 'True/False (enter 1 or 0). normalize by Simard+11 disk size rather than Re for single-component sersic fit.  Default is true.  ')

args = parser.parse_args()

USE_DISK_ONLY = np.bool(np.float(args.diskonly))#True # set to use disk effective radius to normalize 24um size
if USE_DISK_ONLY:
    print 'normalizing by radius of disk'
minsize_kpc=1.3 # one mips pixel at distance of hercules
#minsize_kpc=2*minsize_kpc

mstarmin=float(args.minmass)
mstarmax=10.8
minmass=mstarmin #log of M*
ssfrmin=-12.
ssfrmax=-9
spiralcut=0.8
truncation_ratio=0.5

exterior=.68
colors=['k','b','c','g','m','y','r','sienna','0.5']
shapes=['o','*','p','d','s','^','>','<','v']
#colors=['k','b','c','g','m','y','r','sienna','0.5']

truncated=array([113107,140175,79360,79394,79551,79545,82185,166185,166687,162832,146659,99508,170903,18236,43796,43817,43821,70634,104038,104181],'i')

# figure setup
plotsize_single=(6.8,5)
plotsize_2panel=(10,5)
params = {'backend': 'ps',
          'axes.labelsize': 24,
          'text.fontsize': 20,
          'legend.fontsize': 12,
          'xtick.labelsize': 14,
          'ytick.labelsize': 14,
          #'figure.titlesize': 20,
          'text.usetex': False,
          'figure.figsize': plotsize_single}
plt.rcParams.update(params)
figuredir = '/Users/rfinn/Dropbox/Research/MyPapers/LCSpaper1/submit/resubmit4/'

def binxycolor(x,y,color,nbin=5,erry=False,use_median=False,equal_pop_bins=False):
    '''
    - bin x in nbin equally spaced bins
    - calculate the median y value in each bin
    - calculate the median color in each bin
    '''
    xbins = np.zeros(nbin,'f')
    ybins = np.zeros(nbin,'f')
    ybinerr = np.zeros(len(xbins),'f')
    colorbins = np.zeros(len(xbins),'f')
    if equal_pop_bins:
        sorted_indices = np.argsort(x)
        y = y[sorted_indices]
        x = x[sorted_indices]
        color = color[sorted_indices]
        n_per_bin = len(x)/nbin
        xbin_number = np.arange(len(x))/int(n_per_bin)
        #print xbin_number
        #print x
    else:
        xbin_number = np.array(((x-min(x))*nbin/(max(x)-min(x))),'i')
    for i in range(nbin):
        if use_median:
            xbins[i] = np.median(x[xbin_number == i])
            ybins[i] = np.median(y[xbin_number == i])
            colorbins[i] = np.median(color[xbin_number == i])
        else:
            xbins[i] = np.mean(x[xbin_number == i])
            ybins[i] = np.mean(y[xbin_number == i])
            colorbins[i] = np.mean(color[xbin_number == i])

        ybinerr = np.std(y[xbin_number == i])/np.sqrt(sum(xbin_number == i))
                      
    if erry:
        return xbins,ybins,ybinerr,colorbins
    else:
        return xbins,ybins,colorbins


        
    
def pair(data, labels=None,norm=True,scale=True,namesAlongDiagonal=True,showTicks=False):
    """ Generate something similar to R `pair` """

    nVariables = data.shape[1]
    if labels is None:
        labels = ['var%d'%i for i in range(nVariables)]
    fig = plt.figure()
    if not(namesAlongDiagonal):
        fig.subplots_adjust(left=.2)
    for i in range(nVariables):
        for j in range(nVariables):
            nSub = i * nVariables + j + 1
            ax = fig.add_subplot(nVariables, nVariables, nSub)
            if not(showTicks):
                if i != (nVariables - 1):
                    ax.set_xticks([])
                if j != 0:
                    ax.set_yticks([])
            if not(namesAlongDiagonal):
                if i == 0:
                    ax.set_title(labels[j])
                if j == 0:
                    ax.text(-.4,.5,labels[i],transform=ax.transAxes,horizontalalignment='right')

            if i == j:
                if namesAlongDiagonal:
                    ax.text(.5,.5,labels[i],transform=ax.transAxes,horizontalalignment='center',verticalalignment='center')
                else:

                    if i == j:
                        ax.hist(data[:,i],color='0.5',normed=True)

            else:
                if norm & scale:
                    ax.plot((data[:,j]-np.mean(data[:,j]))/np.std(data[:,j]), (data[:,i]-np.mean(data[:,i]))/np.std(data[:,i]), '.k')
                elif norm & ~scale:
                    ax.plot(data[:,j]-np.mean(data[:,j]), data[:,i]-np.mean(data[:,i]), '.k')
                else:
                    ax.plot(data[:,j], data[:,i], '.k')

    return fig
def comparedata(rdata, cdata,rlabels=None,clabels=None,norm=False,scale=False,showTicks=True):
    """ Generate something similar to R `pair` """

    nrows = rdata.shape[1]
    ncols = cdata.shape[1]
    if rlabels is None:
        rlabels = ['var%d'%i for i in range(nrows)]
    if clabels is None:
        clabels = ['var%d'%i for i in range(ncols)]
    fig = plt.figure()
    plt.subplots_adjust(bottom=.15,left=.15,wspace=.04,hspace=.04)
    for i in range(nrows):
        for j in range(ncols):
            nSub = i * ncols + j + 1
            ax = fig.add_subplot(nrows, ncols, nSub)
            xticks(fontsize=12)
            yticks(fontsize=12)
            if not(showTicks):
                if i != (nrows - 1):
                    ax.set_xticks([])
                if j != 0:
                    ax.set_yticks([])
            if i == (nrows-1):
                ax.set_xlabel(clabels[j],fontsize=18)
            if j == 0:
                ax.set_ylabel(rlabels[i],fontsize=18)


            if norm & scale:
                ax.plot((cdata[:,j]-np.mean(cdata[:,j]))/np.std(cdata[:,j]), (rdata[:,i]-np.mean(rdata[:,i]))/np.std(rdata[:,i]), '.k')
            elif norm & ~scale:
                ax.plot(cdata[:,j]-np.mean(cdata[:,j]), rdata[:,i]-np.mean(rdata[:,i]), '.k')
            else:
                ax.plot(cdata[:,j], rdata[:,i], '.k')

    return fig

def pairs(data, names):
    "Quick&dirty scatterplot matrix"
    d = len(data)
    fig, paxes = subplots(nrows=d, ncols=d, sharex='col', sharey='row')
    print paxes.size
    for i in range(d):
        for j in range(d):
            ax = paxes[i,j]
            #subplot(d,d,i+j+1)
            if i == j:
                ax.text(0.5, 0.5, names[i], transform=ax.transAxes,
                        horizontalalignment='center', verticalalignment='center',
                        fontsize=16)
            else:
                print 'plotting data!'
                
                ax.scatter(np.array(data[j]), np.array(data[i]))
                #ax.axhline(y=0)
                #ax.axvline(x=0)
                #show()
                ax.axis([min(data[j]),max(data[j]),min(data[i]),max(data[i])])
                #print i,j,data[j]
                #print i,j,data[i]
                #ax.plot(data[j],data[i],'k.')
                #figure()
                #plot(data[j],data[i],'bo')
def fit_intercept(x,y):
    fitfunc = lambda intercept, x: x + intercept
    errfunc = lambda intercept, x, y: fitfunc(intercept,x)-y

    p1,success = leastsq(errfunc,0, args = (x,y))
    return p1
def fit_slope(x,y,yerr=None,yerrflag=0):
    fitfunc = lambda p1, x: p1*x
    if yerrflag:
        errfunc = lambda p1, x, y: (fitfunc(p1,x)-y)/yerr
    else:
        errfunc = lambda p1, x, y: fitfunc(p1,x)-y

    p2,success = leastsq(errfunc,.7, args = (x,y))
    return p2
    
def calculate_sfsb(redshift,sbcutobs=20.):
    '''
    calculate the limiting sfr/kpc^2 from the surface brightness cut in mag/sq arcsec
    '''    
    flux_zp_AB = 3631.
    flux = flux_zp_AB*10.**(-1.*sbcutobs/2.5)
    # convert to micro-Jy when sending to chary-elbaz
    lircut,sfrcut=chary.chary_elbaz_24um(redshift,flux*1.e6)

    # get arcsec -> kpc conversion
    # DA returns kpc/arcsec
    da= cosmo.angular_diameter_distance(redshift).value*Mpcrad_kpcarcsec
    sfrsb=sfrcut/da**2
    lirsb=lircut/da**2
    return sfrsb,lirsb
class ellipticals():
    def __init__(self):
        hdulist=fits.open(homedir+'research/LocalClusters/NSAmastertables/LCS_notSpirals_all.fits')
        self.s=hdulist[1].data
        hdulist.close()
        # convert flags to boolean
        self.AGNKAUFF=self.s['AGNKAUFF'] & (self.s.HAEW > 0.)
        self.AGNKEWLEY=self.s['AGNKEWLEY']& (self.s.HAEW > 0.)
        self.AGNSTASIN=self.s['AGNSTASIN']& (self.s.HAEW > 0.)
        self.gim2dflag=self.s['matchflag'] & (self.gim2d.Rd == self.gim2d.Rd) # get rid of nan's in Rd
        self.cnumerical_error_flag24=self.s['cnumerical_error_flag24']
        self.fcnumerical_error_flag24=self.s['fcnumerical_error_flag24']
        self.mipsflag=self.s.MATCHFLAG24 == 1.
class spirals():
    def __init__(self,infile,usecoma=True,useherc=True,onlycoma=False,prefix='all'):
        self.prefix=prefix 
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'
        print '\n prefix = \n',self.prefix
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'
        print '%%%%%%%%%%%%%%%%%%%%%%%%%%'

        self.jmass=fits.getdata(homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_all_fsps_v2.4_miles_chab_charlot_sfhgrid01.fits')
        # use jmass.mstar_50 and jmass.mstar_err
        self.isorad=fits.getdata(homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_isorad.fits')

        self.agc=fits.getdata(homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_AGC.fits')


        self.s=fits.getdata(infile)

        self.gim2d=fits.getdata(homedir+'research/LocalClusters/NSAmastertables/LCS_all.gim2d.tab1.fits')

        #self.membflag = (self.s.DR_R200 < 1.) & (abs(self.dv) < 3.)
        if usecoma == False:
            flag = (self.s.CLUSTER != 'Coma') | (abs(self.s.DELTA_V) > 3.)
            self.s=self.s[flag]
            self.gim2d=self.gim2d[flag]
            self.agc = self.agc[flag]
            try:
                self.isorad=self.isorad[flag]
                self.jmass = self.jmass[flag]
                
            except:
                print 'WARNING: problem matching to moustakas MSTAR_50 - probably ok'


            #self.agnflag=self.agnflag[self.s.CLUSTER != 'Coma']
            self.comaflag=False
        if onlycoma == True:
            self.s=self.s[self.s.CLUSTER == 'Coma']
            #self.jmass=self.jmass[self.s.CLUSTER == 'Coma']
            #self.isorad=self.isorad[self.s.CLUSTER == 'Coma']
            #self.agc=self.agc[self.s.CLUSTER == 'Coma']


        if useherc == False:
            self.s=self.s[self.s.CLUSTER != 'Hercules']
            #self.jmass=self.jmass[self.s.CLUSTER != 'Hercules']
            #self.isorad=self.isorad[self.s.CLUSTER != 'Hercules']
            #self.agc=self.agc[self.s.CLUSTER != 'Hercules']
            #self.logstellarmassTaylor=self.logstellarmassTaylor[self.s.CLUSTER != 'Hercules']


        cols=self.s.columns
        cnames=cols.names

        self.logstellarmassTaylor=1.15+0.70*(self.s.ABSMAG[:,3]-self.s.ABSMAG[:,5]) -0.4*(self.s.ABSMAG[:,5]+ 5.*log10(h))
        bad_imag=self.logstellarmassTaylor < 5.
        newi=(self.s.ABSMAG[:,4]+self.s.ABSMAG[:,6])/2.
        #print len(newi)
        self.logstellarmassTaylor[bad_imag]=1.15+0.70*(self.s.ABSMAG[:,3][bad_imag]-newi[bad_imag]) -0.4*(newi[bad_imag]+ 5.*log10(h))


        self.AGNKAUFF=self.s['AGNKAUFF']
        self.AGNKEWLEY=self.s['AGNKEWLEY']
        self.AGNSTASIN=self.s['AGNSTASIN']
        self.AGNKAUFF=self.s['AGNKAUFF'] & (self.s.HAEW > 0.)
        self.AGNKEWLEY=self.s['AGNKEWLEY']& (self.s.HAEW > 0.)
        self.AGNSTASIN=self.s['AGNSTASIN']& (self.s.HAEW > 0.)
        self.cnumerical_error_flag24=self.s['fnumerical_error_flag24']
        self.fcnumerical_error_flag24=self.s['fcnumerical_error_flag24']
        self.AGNKAUFF= ((log10(self.s.O3FLUX/self.s.HBFLUX) > (.61/(log10(self.s.N2FLUX/self.s.HAFLUX)-.05)+1.3)) | (log10(self.s.N2FLUX/self.s.HAFLUX) > 0.))
        #y=(.61/(x-.47)+1.19)
        self.AGNKEWLEY= ((log10(self.s.O3FLUX/self.s.HBFLUX) > (.61/(log10(self.s.N2FLUX/self.s.HAFLUX)-.47)+1.19)) | (log10(self.s.N2FLUX/self.s.HAFLUX) > 0.3))


        self.upperlimit=self.s['RE_UPPERLIMIT'] # converts this to proper boolean array
        self.pointsource=self.s['POINTSOURCE'] # converts this to proper boolean array
        self.gim2dflag=self.gim2d.recno > 0. # get rid of nan's in Rd
        self.zooflag=self.s['match_flag']
        self.nerrorflag=self.s['fcnumerical_error_flag24']
        # convert flags to boolean arrays
        for col in cnames:
            if (col.find('flag') > -1) | (col.find('AGN') > -1):
                #print col
                self.s.field(col)[:]=np.array(self.s[col],'bool')



                                        
        self.nsadict=dict((a,b) for a,b in zip(self.s.NSAID,arange(len(self.s.NSAID))))
        self.logstellarmass =  self.s.MSTAR_50 # self.logstellarmassTaylor # or
        #self.logstellarmass =  self.logstellarmassTaylor # or
        #self.define_supersize()
        # calculating magnitudes from fluxes provided from NSA 
        # 
        # m = 22.5 - 2.5 log_10 (flux_nanomaggies)
        # from http://www.sdss3.org/dr8/algorithms/magnitudes.php#nmgy
        self.nsamag=22.5-2.5*log10(self.s.NMGY)
        self.badfits=zeros(len(self.s.RA),'bool')
        #badfits=array([166134, 166185, 103789, 104181],'i')'
        nearbystar=[142655, 143485, 99840, 80878] # bad NSA fit; 24um is ok
        #nearbygalaxy=[103927,143485,146607, 166638,99877,103933,99056]#,140197] # either NSA or 24um fit is unreliable
        # checked after reworking galfit
        nearbygalaxy=[143485,146607, 166638,99877,103933,99056]#,140197] # either NSA or 24um fit is unreliable
        #badNSA=[166185,142655,99644,103825,145998]
        #badNSA = [
        badfits= nearbygalaxy#+nearbystar+nearbygalaxy
        badfits=array(badfits,'i')
        for gal in badfits:
            self.badfits[where(self.s.NSAID == gal)]  = 1

        
        self.sdssspecflag=(self.s.ISDSS > -1)
        self.emissionflag=((self.s.HAFLUX != 0.) & (self.s.HAFLUX != -9999.) & (self.s.N2FLUX != 0.)) | self.sdssspecflag
        self.alfalfaflag=(self.s.IALFALFA > -1) 
        self.mipsflag=(self.s.LIR_ZDIST > 0.)
        self.mipsflag=(self.s.FLUX_RADIUS1 > 0.)
        self.wiseflag = (self.s.W1FLG_3 < 2) & (self.s.W2FLG_3 < 2) & (self.s.W3FLG_3 < 2) & (self.s.W4FLG_3 < 2)
        # this allows for source confusion and the presence of some bad pixels within the aperture. 

        self.wiseagn=(self.s.W1MAG_3 - self.s.W2MAG_3) > 0.8
        self.agnflag = self.AGNKAUFF | self.wiseagn
        #self.agnkauff=self.s.AGNKAUFF > .1
        #self.agnkewley=self.s.AGNKEWLEY > .1
        #self.agnstasin=self.s.AGNSTASIN > .1
        self.dv = (self.s.ZDIST - self.s.CLUSTER_REDSHIFT)*3.e5/self.s.CLUSTER_SIGMA
        self.dvflag = abs(self.dv) < 3.

        #self.agnflag = self.agnkauff
        #self.galfitflag=(self.s.galfitflag > .1) #| (self.s.fcmag1 < .1)
        #self.galfitflag[(self.s.fcmag1 < .1)]=zeros(sum(self.s.fcmag1<.1))
        #self.agnflag = self.s.agnflag > .1
        #self.zooflag = self.s.match_flag > .1
        # self.gim2dflag = self.s.matchflag > .1
        self.membflag = (self.s.DR_R200 < 1.) & (abs(self.dv) < 3.)
        #self.membflag = abs(self.dv) < (-1.25*self.s.DR_R200 + 1.5)
        # selection of infalling galaxies from Oman+13
        self.membflag = abs(self.dv) < (-4./3.*self.s.DR_R200 + 2)
        #self.membflag = self.s.SIGMA_5 > 2.5
        # sharper cut determined by eye
        #self.membflag = abs(self.dv) < (-3./1.2*self.s.DR_R200 + 3)
        #self.nearexteriorflag = (self.s.DR_R200 > 1.) & (abs(self.dv) < 3.)
        self.nearexteriorflag = ~self.membflag & (abs(self.dv) < 3.)
        self.exteriorflag =  (abs(self.dv) > 3.)
        self.groupflag = ((self.s.CLUSTER == 'MKW11') | (self.s.CLUSTER == 'MKW8') | (self.s.CLUSTER == 'AWM4') | (self.s.CLUSTER == 'NGC6107'))
        self.clusterflag = ((self.s.CLUSTER == 'A1367') | (self.s.CLUSTER == 'Coma') | (self.s.CLUSTER == 'Hercules') | (self.s.CLUSTER == 'A2052') | (self.s.CLUSTER == 'A2063'))
        #environmental zones
        self.zone1=(self.s.DR_R200 < .5) & (abs(self.dv) < 3.)
        self.zone2=(self.s.DR_R200 > .5) & (self.s.DR_R200 < 1) & (abs(self.dv) < 3.)
        self.zone3=(self.s.DR_R200 > 1)  & (abs(self.dv) < 3.)
        self.zone4= (abs(self.dv) > 3.)
        self.HIflag = self.s.HIMASS > 0.
        
        self.sumagnflag=self.s.AGNKAUFF + self.s.AGNKEWLEY  + self.s.AGNSTASIN
        self.da=zeros(len(self.s.ZDIST),'f')
        q=.2
        baflag=self.s.SERSIC_BA < q
        self.incl=arccos(sqrt((self.s.SERSIC_BA**2-q**2)/(1.-q**2)))*(~baflag)+baflag*pi/2. # in radians
        # correct for inclination
        #self.isorad.NSA=self.isorad.NSA*cos(self.incl)
        #self.isorad.MIPS=self.isorad.MIPS*cos(self.incl)

        self.mag24=23.9-2.5*log10(self.s.FLUX24)
        self.NUV24=(self.nsamag[:,2])-self.mag24
        self.mag24se=18.526-2.5*log10(self.s.SE_FLUX_AUTO)
        
        #self.gi_corr=(self.nsamag[:,3]-self.nsamag[:,5])-(.17*(1-cos(self.incl))*((self.jmass.MSTAR_50)-8.19))
        self.gi_corr=(self.nsamag[:,3]-self.nsamag[:,5])-(.17*(1-cos(self.incl))*((self.logstellarmass)-8.19))
        for i in range(len(self.s.ZDIST)):
            self.da[i] = cosmo.angular_diameter_distance(self.s.ZDIST[i]).value 



        self.da=cosmo.angular_diameter_distance(self.s.ZDIST).value*Mpcrad_kpcarcsec  # kpc/arcsec
        self.spiralflag=(self.s.p_cs > spiralcut) #|  (self.s.p_cs == 0)
        for c in clusternames:
            if (c == 'Coma') & (usecoma == False):
                continue
            else:
                for id in spiral_100_nozoo[c]:
                    try:
                        self.spiralflag[self.nsadict[id]]=1
                    except:
                        print 'did not find ',id



        self.dist3d=sqrt((self.dv-3.)**2 + (self.s.DR_R200)**2)

        self.sb_obs=zeros(len(self.s.RA))
        flag= (~self.s['fcnumerical_error_flag24'])
        self.sb_obs[flag]=self.s.fcmag1[flag] + 2.5*log10(pi*((self.s.fcre1[flag]*mipspixelscale)**2)*self.s.fcaxisratio1[flag])
        self.DA=zeros(len(self.s.SERSIC_TH50))
        for i in range(len(self.DA)):
            if self.membflag[i]:
                self.DA[i] = cosmo.angular_diameter_distance(self.s.CLUSTER_REDSHIFT[i]).value*Mpcrad_kpcarcsec
            else:
                self.DA[i] = cosmo.angular_diameter_distance(self.s.ZDIST[i]).value*Mpcrad_kpcarcsec
        self.sizeflag=(self.s.SERSIC_TH50*self.DA > minsize_kpc) #& (self.s.SERSIC_TH50 < 20.)


        self.SIZE_RATIO_DISK = np.zeros(len(self.gim2dflag))
        print len(self.s.fcre1),len(self.gim2dflag)
        a =  self.s.fcre1[self.gim2dflag]*mipspixelscale
        b = self.DA[self.gim2dflag]
        c = self.gim2d.Rd[self.gim2dflag]
        self.SIZE_RATIO_DISK[self.gim2dflag] =a*b/c
        
        self.SIZE_RATIO_DISK_ERR = np.zeros(len(self.gim2dflag))
        self.SIZE_RATIO_DISK_ERR[self.gim2dflag] = self.s.fcre1err[self.gim2dflag]*mipspixelscale*self.DA[self.gim2dflag]/self.gim2d.Rd[self.gim2dflag]
        self.SIZE_RATIO_gim2d = np.zeros(len(self.gim2dflag))
        self.SIZE_RATIO_gim2d[self.gim2dflag] = self.s.fcre1[self.gim2dflag]*mipspixelscale*self.DA[self.gim2dflag]/self.gim2d.Rhlr[self.gim2dflag]
        self.SIZE_RATIO_gim2d_ERR = np.zeros(len(self.gim2dflag))
        self.SIZE_RATIO_gim2d_ERR[self.gim2dflag] = self.s.fcre1err[self.gim2dflag]*mipspixelscale*self.DA[self.gim2dflag]/self.gim2d.Rhlr[self.gim2dflag]
        self.SIZE_RATIO_NSA = self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
        self.SIZE_RATIO_NSA_ERR=self.s.fcre1err*mipspixelscale/self.s.SERSIC_TH50

        if USE_DISK_ONLY:
            self.sizeratio = self.SIZE_RATIO_DISK
            self.sizeratioERR=self.SIZE_RATIO_DISK_ERR
        else:
            #self.sizeratio = self.SIZE_RATIO_gim2d
            #self.sizeratioERR=self.SIZE_RATIO_gim2d_ERR
            self.sizeratio = self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
            self.sizeratioERR=self.s.fcre1err*mipspixelscale/self.s.SERSIC_TH50
        self.massflag=self.logstellarmass > minmass
        self.Re24_kpc = self.s.fcre1*mipspixelscale*self.DA
        self.lirflag=(self.s.LIR_ZDIST > 5.2e8)
        self.galfitflag = (self.s.fcmag1 > .1)  & ~self.nerrorflag & (self.sb_obs < 20.) & (self.s.fcre1/self.s.fcre1err > .5)#20.)
        #override the galfit flag for the following galaxies
        self.galfit_override = [70588,70696,43791,69673,146875,82170, 82182, 82188, 82198, 99058, 99660, 99675, 146636, 146638, 146659, 113092, 113095, 72623,72631,72659, 72749, 72778, 79779, 146121, 146130, 166167, 79417, 79591, 79608, 79706, 80769, 80873, 146003, 166044,166083, 89101, 89108,103613,162792,162838, 89063]
        for id in self.galfit_override:
            try:
                self.galfitflag[self.nsadict[int(id)]] = True
            except KeyError:

                if self.prefix == 'no_coma':
                    print 'ids not relevant for nc'
                else:
                    sys.exit()
        #self.galfitflag = self.galfitflag 
        self.galfitflag[self.nsadict[79378]] = False
        self.galfitflag = self.galfitflag & ~self.badfits
        self.sbflag=self.sb_obs < 20.
        self.sfsampleflag = self.sizeflag & self.massflag & self.lirflag & ~self.badfits

        self.ur=self.s.ABSMAG[:,2]-self.s.ABSMAG[:,4]
        self.redflag=(self.ur > 2.3)
        self.greenflag=(self.ur > 1.8) & (self.ur < 2.3)
        self.blueflag=(self.ur<1.8)
        self.NUVr=self.s.ABSMAG[:,1] - self.s.ABSMAG[:,4]
        self.blueflag2=self.NUVr < 4
        self.greenflag = (self.NUVr < 5) & ~self.blueflag2

        # add galaxies with blue u-r colors but no galex data
        self.blue_nogalex = (self.s.NMGY[:,1] == 0.) & (self.blueflag)
        self.blueflag2[self.blue_nogalex] = np.ones(sum(self.blue_nogalex))

        self.basesampleflag = self.galfitflag  & self.sizeflag & self.massflag & self.lirflag & ~self.badfits  & self.gim2dflag
        self.sampleflag = self.galfitflag    & self.lirflag   & self.sizeflag & ~self.agnflag & self.sbflag#& self.massflag#& self.gim2dflag#& self.blueflag2
        self.allbutgalfitflag =  ~self.galfitflag & self.lirflag    & self.sizeflag & ~self.agnflag  #& self.massflag#& self.gim2dflag#& self.blueflag2
        if USE_DISK_ONLY:
            self.sampleflag = self.sampleflag & self.gim2dflag
        self.greensampleflag = self.galfitflag  & self.sizeflag & self.massflag & self.lirflag & ~self.badfits & self.greenflag & self.gim2dflag
        self.bluesampleflag = self.sampleflag & self.blueflag2
        self.unknownagn= self.sizeflag & self.massflag & self.lirflag & ~self.emissionflag & ~self.wiseflag
        self.virialflag = self.dv < (1.5-1.25*self.s.DR_R200)
        #self.limitedsample=self.sampleflag & (self.logstellarmass > 9.5) & (self.logstellarmass < 10.2) & self.gim2dflag & (self.gim2d.B_T_r < 0.2) & self.dvflag
        self.c90=self.s.FLUX_RADIUS2/self.s.fcre1
        self.size_ratio_corr=self.sizeratio*(self.s.faxisratio1/self.s.SERSIC_BA)
        self.truncflag=(self.sizeratio < 0.7) & self.sampleflag  & ~self.agnflag
        self.dL = self.s.ZDIST*3.e5/H0
        self.distmod=25.+5.*log10(self.dL)
        #best_distance=self.membflag * self.cdMpc + ~self.membflag*(self.n.ZDIST*3.e5/H0)
        self.LIR_BEST = self.s.LIR_ZCLUST * self.membflag + ~self.membflag*(self.s.LIR_ZDIST)
        self.SFR_BEST = self.s.SFR_ZCLUST * np.array(self.dvflag,'i') + np.array(~self.dvflag,'i')*(self.s.SFR_ZDIST)

        self.ssfr=self.SFR_BEST/(10.**(self.logstellarmass))
        self.ssfrerr=self.SFR_BEST/(10.**(self.logstellarmass))*(self.s.FLUX24ERR/self.s.FLUX24)
        self.ssfrms=np.log10(self.ssfr*1.e9/.08)
        self.sigma_ir=np.zeros(len(self.LIR_BEST),'d')
        self.sigma_irerr=np.zeros(len(self.LIR_BEST),'d')
        self.sigma_irerr[self.galfitflag]= np.sqrt(((self.LIR_BEST[self.galfitflag]*self.s.FLUX24ERR[self.galfitflag]/self.s.FLUX24ERR[self.galfitflag])/2/(np.pi*(self.s.fcre1[self.galfitflag]*self.DA[self.galfitflag])**2))**2+(2.*self.LIR_BEST[self.galfitflag]/2/(np.pi*(self.s.fcre1[self.galfitflag]*self.DA[self.galfitflag])**3)*self.s.fcre1err[self.galfitflag])**2)
        self.sigma_ir[self.galfitflag]= self.LIR_BEST[self.galfitflag]/2/(np.pi*(self.s.fcre1[self.galfitflag]*self.DA[self.galfitflag])**2)
        self.starburst = (self.ssfr*1.e9 > .16)
        self.compact_starburst = (self.ssfr*1.e9 > .16) & (self.sigma_ir > 5.e9) 
        if (usecoma == True) | (usecoma == False):
            n2ha=log10(self.s.N2FLUX/self.s.HAFLUX)
            o3hb=log10(self.s.O3FLUX/self.s.HBFLUX)

            flag=(self.sampleflag & self.dvflag & self.gim2dflag & (self.gim2d.B_T_r == self.gim2d.B_T_r) & (n2ha == n2ha) & (o3hb == o3hb) & (self.sizeratio < 4.) & (self.sizeratioERR < 0.3)) & ~self.agnflag & self.sdssspecflag & self.zooflag #& self.HIflag
            pcaoutput=zeros([sum(flag),18])
    
            pcaoutput[:,0]=self.sizeratio[flag]
            pcaoutput[:,1]=self.logstellarmass[flag]
            pcaoutput[:,2]=self.s.DR_R200[flag]
            pcaoutput[:,3]=self.gim2d.B_T_r[flag]
            pcaoutput[:,4]=log10(self.SFR_BEST[flag])
            pcaoutput[:,5]=self.s.SERSIC_TH50[flag]
            pcaoutput[:,6]=self.s.SERSIC_N[flag]
            pcaoutput[:,7]=log10(self.s.SIGMA_NN[flag])
            pcaoutput[:,8]=log10(self.s.SIGMA_5[flag])
            pcaoutput[:,9]=log10(self.s.SIGMA_10[flag])
            pcaoutput[:,10]=self.s.CLUSTER_PHI[flag]
            pcaoutput[:,11]=self.s.S2g_1[flag]
            #pcaoutput[:,12]=n2ha[flag]
            #pcaoutput[:,13]=o3hb[flag]
            pcaoutput[:,12]=self.s.p_cs[flag]
            pcaoutput[:,13]=log10(self.ssfr[flag]*1.e11)
            pcaoutput[:,14]=(self.s.D4000[flag])
            pcaoutput[:,15]=(self.s.AV[flag])
            pcaoutput[:,16]=(self.nsamag[:,2][flag]-self.nsamag[:,3][flag])#u-g color
            pcaoutput[:,17]=(self.s.AHDEW[flag])
            #pcaoutput[:,19]=(self.s.HIDef[flag])
            #pcaoutput[:,19]=(self.s.p_cs[flag])



            outfile=homedir+'research/LocalClusters/Rdata/PCA.dat'
            #head='size \t Mstar \t dr \t BT \t SFR \t Rer \t nr \t sigmaNN \t sigma5 \t sigma10 \t clusterphi \t smoothness \t pcs \t ssfr \t D4000 \t AV \t ug \t HDEW'

            
            head='size \t Mstar \t dr \t BT \t SFR \t Rer \t nr \t dv \t sigma5  \t smoothness \t ssfr '
            savetxt(outfile,pcaoutput,header=head,fmt='%1.4e')
            self.pcaoutput=pcaoutput


            flag=(self.sampleflag  & self.gim2dflag & (self.gim2d.B_T_r == self.gim2d.B_T_r) )
            pcaoutput=zeros([sum(flag),15])
    
            pcaoutput[:,0]=self.sizeratio[flag]
            pcaoutput[:,1]=self.logstellarmass[flag]
            pcaoutput[:,2]=self.s.DR_R200[flag]
            pcaoutput[:,3]=self.gim2d.B_T_r[flag]
            pcaoutput[:,4]=log10(self.SFR_BEST[flag])
            pcaoutput[:,5]=self.s.SERSIC_TH50[flag]
            pcaoutput[:,6]=self.s.SERSIC_N[flag]
            pcaoutput[:,7]=self.s.DELTA_V[flag]
            #pcaoutput[:,7]=log10(self.s.SIGMA_NN[flag])
            pcaoutput[:,8]=log10(self.s.SIGMA_5[flag])
            #pcaoutput[:,9]=log10(self.s.SIGMA_10[flag])
            pcaoutput[:,9]=self.s.CLUSTER_SIGMA[flag]/(self.s.DR_R200[flag]**2)
            #pcaoutput[:,11]=self.s.S2g_1[flag]
            #pcaoutput[:,12]=n2ha[flag]
            #pcaoutput[:,13]=o3hb[flag]
            pcaoutput[:,10]=log10(self.ssfr[flag]*1.e11)
            pcaoutput[:,11]=self.logstellarmass[flag]-2.*log10(self.s.SERSIC_TH50[flag])
            pcaoutput[:,12]=self.s.SERSIC_BA[flag]
            pcaoutput[:,13]=self.NUVr[flag]
            pcaoutput[:,14]=self.NUV24[flag]
            #pcaoutput[:,15]=(self.s.D4000[flag])
            #pcaoutput[:,16]=(self.s.AV[flag])
            #pcaoutput[:,17]=(self.nsamag[:,2][flag]-self.nsamag[:,3][flag])#u-g color
            #pcaoutput[:,18]=(self.s.AHDEW[flag])
            #pcaoutput[:,19]=(self.upperlimit[flag])                       
            #pcaoutput[:,20]=(self.s.HIDef[flag])

            #outfile=homedir+'research/LocalClusters/Rdata/PCAblue.dat'
            #head='size M* dr  B/T SFR Re_r n_r'
            head='size Mstar  dr  BT  SFR Rer  nr  dv  sigma5 cluster_sigma_dr ssfr stellar_surfdens BA '
            print 'PREFIX = ',self.prefix
            if self.prefix == 'no_coma':
                outfile=homedir+'research/LocalClusters/Rdata/PCAblueNoComa.dat'
            elif self.prefix == 'no_herc':
                outfile=homedir+'research/LocalClusters/Rdata/PCAblueNoHerc.dat'
            else:
                outfile=homedir+'research/LocalClusters/Rdata/PCAblue.dat'

            #savetxt(outfile,pcaoutput,delimiter='\t',header=head,comments='',fmt='%1.4e')

            savetxt(outfile,pcaoutput,header=head,fmt='%1.4e')
            self.pcaoutput=pcaoutput


        self.agcdict=dict((a,b) for a,b in zip(self.s.AGCNUMBER,arange(len(self.s.AGCNUMBER))))
        self.nsadict=dict((a,b) for a,b in zip(self.s.NSAID,arange(len(self.s.NSAID))))
        self.massdensity=self.logstellarmass-log10(2*pi*(self.s.SERSIC_TH50*self.DA)**2)
        #self.starburstflag = (self.ssfr/(.08e-9) > 2.)
        '''

        self.isosampleflag = (self.isorad.NSA > 0.) & (self.spiralflag) & (self.logstellarmass > minmass) & (self.s.SERSIC_BA > 0.2)#& (self.isorad.MIPS > 0.)
        #self.ssfr=self.s.SFR_ZDIST/(10.**(self.jmass.MSTAR_50))
        #print len(self.s.SFR_ZDIST),len(self.logstellarmassTaylor)

        self.isotruncflag=(self.isorad.MIPS/self.isorad.NSA < .7) & self.isosampleflag
        self.isosize=(self.isorad.MIPS/self.isorad.NSA)
        self.r90size=(self.s.FLUX_RADIUS2*mipspixelscale/self.isorad.NSA)
        self.r90size=(self.s.FLUX_RADIUS2*mipspixelscale/self.isorad.NSAR90)
        self.outertruncflag=zeros(len(self.s.RA),'bool')
        for i in range(len(self.s.RA)):
            if self.s.NSAID[i] in truncated:
                self.outertruncflag[i]=1

        #self.massdensity=self.jmass.MSTAR_50+1.5*log10(self.s.SERSIC_TH50*self.DA)
                                                   
        #self.enhanced=((log10(self.s.SFR_ZDIST)-.25 -self.jmass.MSTAR_50) > (-0.35*(self.jmass.MSTAR_50-10)-10.)) & ~self.agnflag & self.isosampleflag & self.dvflag & (self.sizeratio < .5)

        #self.normal=((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-10.)) & ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) > (-0.35*((self.jmass.MSTAR_50)-10)-10.92)) & ~self.agnflag & self.isosampleflag & self.dvflag
        #self.normalgalfit=((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-10.)) & ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) > (-0.35*((self.jmass.MSTAR_50)-10)-10.92)) & ~self.agnflag & self.sampleflag & self.dvflag 
        #self.normaltrunc=((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-10.)) & ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) > (-0.35*((self.jmass.MSTAR_50)-10)-10.92)) & ~self.agnflag & self.isosampleflag & self.dvflag & (self.isorad.MIPS*1.5 < self.isorad.NSA)
        #self.normalconc=((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-10.)) & ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) > (-0.35*((self.jmass.MSTAR_50)-10)-10.92)) & ~self.agnflag & self.sampleflag & self.dvflag & (self.sizeratio < .5)
        #self.lowsfr=((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-10.92)) & ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) > (-0.35*((self.jmass.MSTAR_50)-10)-11.4)) & ~self.agnflag & self.isosampleflag & self.dvflag
        #self.depleted= ((log10(self.s.SFR_ZDIST)-.25-self.jmass.MSTAR_50) < (-0.35*((self.jmass.MSTAR_50)-10)-11.4)) & ~self.agnflag & self.isosampleflag & self.dvflag & ((log10(self.s.SFR_ZDIST)-.24-self.jmass.MSTAR_50) >-13)
        '''
        self.tdepletion=self.s.HIMASS/self.s.SFR_ZDIST
        #print size(self.SFR_BEST),size(self.logstellarmassTaylor)

    def calculate_clusterphi(self):
        quad1=(self.s.DELTA_DEC > 0) & (self.s.DELTA_RA < 0)
        quad2=(self.s.DELTA_DEC > 0) & (self.s.DELTA_RA > 0)
        quad3=(self.s.DELTA_DEC < 0) & (self.s.DELTA_RA > 0)
        quad4=(self.s.DELTA_DEC < 0) & (self.s.DELTA_RA < 0)
        #self.theta=arctan(abs(self.delta_dec)/abs(self.delta_ra))*180./pi
        # CALCULATE CLUSTER PHI
    def phasespacestats(self):
        # low Lx clusters
        #   size in virial region
        #   size outside R200
        # high Lx clusters
        # high Lx clusters without coma
        print 'work in progress'
    def printsize(self):

        #flags=[self.membflag,self.nearexteriorflag,self.exteriorflag]
        names=['$cluster$','$near \ exterior$','$exterior$']
        outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSpaper1/Table3.tex','w')
        outfile.write('\\begin{deluxetable*}{lcccccc} \n')
        outfile.write('\\tablecaption{Number and Size of SF and AGN By Environment \label{samplesizes}} \n')
        outfile.write('\\tablehead{\\colhead{Category} & \\colhead{SF} &\\colhead{\\size} &\\colhead{AGN} & \\colhead{\\size} & \\colhead{Total} & \\colhead{\\size} } \n')
        outfile.write('\startdata \n')
        flags=[self.membflag & self.blueflag2,self.nearexteriorflag & self.blueflag2,self.exteriorflag & self.blueflag2]
        names=['Cluster','Near External','External']
        for i in range(len(names)):
            tableline= '%s & %3i & %5.2f (%5.2f) $\pm$ %5.2f &  %3i & %5.2f (%5.2f) $\pm$ %5.2f & %3i & %5.2f (%5.2f) $\pm$ %5.2f \\\\ \n' %(names[i],np.sum(flags[i] & self.sampleflag & ~self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              np.std(self.sizeratio[flags[i]& self.sampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & ~self.agnflag)),
              np.sum(flags[i] & self.sampleflag & self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & self.agnflag)),
              np.sum(flags[i] & self.sampleflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag ]),
              np.median(self.sizeratio[flags[i] & self.sampleflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag ])/np.sqrt(np.sum(flags[i]& self.sampleflag )))

            outfile.write(tableline)
        outfile.write('\enddata \n')
        outfile.write('\end{deluxetable*} \n')
        outfile.close()
        for i in range(len(names)):
            print '%s: \n \t N_SF  = %3i, size = %5.2f (%5.2f) +/- %5.2f \n \t N_AGN = %3i, size = %5.2f (%5.2f) +/- %5.2f \n\t N_ALL = %3i, size = %5.2f (%5.2f) +/- %5.2f \n\n' %(names[i],np.sum(flags[i] & self.sampleflag & ~self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              np.std(self.sizeratio[flags[i]& self.sampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & ~self.agnflag)),
              np.sum(flags[i] & self.sampleflag & self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & self.agnflag)),
              np.sum(flags[i] & self.sampleflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag ]),
              np.median(self.sizeratio[flags[i] & self.sampleflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag ])/np.sqrt(np.sum(flags[i]& self.sampleflag )))


        plt.figure()
        plt.subplots_adjust(left=.15,bottom=.15)
        allax=[]
        #plt.subplot(2,1,1)
        x=np.arange(3)
        y=[np.mean(self.sizeratio[flags[0] & self.sampleflag & ~self.agnflag]),
           np.mean(self.sizeratio[flags[1] & self.sampleflag & ~self.agnflag]),
           np.mean(self.sizeratio[flags[2] & self.sampleflag & ~self.agnflag])]
        yerror=[np.std(self.sizeratio[flags[0]& self.sampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[0]& self.sampleflag & ~self.agnflag)),
              np.std(self.sizeratio[flags[1]& self.sampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[1]& self.sampleflag & ~self.agnflag)),
              np.std(self.sizeratio[flags[2]& self.sampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[2]& self.sampleflag & ~self.agnflag))]
        errorbar(x,y,yerr=yerror,fmt='o',label='$SF \ Galaxies$',markersize=12,color='k')
        allax.append(plt.gca())

        #plt.subplot(2,1,2)
        x=np.arange(3)
        y=[np.mean(self.sizeratio[flags[0] & self.sampleflag & self.agnflag]),
           np.mean(self.sizeratio[flags[1] & self.sampleflag & self.agnflag]),
           np.mean(self.sizeratio[flags[2] & self.sampleflag & self.agnflag])]
        yerror=[np.std(self.sizeratio[flags[0]& self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[0]& self.sampleflag & self.agnflag)),
              np.std(self.sizeratio[flags[1]& self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[1]& self.sampleflag & self.agnflag)),
              np.std(self.sizeratio[flags[2]& self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[2]& self.sampleflag & self.agnflag))]
        #errorbar(x,y,yerr=yerror,fmt='^',label='$AGN$',markersize=12,color='k')
        #allax.append(plt.gca())
        titles=['$SF \ Galaxies $','$AGN $']
        plt.legend(loc='upper left',numpoints=1)
        plt.axis([-.4,2.4,0.4,.9])
        plt.xticks(arange(3),names,fontsize=22)
        #plt.gca().set_yscale('log')
        plt.ylabel('$R_e(24)/R_e(r) $')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeenv.eps')
        #plt.yticks(arange(0,2,.4))
        '''
        for i in range(len(allax)):
            plt.sca(allax[i])
            axis([-.4,2.4,0.,1.6])
            plt.xticks(arange(3),names)
            plt.yticks(arange(0,2,.4))
            plt.text(.05,.8,titles[i],horizontalalignment='left',transform=allax[i].transAxes,fontsize=20)


           np.mean(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
           np.mean(self.sizeratio[flags[i] & self.sampleflag ]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              
              np.sum(flags[i] & self.sampleflag & self.agnflag),

              np.median(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & self.agnflag)),
              np.sum(flags[i] & self.sampleflag),
              
              np.median(self.sizeratio[flags[i] & self.sampleflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag ])/np.sqrt(np.sum(flags[i]& self.sampleflag )))

        # plot exterior sizes
        '''
    def printsizeblue(self):
        #flags=[self.membflag,self.nearexteriorflag,self.exteriorflag]
        names=['$cluster$','$near \ exterior$','$exterior$']
        outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSsfrmass/Table3.tex','w')
        outfile.write('\\begin{deluxetable*}{lcccccc} \n')
        outfile.write('\\tablecaption{Number and Size of Star-forming and Starburst Galaxies By Environment \label{samplesizes}} \n')
        outfile.write('\\tablehead{\\colhead{Category} & \\colhead{SF} &\\colhead{\\size} &\\colhead{Starburst} & \\colhead{\\size} & \\colhead{Total} & \\colhead{\\size} } \n')
        outfile.write('\startdata \n')
        flags=[self.membflag & self.blueflag2,self.nearexteriorflag & self.blueflag2,self.exteriorflag & self.blueflag2]
        names=['Cluster','Near External','External']
        for i in range(len(names)):
            tableline= '%s & %3i & %5.2f (%5.2f) $\pm$ %5.2f &  %3i & %5.2f (%5.2f) $\pm$ %5.2f & %3i & %5.2f (%5.2f) $\pm$ %5.2f \\\\ \n' %(names[i],np.sum(flags[i] & self.bluesampleflag & ~self.agnflag & ~self.starburst),
              np.mean(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag & ~self.starburst]),
              np.median(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag & ~self.starburst]),
              np.std(self.sizeratio[flags[i]& self.bluesampleflag & ~self.agnflag & ~self.starburst])/np.sqrt(np.sum(flags[i]& self.bluesampleflag &~self.starburst & ~self.agnflag)),
              np.sum(flags[i] & self.bluesampleflag & ~self.agnflag & self.starburst),
              np.mean(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag & self.starburst]),
              np.median(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag & self.starburst]),
              np.std(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag & self.starburst])/np.sqrt(np.sum(flags[i]& self.bluesampleflag & ~self.agnflag & self.starburst)),
              np.sum(flags[i] & self.bluesampleflag & ~self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag ]),
              np.median(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag ])/np.sqrt(np.sum(flags[i]& self.bluesampleflag & ~self.agnflag)))

            outfile.write(tableline)
        outfile.write('\enddata \n')
        outfile.write('\end{deluxetable*} \n')
        outfile.close()

        #flags=[self.membflag,self.nearexteriorflag,self.exteriorflag]
        names=['$cluster$','$near \ exterior$','$exterior$']
        for i in range(len(names)):
            print '%s: \n \t N_SF  = %3i, size = %5.2f (%5.2f) +/- %5.2f \n \t N_AGN = %3i, size = %5.2f (%5.2f) +/- %5.2f \n\t N_ALL = %3i, size = %5.2f (%5.2f) +/- %5.2f \n\n' %(names[i],np.sum(flags[i] & self.bluesampleflag & ~self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.bluesampleflag & ~self.agnflag]),
              np.std(self.sizeratio[flags[i]& self.bluesampleflag & ~self.agnflag])/np.sqrt(np.sum(flags[i]& self.bluesampleflag & ~self.agnflag)),
              np.sum(flags[i] & self.bluesampleflag & self.agnflag),
              np.mean(self.sizeratio[flags[i] & self.bluesampleflag & self.agnflag]),
              np.median(self.sizeratio[flags[i] & self.bluesampleflag & self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.bluesampleflag & self.agnflag])/np.sqrt(np.sum(flags[i]& self.bluesampleflag & self.agnflag)),
              np.sum(flags[i] & self.bluesampleflag),
              np.mean(self.sizeratio[flags[i] & self.sampleflag ]),
              np.median(self.sizeratio[flags[i] & self.sampleflag]),
              np.std(self.sizeratio[flags[i] & self.bluesampleflag ])/np.sqrt(np.sum(flags[i]& self.bluesampleflag )))


        plt.figure()
        plt.subplots_adjust(left=.15,bottom=.15)
        allax=[]
        #plt.subplot(2,1,1)
        x=np.arange(3)
        y=[np.mean(self.sizeratio[flags[0] & self.bluesampleflag & ~self.agnflag & ~self.starburst]),
           np.mean(self.sizeratio[flags[1] & self.bluesampleflag & ~self.agnflag & ~self.starburst]),
           np.mean(self.sizeratio[flags[2] & self.bluesampleflag & ~self.agnflag & ~self.starburst])]
        yerror=[np.std(self.sizeratio[flags[0]& self.bluesampleflag & ~self.agnflag & ~self.starburst])/np.sqrt(np.sum(flags[0]& self.bluesampleflag & ~self.agnflag & ~self.starburst)),
              np.std(self.sizeratio[flags[1]& self.bluesampleflag & ~self.agnflag & ~self.starburst])/np.sqrt(np.sum(flags[1]& self.bluesampleflag & ~self.agnflag & ~self.starburst)),
              np.std(self.sizeratio[flags[2]& self.bluesampleflag & ~self.agnflag & ~self.starburst])/np.sqrt(np.sum(flags[2]& self.bluesampleflag & ~self.agnflag & ~self.starburst))]
        errorbar(x,y,yerr=yerror,fmt='o',label='$Main \ Sequence$',markersize=12,color='k')
        allax.append(plt.gca())

        #plt.subplot(2,1,2)
        x=np.arange(3)
        y=[np.mean(self.sizeratio[flags[0] & self.bluesampleflag & ~self.agnflag & self.starburst]),
           np.mean(self.sizeratio[flags[1] & self.bluesampleflag & ~self.agnflag & self.starburst]),
           np.mean(self.sizeratio[flags[2] & self.bluesampleflag & ~self.agnflag & self.starburst])]
        yerror=[np.std(self.sizeratio[flags[0]& self.bluesampleflag & ~self.agnflag & self.starburst])/np.sqrt(np.sum(flags[0]& self.bluesampleflag & ~self.agnflag & self.starburst)),
              np.std(self.sizeratio[flags[1]& self.bluesampleflag & ~self.agnflag & self.starburst])/np.sqrt(np.sum(flags[1]& self.bluesampleflag & ~self.agnflag & self.starburst)),
              np.std(self.sizeratio[flags[2]& self.bluesampleflag & ~self.agnflag & self.starburst])/np.sqrt(np.sum(flags[2]& self.bluesampleflag & ~self.agnflag & self.starburst))]
        errorbar(x,y,yerr=yerror,fmt='^',label='$Starburst$',markersize=12,color='k')
        #allax.append(plt.gca())
        titles=['$SF \ Galaxies $','$Starburst $']
        plt.legend(loc='upper left',numpoints=1,fontsize=16)
        plt.axis([-.4,2.4,.6,1.6])
        plt.xticks(arange(3),names,fontsize=22)
        #plt.gca().set_yscale('log')
        plt.ylabel('$R_e(24)/R_e(r) $')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeenvblue.eps')
        #plt.yticks(arange(0,2,.4))
        '''
        for i in range(len(allax)):
            plt.sca(allax[i])
            axis([-.4,2.4,0.,1.6])
            plt.xticks(arange(3),names)
            plt.yticks(arange(0,2,.4))
            plt.text(.05,.8,titles[i],horizontalalignment='left',transform=allax[i].transAxes,fontsize=20)


           np.mean(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
           np.mean(self.sizeratio[flags[i] & self.sampleflag ]),
              np.median(self.sizeratio[flags[i] & self.sampleflag & ~self.agnflag]),
              
              np.sum(flags[i] & self.sampleflag & self.agnflag),

              np.median(self.sizeratio[flags[i] & self.sampleflag & self.agnflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag & self.agnflag])/np.sqrt(np.sum(flags[i]& self.sampleflag & self.agnflag)),
              np.sum(flags[i] & self.sampleflag),
              
              np.median(self.sizeratio[flags[i] & self.sampleflag]),
              np.std(self.sizeratio[flags[i] & self.sampleflag ])/np.sqrt(np.sum(flags[i]& self.sampleflag )))

        # plot exterior sizes
        '''
    def printsizepaper1(self):
        #flags=[self.membflag,self.nearexteriorflag,self.exteriorflag]
        names=['$cluster$','$near \ exterior$','$exterior$']
        ## outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSsfrmass/Table3.tex','w')
        ## outfile.write('\\begin{deluxetable*}{lcccccc} \n')
        ## outfile.write('\\tablecaption{Number and Size of Star-forming and Starburst Galaxies By Environment \label{samplesizes}} \n')
        ## outfile.write('\\tablehead{\\colhead{Category} & \\colhead{SF} &\\colhead{\\size} &\\colhead{Starburst} & \\colhead{\\size} & \\colhead{Total} & \\colhead{\\size} } \n')
        ## outfile.write('\startdata \n')
        flags=[self.membflag & self.sampleflag & ~self.agnflag,~self.membflag & self.sampleflag & ~self.agnflag]
        names=['Cluster','External']
        for i in range(len(names)):
            print '%s: \n \t N_SF  = %3i, size = %5.2f (%5.2f) +/- %5.2f \n\n' %(names[i],np.sum(flags[i]),
              np.mean(self.sizeratio[flags[i]]),
              np.median(self.sizeratio[flags[i]]),
              np.std(self.sizeratio[flags[i]])/np.sqrt(np.sum(flags[i])))



    def plotsizesample(self):
        figure(figsize=(8,6))
        subplots_adjust(left=.15,bottom=.15)
        plot(self.s.p_cs[~self.nerrorflag],self.sizeratio[~self.nerrorflag],'ko')
        plot(self.s.p_cs[self.nerrorflag],self.sizeratio[self.nerrorflag],'kx')
        plot(self.s.p_cs[self.agnflag],self.sizeratio[self.agnflag],'ro',mfc='None',mec='r',markersize=10)
        axis([-.05,1.05,1.e-4,30])
        gca().set_yscale('log')
        figure(figsize=(8,6))
        subplots_adjust(left=.15,bottom=.15)
        plot(self.ssfr[~self.nerrorflag],self.sizeratio[~self.nerrorflag],'k.')
        errorbar(self.ssfr[~self.nerrorflag],self.sizeratio[~self.nerrorflag],self.sizeratioERR[~self.nerrorflag],fmt=None,ecolor='k')
        plot(self.ssfr[self.nerrorflag],self.sizeratio[self.nerrorflag],'kx')
        plot(self.ssfr[self.agnflag],self.sizeratio[self.agnflag],'ro',mfc='None',mec='r',markersize=8)
        axhline(y=1,c='k')
        axhline(y=.7,c='k',ls='--')
        gca().set_yscale('log')
        gca().set_xscale('log')
        axis([1.e-13,1.e-8,1.e-4,30])
    def plotsizesystematics(self,showTicks=False):
        '''
        plot Re(24) vs F24, nsersic, Re(r), M*
        
        '''
        #figure(figsize=(10,8))
        #subplot(2,2,1)
        flag = self.sampleflag & ~self.agnflag #& self.dvflag
        data=np.array([log10(self.s.FLUX24[flag]),self.s.SNR_SE[flag],log10(self.s.fcre1[flag]),self.s.fcnsersic1[flag],self.s.fcmag1[flag]]).T#,log10(self.s.SFR_ZDIST[flag])])
        names=['SE \n FLUX24','SE \n SNR(24)','GALFIT \n Re','GALFIT \n N_SERSIC','GALFIT\n MODEL \n MAG']#,'SFR']
        pair(data,names,showTicks=showTicks)
        #               self.s.SERSIC_TH50[flag],self.s.SERSIC_N[flag],
        #err = zip(self.s.FLUX24ERR,self.s.fcre1err)
        #errorbar(self.s.FLUX24[flag],self.s.fcre1[flag],xerr=self.s.FLUX24ERR[flag],yerr=self.s.fcre1err[flag],fmt='ko',ecolor='k')
        #xticks(5)
        savefig(homedir+'research/LocalClusters/SamplePlots/galfitSystematics.eps')
        #flag = flag & (self.nsamag[:,4] > 14)
        data24=np.array([(self.s.fcre1[flag]*mipspixelscale),self.s.fcnsersic1[flag],self.s.fcmag1[flag]])#,log10(self.s.SFR_ZDIST[flag])])
        #datar=np.array([(self.s.SERSIC_TH50[flag]),self.s.SERSIC_N[flag],self.nsamag[:,4][flag]])#,log10(self.s.SFR_ZDIST[flag])])
        # switching to GIM2D data
        datar=np.array([(self.gim2d.Rhlr[flag]/self.DA[flag]),self.s.ng[flag],self.nsamag[:,4][flag]])#,log10(self.s.SFR_ZDIST[flag])])
        comparedata(data24.T,datar.T,rlabels=['$R_e(24)$','$N_{SERS}(24)$','$MAG(24)$'],clabels=['$R_e(r)$','$N_{SERS}(r)$','$MAG(r)$'],showTicks=showTicks)
        savefig(homedir+'research/LocalClusters/SamplePlots/galfitvsNSA.eps')
    def plotRisovsRisoE0(self):
        figure(figsize=(10,7))
        plot(self.s.SERSIC_BA[self.isosampleflag],self.isorad.MIPS[self.isosampleflag]-self.isorad.MIPSE0[self.isosampleflag],'ko')
        scale=sqrt(1-self.s.SERSIC_BA[self.isosampleflag]**2)
        #scale=self.s.SERSIC_BA[self.isosampleflag]
        plot(self.s.SERSIC_BA[self.isosampleflag],self.isorad.MIPS[self.isosampleflag]-self.isorad.MIPSE0[self.isosampleflag]/scale,'bo')
        #plot(self.isorad.MIPS[self.isosampleflag],self.isorad.MIPSE0[self.isosampleflag]/self.s.SERSIC_BA[self.isosampleflag],'ro')
        #xl=arange(70)
        #plot(xl,xl,'k--')
        #axis([0,150,0,150])

    def plotRehist(self):
        figure(figsize=(10,7))
        subplots_adjust(bottom=.15)
        mybins=arange(0,20.5,.5)
        hist(self.s.SERSIC_TH50[~self.agnflag],bins=mybins,histtype='step',color='k', label='All Spirals')
        #hist(self.s.SERSIC_TH50[~self.agnflag & self.sbflag],bins=mybins,histtype='step',color='k', hatch='//',label='SB Cut')

        #hist(self.s.SERSIC_TH50[self.sampleflag],bins=mybins,histtype='step')
        hist(self.s.SERSIC_TH50[self.sampleflag & self.sbflag],bins=mybins,histtype='stepfilled',color='0.8', label='Final Sample')
        axvline(x=mipspixelscale,ls=':',color='k')
        xlabel('$ R_e(NSA) \ (arcsec) $',fontsize=20)
        ylabel('$ N_{galaxy}$',fontsize=20)
        legend(loc='upper right')
        savefig(homedir+'research/LocalClusters/SamplePlots/Rehist.eps')
        savefig(homedir+'research/LocalClusters/SamplePlots/Rehist.png')

    def plotf24hist(self):
        figure(figsize=(9,7))
        subplots_adjust(bottom=.15)
        mybins=arange(-2,3,.25)
        hist(log10(self.s.FLUX24[self.sampleflag & ~self.agnflag])-3.,bins=mybins,histtype='step',color='0.4', label='GALFIT Sample',hatch='\\',lw=2)
        hist(log10(self.s.FLUX24[self.isosampleflag & ~self.agnflag])-3.,bins=mybins,histtype='step',color='k', label='Ellipse Sample',lw=2)
        #hist(self.s.SERSIC_TH50[~self.agnflag & self.sbflag],bins=mybins,histtype='step',color='k', hatch='//',label='SB Cut')

        #hist(self.s.SERSIC_TH50[self.sampleflag],bins=mybins,histtype='step')

        #axvline(x=mipspixelscale,ls=':',color='k')
        xlabel('$ log_{10}(F_{24} \ (mJy)) $',fontsize=28)
        ylabel('$ N_{galaxy}$',fontsize=28)
        legend(loc='upper right')
        axis([-1.8,2.8,0,32])
        gca().tick_params(axis='both', which='major', labelsize=16)
        savefig(homedir+'research/LocalClusters/SamplePlots/f24hist.eps')
        savefig(homedir+'research/LocalClusters/SamplePlots/f24hist.png')
    def plotLIRhist(self):
        figure(figsize=(9,7))
        subplots_adjust(bottom=.15)
        mybins=arange(6.5,12.5,.25)
        hist(log10(self.s.LIR_ZDIST[self.sampleflag & ~self.agnflag]),bins=mybins,histtype='step',color='0.4', label='GALFIT Sample',hatch='\\',lw=2)
        hist(log10(self.s.LIR_ZDIST[self.isosampleflag & ~self.agnflag]),bins=mybins,histtype='step',color='k', label='Ellipse Sample',lw=2)
        #hist(self.s.SERSIC_TH50[~self.agnflag & self.sbflag],bins=mybins,histtype='step',color='k', hatch='//',label='SB Cut')

        #hist(self.s.SERSIC_TH50[self.sampleflag],bins=mybins,histtype='step')

        #axvline(x=mipspixelscale,ls=':',color='k')
        xlabel('$ log_{10}(L_{IR}/L_\odot) $',fontsize=28)
        ylabel('$ N_{galaxy}$',fontsize=28)
        legend(loc='upper right')
        axis([6.8,11.8,0,30])
        gca().tick_params(axis='both', which='major', labelsize=16)
        savefig(homedir+'research/LocalClusters/SamplePlots/LIRhist.eps')
        savefig(homedir+'research/LocalClusters/SamplePlots/LIRhist.png')
        
    def plotsizedvdr(self,plotsingle=1,reonly=1,onlycoma=0,plotHI=0,plotbadfits=0,lowmass=0,himass=0,cluster=None,plothexbin=True,hexbinmax=40,scalepoint=0,clustername=None,blueflag=False,plotmembcut=True,colormin=.2,colormax=1,colorbydensity=False,plotoman=False,masscut=None,BTcut=None):
        # log10(chabrier) = log10(Salpeter) - .25 (SFR estimate)
        # log10(chabrier) = log10(diet Salpeter) - 0.1 (Stellar mass estimates)

        if plotsingle:
            figure(figsize=(10,6))
            ax=gca()
            subplots_adjust(left=.1,bottom=.15,top=.9,right=.9)
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([1.e9,1.e12,5.e-14,5.e-10])
            #axis([9,12,-14.5,-10.5])
            ylabel('$ \Delta v/\sigma $',fontsize=26)
            xlabel('$ \Delta R/R_{200}  $',fontsize=26)
            legend(loc='upper left',numpoints=1)

        colors=self.sizeratio
        if colorbydensity:
            colors=np.log10(self.s.SIGMA_5)
            colormin=-1.5
            colormax=1.5
        cbticks=arange(colormin,colormax+.1,.1)
        if USE_DISK_ONLY:
            clabel=['$R_{24}/R_d$','$R_{iso}(24)/R_{iso}(r)$']
        else:
            clabel=['$R_e(24)/R_e(r)$','$R_{iso}(24)/R_{iso}(r)$']
        cmaps=['jet_r','jet_r']

        v1=[0.2,0.]
        v2=[1.2,2]
        nplot=1
        
        x=(self.s.DR_R200)
        y=abs(self.dv)
        flag=self.sampleflag #& self.dvflag
        if blueflag:
            flag=self.bluesampleflag & self.dvflag
        if clustername != None:
            flag = flag & (self.s.CLUSTER == clustername)
        #flag=self.limitedsample & self.dvflag
        if masscut != None:
            flag = flag & (self.logstellarmass < masscut)
        if BTcut != None:
            flag = flag & (self.gim2d.B_T_r < 0.3)
        if cluster != None:
            flag = flag & (self.s.CLUSTER == cluster)
        hexflag=self.dvflag
        if cluster != None:
            hexflag = hexflag & (self.s.CLUSTER == cluster)
        nofitflag = self.sfsampleflag & ~self.sampleflag & self.dvflag
        nofitflag = self.gim2dflag & (self.gim2d.B_T_r < .2) & self.sfsampleflag & ~self.sampleflag & self.dvflag 
        if cluster != None:
            nofitflag = nofitflag & (self.s.CLUSTER == cluster)
        if lowmass:
            flag = flag & (self.s.CLUSTER_LX < 1.)
            hexflag = hexflag & (self.s.CLUSTER_LX < 1.)
            nofitflag = nofitflag & (self.s.CLUSTER_LX < 1.)
        if himass:
            flag = flag & (self.s.CLUSTER_LX > 1.)
            hexflag = hexflag & (self.s.CLUSTER_LX > 1.)
            nofitflag = nofitflag & (self.s.CLUSTER_LX > 1.)
        if onlycoma:
            flag = flag & (self.s.CLUSTER == 'Coma')
        if plothexbin:
            sp=hexbin(x[hexflag],y[hexflag],gridsize=(30,20),alpha=.7,extent=(0,5,0,10),cmap='gray_r',vmin=0,vmax=hexbinmax)#,C=colors[flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=5,alpha=0.5,extent=(0,3.,0,2))        
        #flags=[self.sampleflag  & self.dvflag ,self.sampleflag & self.agnflag]
        subplots_adjust(bottom=.15,left=.1,right=.95,top=.95,hspace=.02,wspace=.02)
        #xl=np.array([1.4,.35])
        #yl=np.array([3.0,1.2])
        #plt.plot(xl,yl,'k--',lw=2)
        if plotmembcut:
            xl=np.array([-.2,1,1])
            yl=np.array([3,3,-0.1])
            plt.plot(xl,yl,'k-',lw=2)
        elif plotoman: # line to identify infall galaxies from Oman+2013
            xl=np.arange(0,2,.1)
            plt.plot(xl,-4./3.*xl+2,'k-',lw=3)
            #plt.plot(xl,-3./1.2*xl+3,'k-',lw=3)       
        else: # cut from Jaffe+2011
            xl=np.array([0.01,1.2])
            yl=np.array([1.5,0])
            plt.plot(xl,yl,'k-',lw=2)

        if reonly:
            nplot=1
        else:
            nplot=2
        if scalepoint:
            size=(self.ssfrms[flag]+2)*40
        else:
            size=60
        for i in range(nplot):
            if not(reonly):
                subplot(1,2,nplot)
            nplot +=1
            if plotbadfits:
                scatter(x[nofitflag],y[nofitflag],marker='x',color='k',s=40)#markersize=8,mec='r',mfc='None',label='No Fit')

            ax=gca()
            #flag=flags[i]
            #sp=hexbin(x[flag],y[flag],C=colors[flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=5,alpha=0.5,extent=(0,3.,0,2))
            if colorbydensity:
                sp=scatter(x[flag],y[flag],c=colors[flag],s=size,cmap=cm.jet,vmin=colormin,vmax=colormax,edgecolors=None,lw=0.)
            else:
                sp=scatter(x[flag],y[flag],c=colors[flag],s=size,cmap=cm.jet_r,vmin=colormin,vmax=colormax,edgecolors=None,lw=0.)
            #sp=scatter(x[flag],y[flag],c=colors[flag],s=size,cmap=cm.jet_r,vmin=colormin,vmax=colormax)
            #print len(x[flag])
            #flag2=self.spiralflag & ~self.sampleflag & self.dvflag & ~self.agnflag
            #plot(x[flag2],y[flag2],'ko',color='0.5')
            #flag2=flag & self.truncflag
            #scatter(x[flag2],y[flag2]-x[flag2],c=colors[i][flag2],marker='*',s=120)
            #scatter(x[self.sampleflag],y[self.outertruncflag]-x[self.outertruncflag],c=colors[i][self.outertruncflag],marker='*',s=120)
            #axhline(y=0,ls='-',color='k')
            axis([-.1,4.5,-.1,5])
            if masscut != None:
                axis([-.1,4.5,-.1,4])
            if i > 0:
                ax.set_yticklabels(([]))
            ax.tick_params(axis='both', which='major', labelsize=16)
            #ax.set_xscale('log')
            #axins1 = inset_axes(ax,
            #        width="5%", # width = 10% of parent_bbox width
            #        height="50%", # height : 50%
            #        bbox_to_anchor=(.9,0.05,1,1),
            #        bbox_transform=ax.transAxes,
            #        borderpad=0,
            #        loc=3)
            if plotsingle:
                cb=colorbar(sp,fraction=0.08,label=clabel[i],ticks=cbticks)#cax=axins1,ticks=cbticks[i])
                #text(.95,.9,clabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=20)
            if plotHI:
                f=flag & self.HIflag
                plt.plot(x[f],y[f],'bs',mfc='None',mec='b',lw=2,markersize=20)

        if not(reonly):
            ax.text(0,-.1,'$ \Delta R/R_{200} $',fontsize=22,transform=ax.transAxes,horizontalalignment='center')
            ax.text(-1.3,.5,'$\Delta v/\sigma_v $',fontsize=22,transform=ax.transAxes,rotation=90,verticalalignment='center')

        if lowmass:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr-lowLx'
        elif himass:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr-hiLx'
        else:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr'
        if plotsingle:
            if masscut != None:
                plt.savefig(figuredir+'sizedvdr-lowmass-lowBT.eps')
            savefig(figname+'.png')
            savefig(figname+'.eps')
            plt.savefig(figuredir+'fig4.pdf')

    def plotsizedvdrcombined(self,plotsingle=1,reonly=1,onlycoma=0,plotHI=0,plotbadfits=1,lowmass=0,himass=0,cluster=None,plothexbin=False,hexbinmax=10,scalepoint=0):
        # log10(chabrier) = log10(Salpeter) - .25 (SFR estimate)
        # log10(chabrier) = log10(diet Salpeter) - 0.1 (Stellar mass estimates)

        if plotsingle:
            figure(figsize=(10,6))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([1.e9,1.e12,5.e-14,5.e-10])
            #axis([9,12,-14.5,-10.5])
            ylabel('$ \Delta v/\sigma $',fontsize=26)
            xlabel('$ \Delta R/R_{200}  $',fontsize=26)
            legend(loc='upper left',numpoints=1)

        colors=self.sizeratio
        cbticks=[arange(.2,1.3,.4),arange(0,2.2,.5)]
        clabel=['$R_e(24)/R_e(r)$','$R_{iso}(24)/R_{iso}(r)$']
        cmaps=['jet_r','jet_r']

        v1=[0.2,0.]
        v2=[1.2,2]
        nplot=1
        
        x=(self.s.DR_R200)
        y=self.dv
        flag=self.sampleflag & self.dvflag
        if cluster != None:
            flag = flag & (self.s.CLUSTER == cluster)
        hexflag=self.dvflag
        if cluster != None:
            hexflag = hexflag & (self.s.CLUSTER == cluster)
        nofitflag = self.sfsampleflag & ~self.sampleflag & self.dvflag
        if cluster != None:
            nofitflag = nofitflag & (self.s.CLUSTER == cluster)
        if lowmass:
            flag = flag & (self.s.CLUSTER_LX < 1.)
            hexflag = hexflag & (self.s.CLUSTER_LX < 1.)
            nofitflag = nofitflag & (self.s.CLUSTER_LX < 1.)
        if himass:
            flag = flag & (self.s.CLUSTER_LX > 1.)
            hexflag = hexflag & (self.s.CLUSTER_LX > 1.)
            nofitflag = nofitflag & (self.s.CLUSTER_LX > 1.)
        if onlycoma:
            flag = flag & (self.s.CLUSTER == 'Coma')
        if plothexbin:
            sp=hexbin(x[hexflag],y[hexflag],gridsize=(24,8),alpha=.5,extent=(0,4,0,3),cmap='gray_r',vmin=0,vmax=hexbinmax)#,C=colors[flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=5,alpha=0.5,extent=(0,3.,0,2))        
        #flags=[self.sampleflag  & self.dvflag ,self.sampleflag & self.agnflag]
        subplots_adjust(bottom=.15,left=.15,right=.95,top=.95,hspace=.02,wspace=.02)
        xl=np.array([1.4,.35])
        yl=np.array([3.0,1.2])
        plt.plot(xl,yl,'k--',lw=2)
        xl=np.array([0.01,1.2])
        yl=np.array([1.5,0])
        plt.plot(xl,yl,'k-',lw=2)

        if reonly:
            nplot=1
        else:
            nplot=2
        if scalepoint:
            size=(self.ssfrms[flag]+2)*40
        else:
            size=60
        for i in range(nplot):
            if not(reonly):
                subplot(1,2,nplot)
            nplot +=1
            ax=gca()
            #flag=flags[i]
            #sp=hexbin(x[flag],y[flag],C=colors[flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=5,alpha=0.5,extent=(0,3.,0,2))
            sp=scatter(x[flag],y[flag],c=colors[flag],s=size,cmap=cm.jet_r,vmin=0.1,vmax=1)
            #flag2=self.spiralflag & ~self.sampleflag & self.dvflag & ~self.agnflag
            #plot(x[flag2],y[flag2],'ko',color='0.5')
            #flag2=flag & self.truncflag
            #scatter(x[flag2],y[flag2]-x[flag2],c=colors[i][flag2],marker='*',s=120)
            #scatter(x[self.sampleflag],y[self.outertruncflag]-x[self.outertruncflag],c=colors[i][self.outertruncflag],marker='*',s=120)
            #axhline(y=0,ls='-',color='k')
            axis([-.1,4.2,-.1,3])
            if i > 0:
                ax.set_yticklabels(([]))
            ax.tick_params(axis='both', which='major', labelsize=16)
            #ax.set_xscale('log')
            #axins1 = inset_axes(ax,
            #        width="5%", # width = 10% of parent_bbox width
            #        height="50%", # height : 50%
            #        bbox_to_anchor=(.9,0.05,1,1),
            #        bbox_transform=ax.transAxes,
            #        borderpad=0,
            #        loc=3)
            if plotsingle:
                cb=colorbar(sp,fraction=0.08)#cax=axins1,ticks=cbticks[i])
                text(.95,.9,clabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=20)
            if plotHI:
                f=flag & self.HIflag
                plt.plot(x[f],y[f],'bs',mfc='None',mec='b',lw=2,markersize=20)
            if plotbadfits:
                plot(x[nofitflag],y[nofitflag],'rx',markersize=8,mec='r',mfc='None',label='No Fit')

        if not(reonly):
            ax.text(0,-.1,'$ \Delta R/R_{200} $',fontsize=22,transform=ax.transAxes,horizontalalignment='center')
            ax.text(-1.3,.5,'$\Delta v/\sigma_v $',fontsize=22,transform=ax.transAxes,rotation=90,verticalalignment='center')

        if lowmass:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr-lowLx'
        elif himass:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr-hiLx'
        else:
            figname=homedir+'research/LocalClusters/SamplePlots/sizedvdr'
        if plotsingle:
            savefig(figname+'.png')
            savefig(figname+'.eps')
    def plotSFRvsStellarmassPaper(self,plotsingle=1,zoom=0,onepanel=0,farexterior=0):
        figure(figsize=plotsize_single)
        plt.subplots_adjust(left=.17,bottom=.2)
        flag=self.mipsflag & self.agnflag
        plt.plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'ko',markersize=3,label='AGN',mfc='None')
        flag=self.mipsflag & ~self.agnflag
        plt.plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'k*',c='0.6',markersize=7,label='SF',mfc='None')
        #plt.hexbin(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],cmap='gray_r')
        #flag=self.sfsampleflag & self.agnflag
        #plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'kx', c='k',markersize=8,label='AGN(Sample)',mfc='None',mec='k')
        #flag=self.sfsampleflag & ~self.agnflag
        #plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'k^',color='k',markersize=8,label='SF(Sample)')
        plt.axis([7.8,12,.008,20])
        xe=np.arange(8.5,11.5,.1)
        xe=10.**xe
        ye=(.08e-9)*xe
        plt.plot(log10(xe),(ye),'k-',lw=2,label='Elbaz+2011')
        plt.gca().set_yscale('log')
        plt.axvline(x=9.3,c='k',ls='--')
        plt.axhline(y=.086,c='k',ls='--')
        #colorbar(sp,fraction=.08)
        plt.axis([7.9,12,1.e-3,25])
        plt.xlabel(r'$ M_* \ (M_\odot/yr) $')
        plt.ylabel('$ SFR \ (M_\odot/yr) $')
        plt.legend(loc='upper left',numpoints=1,scatterpoints=1)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmassPaper.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmassPaper.eps')

    def plotSFRvsStellarmassPaper2(self,plotsingle=1,zoom=0,onepanel=0,farexterior=0):
        figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2, hspace=.05)
        axes=[]
        plt.subplot(1,2,1)
        flag=self.mipsflag & ~self.agnflag
        plt.plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'ko',markersize=3,label='SF',mfc='None')
        flag=self.mipsflag & self.unknownagn
        plt.plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'ks',markersize=5,label='AGN?')

        plt.ylabel('$ SFR \ (M_\odot/yr) $')
        plt.title('$ SF \ Galaxies $',fontsize=20)
        axes.append(plt.gca())

        plt.subplot(1,2,2)
        flag=self.mipsflag & self.agnflag
        plt.plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'ko',markersize=3,label='AGN',mfc='None')
        plt.yticks([])
        plt.title('$ AGN $',fontsize=20)
        axes.append(plt.gca())
        for a in axes:
            plt.sca(a)
            plt.axis([7.8,11.75,.008,20])
            xe=np.arange(8.5,11.5,.1)
            xe=10.**xe
            ye=(.08e-9)*xe
            plt.plot(log10(xe),(ye),'k-',lw=2,label='Elbaz+2011')
            plt.plot(log10(xe),(ye/50.),'k:',lw=1,label='MS/50')
            plt.gca().set_yscale('log')
            plt.axvline(x=9.3,c='k',ls='--')
            plt.axhline(y=.086,c='k',ls='--')
            plt.axis([7.9,12,1.e-3,25])
            plt.xlabel(r'$ log_{10}(M_* \ (M_\odot/yr)) $')

            plt.legend(loc='upper left',numpoints=1,scatterpoints=1)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmassPaper.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmassPaper.eps')

    def plotsizeBT(self,scalepoint=0,blueflag=False):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        if blueflag:
            flag1=self.blueflag2
            flag2=self.bluesampleflag
        else:
            flag1=self.sfsampleflag
            flag2=self.sampleflag
        x_flags=[flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & self.agnflag & ~self.membflag & self.dvflag  & self.gim2dflag]
                 
        point_flags=[flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag & self.dvflag & self.gim2dflag,
                     flag2 & self.agnflag & ~self.membflag & self.dvflag & self.gim2dflag]

        bothax=[]
        x=self.gim2d.B_T_r
        y=self.sizeratio
        limits=[-.1,1.,.01,1.5]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=60
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')

            plt.axis(limits)
            a=plt.gca()
            rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
            ax=plt.gca()
            plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=a.transAxes,fontsize=18)
            plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=a.transAxes,fontsize=18)


            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$B/T$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBT.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBT.eps')
    def plotsizeBTblue(self,scalepoint=0,blueflag=False,medianflag=False,diskonly=False):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        if blueflag:
            flag1=self.blueflag2
            flag2=self.bluesampleflag
        else:
            flag1=self.sfsampleflag
            flag2=self.sampleflag
        x_flags=[flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag   & self.gim2dflag]
                 
        point_flags=[flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag]

        bothax=[]
        x=self.gim2d.B_T_r
        if diskonly:
            y=self.SIZE_RATIO_DISK
            yerror=self.SIZE_RATIO_DISK_ERR
        else:
            y=self.sizeratio
            yerror=self.sizeratioERR

        highmassexterior=mean(y[point_flags[2] & (self.logstellarmass>10.2)])
        highmassexteriorerr=std(y[point_flags[2] & (self.logstellarmass>10.2)])/sqrt(sum(point_flags[2] & (self.logstellarmass>10.2)))
        if USE_DISK_ONLY:
            limits=[-.1,.89,-.1,3.2]
        else:
            limits=[-.1,.89,-.1,1.5]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=100
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            if (i == 0) | (i == 2):
                plt.errorbar(x[point_flags[i]],y[point_flags[i]],yerr=yerror[point_flags[i]],fmt=None,ecolor='k')
                sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')
                print x[point_flags[i]],y[point_flags[i]],yerror[point_flags[i]]
                (rho,p)=spearman_with_errors(x[point_flags[i]],y[point_flags[i]],yerror[point_flags[i]])
              
                ax=plt.gca()

                plt.text(.95,.9,r'$\rho = [%4.2f, %4.2f]$'%(np.percentile(rho,16),np.percentile(rho,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                plt.text(.95,.8,'$p = [%5.4f, %5.4f]$'%(np.percentile(p,16),np.percentile(p,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)

                #rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
                #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
                #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
            if (i == 1) | (i == 3):

                #xbin,sbin,sbinerr=my.binitbins(0.,.6,5,x[point_flags[i-1]],s.logstellarmass[point_flags[i-1]])
                if medianflag:
                    xbin,ybin,ybinerr=my.binitbinsmedian(0.,.6,5,x[point_flags[i-1]],y[point_flags[i-1]])
                    xbin,sbin,sbinerr=my.binitbinsmedian(0.,.6,5,x[point_flags[i-1]],s.logstellarmass[point_flags[i-1]])
                else:
                    xbin,ybin,ybinerr=my.binitbins_weighted(0.,.6,5,x[point_flags[i-1]],y[point_flags[i-1]],yerror[point_flags[i-1]],medianflag=medianflag)
                    xbin,sbin,sbinerr=my.binitbinsmedian(0.,.6,5,x[point_flags[i-1]],s.logstellarmass[point_flags[i-1]])

                #xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                #xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet',vmin=mstarmin,vmax=mstarmax,marker='s')
            if (i == 1):
                c=np.polyfit(xbin[xbin<.5],ybin[xbin<.5],1)#,w=1./ybinerr)
                #c=polyfit(x,y,1,w=1./yerror)
                
                print 'best-fit coefficients for cluster = ',c
                xl=arange(0,.5,.01)
                yl=np.polyval(c,xl)
                #print xbin
                #print ybin
                
                #print c
                #print xl
                #print yl
                plot(xl,yl,'k--')
                plt.text(0.1,0.9,'$Core$',transform=gca().transAxes,horizontalalignment='left',fontsize=20)
            if (i == 3):
                plot(xl,yl,'k--')
                #plot(xl,yl+.12,'b:')
                c=polyfit(xbin[xbin<.5],ybin[xbin<.5],1)
                print 'best-fit coefficients for exterior = ',c

                text(0.1,0.9,'$External$',transform=gca().transAxes,horizontalalignment='left',fontsize=20)
                #print xbin,ybin,sbin
                #axhline(y=highmassexterior,color='k',ls='-')
                #axhline(y=highmassexterior+highmassexteriorerr,color='k',ls='--')
                #axhline(y=highmassexterior-highmassexteriorerr,color='k',ls='--')


            a=plt.gca()
            plt.axis(limits)
            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))

                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                if medianflag:
                    plt.title('$Median $',fontsize=22)
                else: 
                    plt.title('$Weighted \ Mean $',fontsize=22)                   
            if i == 2:
                #text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$B/T$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTblue.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTblue.eps')
    def plotsize3panel(self,logyscale=False,use_median=True,equal_pop_bins=True):
        figure(figsize=(10,10))
        subplots_adjust(left=.12,bottom=.1,top=.9,wspace=.02,hspace=.4)


        nrow=3
        ncol=3        
        flags=[self.sampleflag, self.sampleflag & self.membflag, self.sampleflag & ~self.membflag]
        flags = flags & (self.s.SIGMA_5 > 0.)

        x=[self.gim2d.B_T_r,np.log10(self.s.SIGMA_5),self.logstellarmass]
        xlabels=['$B/T$','$\log_{10}(\Sigma_5 \ (gal/Mpc^2))$','$\log_{10}(M_\star/M_\odot)$']
        colors=[self.logstellarmass,self.gim2d.B_T_r,self.gim2d.B_T_r]
        cblabel=['$\log(M_\star/M_\odot)$','$B/T$','$B/T$']
        cbticks=[np.arange(8.5,10.8,.4),np.arange(0,1,.2),np.arange(0,1,.2)]
        xticklabels=[np.arange(0,1,.2),np.arange(-1.2,2.2,1),np.arange(8.5,11.5,1)]
        xlims=[(-.05,.9),(-1.1,1.9),(8.3,11.2)]
        v1 = [8.5,0,0]
        v2 = [10.8,0.6,0.6]
        y=self.sizeratio
        yerror=self.sizeratioERR
        

        for i in range(len(x)):
            allax=[]
           
            for j in range(3):
                plt.subplot(nrow,ncol,3.*i+j+1)
                plt.errorbar(x[i][flags[j]],y[flags[j]],yerr=yerror[flags[j]],fmt=None,ecolor='.5',markerfacecolor='white',zorder=1,alpha=.5)
                sp=plt.scatter(x[i][flags[j]],y[flags[j]],c=colors[i][flags[j]],vmin=v1[i],vmax=v2[i],cmap='jet',s=40,label='GALFIT',lw=0,alpha=0.7,zorder=1)
                if j < 3:
                    (rho,p)=spearman_with_errors(x[i][flags[j]],y[flags[j]],yerror[flags[j]])
                    ax=plt.gca()
                    plt.text(.95,.9,r'$\rho = [%4.2f, %4.2f]$'%(np.percentile(rho,16),np.percentile(rho,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                    plt.text(.95,.8,'$p = [%5.4f, %5.4f]$'%(np.percentile(p,16),np.percentile(p,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                a=plt.gca()
                #plt.axis(limits)
                allax.append(a)
                if j > 0:
                    a.set_yticklabels(([]))
                if i == 0:
                    if j == 0:
                        plt.title('$All $',fontsize=24)
                    elif j == 1:
                        plt.title('$Core$',fontsize=24)
                        
                    elif j == 2:
                        plt.title('$External$',fontsize=24)
                if j == 1:
                    plt.xlabel(xlabels[i])
                if j == 0:
                    #plt.ylabel('$R_e(24)/Re(r)$')
                    plt.ylabel('$R_{24}/R_d$')
                xbin,ybin,ybinerr, colorbin = binxycolor(x[i][flags[j]],y[flags[j]],colors[i][flags[j]],nbin=5,erry=True,equal_pop_bins=equal_pop_bins,use_median = use_median)
                plt.scatter(xbin,ybin,c=colorbin,s=180,vmin=v1[i],vmax=v2[i],cmap='jet',zorder=5,lw=2,edgecolors='k')
                plt.errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='k',alpha=0.7)
                if logyscale:
                    a.set_yscale('log')
                    ylim(.08,6)
                else:
                    ylim(-.1,3.3)
                    yticks((np.arange(0,4,1)))
                xticks(xticklabels[i])
                xlim(xlims[i])
                #ylim(-.1,2.8)
                if j == 2:
                    c = np.polyfit(xbin,ybin,1)
                    print 'xbin = ', xbin
                    print 'ybin = ', ybin
                    #c = np.polyfit(x[i][flags[j]],y[flags[j]],1)
                    xl=np.linspace(min(x[i][flags[j]]),max(x[i][flags[j]]),10)
                    yl = np.polyval(c,xl)
                    plt.plot(xl,yl,'k--',lw=2)
                    plt.subplot(nrow,ncol,3.*i+j)
                    xl=np.linspace(min(x[i][flags[j-1]]),max(x[i][flags[j-1]]),10)
                    yl = np.polyval(c,xl)
                    plt.plot(xl,yl,'k--',lw=2)
                    #print xbin,ybin,colorbin
                

        
            #if i == 2:
            #    #text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
            #    text(-2.3,1.7,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=26)


            c=colorbar(ax=allax,fraction=.02,ticks=cbticks[i])
            c.ax.text(6,.5,cblabel[i],rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/size3panel.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/size3panel.eps')
        #savefig(figuredir+'fig12.eps')
        savefig(figuredir+'fig12.pdf')
    def plotNUVrsize(self):
        plt.figure(figsize=(10,4))
        plt.subplots_adjust(left=.1,wspace=.01,bottom=.2,right=.9)

        BTmin = 0
        BTmax = 0.4
        flags = [self.sampleflag, self.sampleflag & self.membflag,self.sampleflag & ~self.membflag]
        labels = ['$All$','$Core$','$External$']
        allax=[]
        for i in range(3):
            plt.subplot(1,3,i+1)
            plt.scatter(self.sizeratio[flags[i]],self.NUVr[flags[i]],c=self.gim2d.B_T_r[flags[i]],s=60,cmap='jet',vmin=BTmin,vmax=BTmax)
            

            if i == 0:
                plt.ylabel('$NUV-r$',fontsize=24)
            else:
                plt.gca().set_yticklabels(([]))
            text(0.98,0.9,labels[i],transform=gca().transAxes,horizontalalignment='right',fontsize=20)
            (rho,p)=spearman_with_errors(self.NUVr[flags[i]],self.sizeratio[flags[i]],self.sizeratioERR[flags[i]])
              
            ax=plt.gca()
    
            plt.text(.05,.08,r'$\rho = [%4.2f, %4.2f]$'%(np.percentile(rho,16),np.percentile(rho,84)),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
            plt.text(.05,.03,'$p = [%5.4f, %5.4f]$'%(np.percentile(p,16),np.percentile(p,84)),horizontalalignment='left',transform=ax.transAxes,fontsize=14)

            plt.axhline(y=4,ls='-',color='0.5')
            plt.axhline(y=4.5,ls='--',color='0.5')
            plt.axhline(y=3.5,ls='--',color='0.5')
            allax.append(plt.gca())
            plt.xticks(np.arange(0,4))
            plt.axis([-0.3,3.1,0,6.2])
        
        colorlabel='$B/T$'
        c=plt.colorbar(ax=allax,fraction=.02,ticks = np.arange(0,.5,.1))
        c.ax.text(3.5,.5,colorlabel,rotation=-90,verticalalignment='center',fontsize=20)
        plt.text(-.51,-.2,'$R_{24}/R_d $',transform=plt.gca().transAxes,fontsize=24,horizontalalignment='center')
        outfile=homedir+'research/LocalClusters/SamplePlots/NUVrsize'
        plt.savefig(outfile+'.png')
        plt.savefig(outfile+'.eps')
        plt.savefig(figuredir+'fig17.eps')
        
    def plotsizeNUVrblue(self,scalepoint=0,blueflag=False,medianflag=False,diskonly=False):
        plt.figure(figsize=(10,8))
        plt.subplots_adjust(left=.1,bottom=.2,wspace=.02,hspace=.02)
        if blueflag:
            flag1=self.blueflag2
            flag2=self.bluesampleflag
        else:
            flag1=self.sfsampleflag
            flag2=self.sampleflag
        x_flags=[flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag   & self.gim2dflag]
                 
        point_flags=[flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag]

        bothax=[]
        x=self.NUVr
        color = self.gim2d.B_T_r
        colormin = 0
        colormax = .6
        colorlabel = '$B/T$'
        if diskonly:
            y=self.SIZE_RATIO_DISK
            yerror=self.SIZE_RATIO_DISK_ERR
        else:
            y=self.sizeratio
            yerror=self.sizeratioERR

        if USE_DISK_ONLY:
            limits=[0,6,0,2.1]
        else:
            limits=[1.2,4.2,1,.01,1.5]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=100
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            if (i == 0) | (i == 2):
                plt.errorbar(x[point_flags[i]],y[point_flags[i]],yerr=yerror[point_flags[i]],fmt=None,ecolor='k')
                sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=color[point_flags[i]],vmin=colormin,vmax=colormax,cmap='jet',s=size,label='GALFIT')
                #print x[point_flags[i]],y[point_flags[i]],yerror[point_flags[i]]
                (rho,p)=spearman_with_errors(x[point_flags[i]],y[point_flags[i]],yerror[point_flags[i]])
              
                ax=plt.gca()

                plt.text(.95,.9,r'$\rho = [%4.2f, %4.2f]$'%(np.percentile(rho,16),np.percentile(rho,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                plt.text(.95,.8,'$p = [%5.4f, %5.4f]$'%(np.percentile(p,16),np.percentile(p,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)

                #rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
                #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
                #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
            if (i == 1) | (i == 3):
                xbin,ybin,ybinerr=my.binitbins_weighted(1.,5.,5,x[point_flags[i-1]],y[point_flags[i-1]],yerror[point_flags[i-1]],medianflag=medianflag)
                xbin,sbin,sbinerr=my.binitbins(1.,5.,5,x[point_flags[i-1]],color[point_flags[i-1]])
                #xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                #xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet',vmin=colormin,vmax=colormax,marker='s')
            if (i == 1):
                c=np.polyfit(xbin,ybin,1)#,w=1./ybinerr)
                #c=polyfit(x,y,1,w=1./yerror)
                
                print 'best-fit coefficients for cluster = ',c
                xl=arange(1.5,3.5,.01)
                yl=np.polyval(c,xl)
                #print xbin
                #print ybin
                
                #print c
                #print xl
                #print yl
                plot(xl,yl,'k--')
                plt.text(0.1,0.9,'$Core$',transform=gca().transAxes,horizontalalignment='left',fontsize=20)
            if (i == 3):
                plot(xl,yl,'k--')
                #plot(xl,yl+.12,'b:')
                c=polyfit(xbin,ybin,1)
                print 'best-fit coefficients for exterior = ',c

                text(0.1,0.9,'$External$',transform=gca().transAxes,horizontalalignment='left',fontsize=20)
            a=plt.gca()
            plt.axis(limits)
            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))

                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                if medianflag:
                    plt.title('$Median $',fontsize=22)
                else: 
                    plt.title('$Weighted \ Mean $',fontsize=22)                   
            if i == 2:
                #text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$NUV - r$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05,ticks = arange(colormin,colormax+.1,.1))
        c.ax.text(2.4,.5,colorlabel,rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizeNUVrblue.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizeNUVrblue.eps')
    def plotsizestellarmassblue(self,scalepoint=0,blueflag=False,medianflag=False):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        if blueflag:
            flag1=self.blueflag2
            flag2=self.bluesampleflag
        else:
            flag1=self.sfsampleflag
            flag2=self.sampleflag
        x_flags=[flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                 flag1 &  ~self.sampleflag & ~self.agnflag & ~self.membflag   & self.gim2dflag]
                 
        point_flags=[flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & self.membflag & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag,
                     flag2 & ~self.agnflag & ~self.membflag  & self.gim2dflag]

        bothax=[]
        x=self.logstellarmass
        y=self.sizeratio
        yerror=self.sizeratioERR
        pcolor=self.gim2d.B_T_r
        BTmax=0.6
        BTmin=0
        #highmassexterior=ws.weighted_mean(y[point_flags[2]],weights=yerror[point_flags[2]])
        highmassexterior=ws.weighted_mean(y[point_flags[1]],weights=1./yerror[point_flags[1]])
        highmassexteriorerr=std(y[point_flags[1]])/sqrt(sum(point_flags[1]))
        limits=[7.8,11.3,-.1,3.1]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=100
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            if (i == 0) | (i == 2):
                plt.errorbar(x[point_flags[i]],y[point_flags[i]],yerr=yerror[point_flags[i]],fmt=None,ecolor='k')
                sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=pcolor[point_flags[i]],vmin=BTmin,vmax=BTmax,cmap='jet',s=size,label='GALFIT')
                (rho,p)=spearman_with_errors(x[point_flags[i]],y[point_flags[i]],yerror[point_flags[i]])
              
                #print rho,p
                ax=plt.gca()
                #text(.95,.9,r'$\rho = %4.2f$'%(np.mean(rho)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                #text(.95,.8,'$p = %5.4f$'%(np.mean(p)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                plt.text(.95,.9,r'$\rho = [%4.2f,%4.2f]$'%(np.percentile(rho,16),np.percentile(rho,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
                plt.text(.95,.8,'$p =[%5.4f, %5.4f]$'%(np.percentile(p,16),np.percentile(p,84)),horizontalalignment='right',transform=ax.transAxes,fontsize=16)

                #rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
                
                #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
                #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
            if (i == 1) | (i == 3):
                #xbin,ybin,ybinerr=my.binitbins_weighted(0.,.4,5,x[point_flags[i-1]],y[point_flags[i-1]],yerror[point_flags[i-1]],medianflag=medianflag)
                mstarmin=8.5
                mstarmax=11
                xbin,ybin,ybinerr=my.binitbins_weighted(mstarmin,mstarmax,5,x[point_flags[i-1]],y[point_flags[i-1]],yerror[point_flags[i-1]],medianflag=medianflag)
                xbin,sbin,sbinerr=my.binitbins(mstarmin,mstarmax,5,x[point_flags[i-1]],pcolor[point_flags[i-1]])
                #xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                #xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet',vmin=BTmin,vmax=BTmax,marker='s')
                #R = np.corrcoeff(xbin,ybin)
                axhline(y=highmassexterior,color='k',ls='-')
                axhline(y=highmassexterior+highmassexteriorerr,color='k',ls='--')
                axhline(y=highmassexterior-highmassexteriorerr,color='k',ls='--')
                print 'i = ',i
                print 'ybin[1] = ',ybin[1]
                print 'ybinerr[1] = ',ybinerr[1]
                #print xbin,ybin,sbin

            a=plt.gca()
            plt.xticks(arange(8.,11.5,.5))
            plt.axis(limits)
            bothax.append(a)

            if i == 0:
                a.set_xticklabels(([]))
                
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                #sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                if medianflag:
                    plt.title('$Median $',fontsize=22)
                else:
                    plt.title('$Weighted \ Mean $',fontsize=22)                    
            if i == 2:
                
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)
            if i == 3:
                a.set_yticklabels(([]))
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.02,-.2,'$log_{10}(M_*/M_\odot)$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5, '$B/T$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizestellarmassblue.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizestellarmassblue.eps')
    def plotsizesb(self,scalepoint=0):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & self.membflag,
                 self.sfsampleflag &  ~self.sampleflag & self.agnflag & self.membflag,
                 self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & ~self.membflag,
                self.sfsampleflag &  ~self.sampleflag & self.agnflag & ~self.membflag]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.membflag & self.gim2dflag,
                     self.sampleflag & self.agnflag & self.membflag & self.gim2dflag,
                     self.sampleflag & ~self.agnflag & ~self.membflag,
                     self.sampleflag & self.agnflag & ~self.membflag]

        bothax=[]
        x=self.sb_obs
        y=self.sizeratio
        limits=[12,21.,.01,1.5]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=60
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')

            plt.axis(limits)
            a=plt.gca()
            #rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
            #ax=plt.gca()
            #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=a.transAxes,fontsize=18)
            #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=a.transAxes,fontsize=18)


            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$surface \ brightness$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizesb.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizesb.eps')
    def plotssfrsigmair(self,scalepoint=0,usesize=0):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.sfsampleflag &  ~self.sampleflag & ~self.agnflag,
                 self.sfsampleflag &  ~self.sampleflag & self.agnflag,
                 self.sfsampleflag &  ~self.sampleflag & ~self.agnflag,
                self.sfsampleflag &  ~self.sampleflag & self.agnflag]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.membflag,
                     self.sampleflag & self.agnflag & self.membflag,
                     self.sampleflag & ~self.agnflag & ~self.membflag,
                     self.sampleflag & self.agnflag & ~self.membflag]

        bothax=[]
        x=self.sigma_ir
        y=self.ssfr*1.e9/.08
        yerror=self.ssfrerr*1.e9/.08
        xerror=self.sigma_irerr
        limits=[2.e7,9.e10,1.e-2,15.]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=60
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            if usesize:
                sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.sizeratio[point_flags[i]],vmin=.1,vmax=1,cmap='jet_r',s=size,label='GALFIT')
            else:
                sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')
            plt.errorbar(x[point_flags[i]],y[point_flags[i]],yerr=yerror[point_flags[i]],xerr=xerror[point_flags[i]],fmt=None)
            plt.axis(limits)
            a=plt.gca()
            a.set_xscale('log')
            a.set_yscale('log')
            plt.axhline(y=2,ls='--',color='b')
            plt.axhline(y=1,ls='-',color='k')
            plt.axvline(x=5.e9,ls='--',color='b')
            #rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
            #ax=plt.gca()
            #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=a.transAxes,fontsize=18)
            #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=a.transAxes,fontsize=18)


            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$sSFR/sSFR_{MS}$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))


                text(-0.02,-.2,'$\Sigma_{IR} = L_{IR}/(\pi R_e(24)^2) $',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        if usesize:
            c.ax.text(2.4,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)
        else:
            c.ax.text(2.4,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/ssfrsigmair.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/ssfrsigmair.eps')
    def plotsizepcs(self,scalepoint=0):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & self.membflag & self.zooflag,
                 self.sfsampleflag &  ~self.sampleflag & self.agnflag & self.membflag & self.zooflag,
                 self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag & self.zooflag,
                self.sfsampleflag &  ~self.sampleflag & self.agnflag & ~self.membflag & self.dvflag  & self.zooflag]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.membflag & self.zooflag,
                     self.sampleflag & self.agnflag & self.membflag & self.zooflag,
                     self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag & self.zooflag,
                     self.sampleflag & self.agnflag & ~self.membflag & self.dvflag & self.zooflag]

        bothax=[]
        x=self.s.p_cs
        y=self.sizeratio
        limits=[-.1,1.,.01,1.5]
        if scalepoint:
            size=(self.ssfrms[point_flags[i]]+2)*40
        else:
            size=60
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            #plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.logstellarmass[point_flags[i]],vmin=mstarmin,vmax=mstarmax,cmap='jet',s=size,label='GALFIT')

            plt.axis(limits)
            a=plt.gca()
            rho,p=spearman(x[point_flags[i]],y[point_flags[i]])
            ax=plt.gca()
            plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=a.transAxes,fontsize=18)
            plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=a.transAxes,fontsize=18)


            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$R_e(24)/Re(r)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$Spiral \ Probability$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBT.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizeBT.eps')
    def plotsizedvdr4(self,scalepoint=0):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & self.dvflag & (self.s.CLUSTER_LX < 1),
                 self.sfsampleflag &  ~self.sampleflag & self.agnflag & self.dvflag& (self.s.CLUSTER_LX < 1),
                 self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & self.dvflag & (self.s.CLUSTER_LX > 1),
                self.sfsampleflag &  ~self.sampleflag & self.agnflag & self.dvflag & (self.s.CLUSTER_LX > 1)]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.dvflag & (self.s.CLUSTER_LX < 1),
                     self.sampleflag & self.agnflag & self.dvflag & (self.s.CLUSTER_LX < 1),
                     self.sampleflag & ~self.agnflag & self.dvflag & (self.s.CLUSTER_LX > 1),
                     self.sampleflag & self.agnflag & self.dvflag & (self.s.CLUSTER_LX > 1)]

        bothax=[]
        x=self.s.DR_R200
        y=abs(self.dv)
        limits=[-.1,3.4,-.1,2.6]
        if scalepoint:
            size=(self.ssfrms+2)*40
        else:
            size=60*np.ones(len(x))
        for i in range(4):
            plt.subplot(2,2,i+1)
            
            plt.scatter(x[x_flags[i]],y[x_flags[i]],marker='x',c='k',s=40,label='No Fit')

            sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],s=size[point_flags[i]],vmin=.1,vmax=1,cmap='jet_r',c=self.sizeratio[point_flags[i]],label='GALFIT')

            plt.axis(limits)
            a=plt.gca()


            bothax.append(a)
            if i == 0:
                a.set_xticklabels(([]))

                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
                plt.text(0.95,0.9,'$log_{10}(L_X) < 43$',transform=a.transAxes,horizontalalignment='right',fontsize=20)
            if i == 2:

                plt.text(-0.2,1.,'$\Delta v/\sigma_v$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                plt.text(0.95,0.9,'$log_{10}(L_X) > 43$',transform=a.transAxes,horizontalalignment='right',fontsize=20)
                plt.text(-0.02,-.2,'$\Delta r/R_{200}$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            xl=np.array([1.4,.35])
            yl=np.array([3.0,1.2])
            plt.plot(xl,yl,'k--',lw=2)
            xl=np.array([0.01,1.2])
            yl=np.array([1.5,0])
            plt.plot(xl,yl,'k-',lw=2)

        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.4,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/sizedvdr4.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/sizedvdr4.eps')
    def plotsalimcolormag(self):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[  ~self.sampleflag & ~self.agnflag & self.membflag,
                   ~self.sampleflag & self.agnflag & self.membflag,
                   ~self.sampleflag & ~self.agnflag & ~self.membflag,
                 ~self.sampleflag & self.agnflag & ~self.membflag]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.membflag,
                     self.sampleflag & self.agnflag & self.membflag,
                     self.sampleflag & ~self.agnflag & ~self.membflag ,
                     self.sampleflag & self.agnflag & ~self.membflag]

        bothax=[]
        y=self.nsamag[:,1] - self.nsamag[:,4]
        x=self.s.ABSMAG[:,4]
        limits=[-22.8,-16.8,.5,6.9]
        for i in range(4):
            plt.subplot(2,2,i+1)
            plt.axhline(y=4,ls='--',color='k')
            plt.axhline(y=4.9,ls=':',color='k')
            plt.plot(x[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(x[point_flags[i]],y[point_flags[i]],c=self.sizeratio[point_flags[i]],vmin=0.1,vmax=1,cmap='jet_r',s=100,label='GALFIT')

            plt.axis(limits)
            #xe=arange(8.5,11.5,.1)
            #xe=10.**xe
            #ye=(.08e-9)*xe
            #plot(log10(xe),(ye),'k-',lw=1,label='$Elbaz+2011$')
            #plot(log10(xe),(2*ye),'k:',lw=1,label='$2 \ SFR_{MS}$')

            #gca().set_yscale('log')
            a=plt.gca()
            bothax.append(a)
            #axvline(x=9.3,c='k',ls='--')
            #axhline(y=.086,c='k',ls='--')
            #if i > 2:
            #    xlabel('$log_{10}(M_* (M_\odot)) $',fontsize=22)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$NUV - r$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$M_r$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/salimcolormag.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/salimcolormag.eps')
    def plotSFRStellarmassSize(self,clustername=None):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.blueflag2 &  ~self.sampleflag & ~self.agnflag & self.membflag,
                 self.blueflag2 &  ~self.sampleflag & self.agnflag & self.membflag,
                 self.blueflag2 &  ~self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag,
                self.blueflag2 &  ~self.sampleflag & self.agnflag & ~self.membflag & self.dvflag]
                 
        point_flags=[self.bluesampleflag & ~self.agnflag & self.membflag,
                     self.bluesampleflag & self.agnflag & self.membflag,
                     self.bluesampleflag & ~self.agnflag & ~self.membflag & self.dvflag,
                     self.bluesampleflag & self.agnflag & ~self.membflag & self.dvflag]

        bothax=[]
        y=self.SFR_BEST*1.58 # convert from salpeter to chabrier IMF according to Salim+07
        for i in range(4):
            plt.subplot(2,2,i+1)
            if clustername != None:
                x_flags[i] = x_flags[i] & (self.s.CLUSTER == clustername)
                point_flags[i] = point_flags[i] & (self.s.CLUSTER == clustername)
            plt.plot(self.logstellarmass[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(self.logstellarmass[point_flags[i]],y[point_flags[i]],c=self.sizeratio[point_flags[i]],vmin=0.1,vmax=1,cmap='jet_r',s=60,label='GALFIT')
            if (i == 0) | (i == 2):
                xbin,ybin,ybinerr=my.binitbins(9.4,11.,(11.-9.4)/.2,self.logstellarmass[point_flags[i]],y[point_flags[i] ])
                xbin,sbin,sbinerr=my.binitbins(9.4,11.,(11-9.4)/.2,self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]])
                #xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                #xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet_r',vmin=.1,vmax=1,marker='s')
            plt.axis([9.1,11.75,7.e-2,32])
            self.plotelbaz()
            gca().set_yscale('log')
            a=plt.gca()
            bothax.append(a)
            axvline(x=minmass,c='k',ls='--')
            axhline(y=.086,c='k',ls='--')
            #if i > 2:
            #    xlabel('$log_{10}(M_* (M_\odot)) $',fontsize=22)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                plt.legend(loc='upper left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$SFR \ (M_\odot/yr)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$log_{10}(M_*/M_\odot)$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.eps')
    def plotSFRStellarmassSizeBlue(self,clustername=None,blueflag=True,spiralflag=False,plotbadfits=True,nocolor=False):
        minsize=.4
        maxsize=1.5
        figure(figsize=(10,8))
        baseflag = np.ones(len(self.sampleflag),'bool')
        if blueflag:
            baseflag = baseflag & self.blueflag2
        if spiralflag:
            baseflag = baseflag & self.spiralflag
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[baseflag &  ~self.sampleflag & ~self.agnflag & self.membflag,
                 baseflag &  ~self.sampleflag & self.agnflag & self.membflag,
                 baseflag &  ~self.sampleflag & ~self.agnflag & ~self.membflag ,
                baseflag &  ~self.sampleflag & self.agnflag & ~self.membflag]
                 
        point_flags=[baseflag & self.sampleflag & ~self.agnflag & self.membflag,
                     baseflag & self.sampleflag & self.agnflag & self.membflag,
                     baseflag & self.sampleflag & ~self.agnflag & ~self.membflag,
                     baseflag & self.sampleflag & self.agnflag & ~self.membflag]

        bothax=[]
        y=self.SFR_BEST*1.58 # convert from salpeter to chabrier IMF according to Salim+07
        for i in range(4):
            plt.subplot(2,2,i+1)
            if clustername != None:
                x_flags[i] = x_flags[i] & (self.s.CLUSTER == clustername)
                point_flags[i] = point_flags[i] & (self.s.CLUSTER == clustername)
            if (i == 0) | (i==2):
                if plotbadfits:
                    plt.plot(self.logstellarmass[x_flags[i]],y[x_flags[i]],'kx',markersize=8,label='No Fit')
                if nocolor:
                    sp=plt.scatter(self.logstellarmass[point_flags[i]],y[point_flags[i]],c='k',vmin=0.1,vmax=1,cmap='jet_r',s=60,label='GALFIT')
                else:
                    sp=plt.scatter(self.logstellarmass[point_flags[i]],y[point_flags[i]],c=self.sizeratio[point_flags[i]],vmin=minsize,vmax=maxsize,cmap='jet_r',s=60,label='GALFIT')
            if (i == 1) | (i == 3):
                xbin,ybin,ybinerr=my.binitbins(9.4,11.,(11.-9.4)/.2,self.logstellarmass[point_flags[i-1]],y[point_flags[i-1] ])
                xbin,sbin,sbinerr=my.binitbins(9.4,11.,(11-9.4)/.2,self.logstellarmass[point_flags[i-1]],self.sizeratio[point_flags[i-1]])
                #xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                #xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16,ecolor='k')
                if nocolor:
                    plt.scatter(xbin,ybin,c='k',s=300,cmap='jet_r',vmin=minsize,vmax=maxsize,marker='s')
                else:
                    plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet_r',vmin=minsize,vmax=maxsize,marker='s')
            plt.axis([9.1,11.75,7.e-2,32])
            self.plotelbaz()
            gca().set_yscale('log')
            a=plt.gca()
            bothax.append(a)
            axvline(x=minmass,c='k',ls='--')
            axhline(y=.086,c='k',ls='--')
            #if i > 2:
            #    xlabel('$log_{10}(M_* (M_\odot)) $',fontsize=22)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                plt.legend(loc='upper left',numpoints=1,scatterpoints=1)
                plt.title('$Median $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$SFR \ (M_\odot/yr)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$log_{10}(M_*/M_\odot)$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        if not(nocolor):
            c=colorbar(ax=bothax,fraction=.05,ticks=arange(minsize,maxsize,.1),format='%.1f')
            c.ax.text(2.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)

        if nocolor:
            savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSizeBlue-bw.png')
            savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSizeBlue-bw.eps')
        else:
            savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSizeBlue.png')
            savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSizeBlue.eps')
    def plotelbaz(self):
        xe=arange(8.5,11.5,.1)
        xe=10.**xe
        ye=(.08e-9)*xe
        plot(log10(xe),(ye),'k-',lw=1,label='$Elbaz+2011$')
        plot(log10(xe),(2*ye),'k:',lw=1,label='$2 \ SFR_{MS}$')

    def plotSFRStellarmassNUV24(self,clustername=None):
        figure(figsize=(10,8))
        subplots_adjust(left=.12,bottom=.15,wspace=.02,hspace=.02)
        x_flags=[self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & self.membflag,
                 self.sfsampleflag &  ~self.sampleflag & self.agnflag & self.membflag,
                 self.sfsampleflag &  ~self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag,
                self.sfsampleflag &  ~self.sampleflag & self.agnflag & ~self.membflag & self.dvflag]
                 
        point_flags=[self.sampleflag & ~self.agnflag & self.membflag,
                     self.sampleflag & self.agnflag & self.membflag,
                     self.sampleflag & ~self.agnflag & ~self.membflag & self.dvflag,
                     self.sampleflag & self.agnflag & ~self.membflag & self.dvflag]

        bothax=[]
        for i in range(4):
            plt.subplot(2,2,i+1)
            if clustername != None:
                x_flags[i] = x_flags[i] & (self.s.CLUSTER == clustername)
                point_flags[i] = point_flags[i] & (self.s.CLUSTER == clustername)
            plt.plot(self.logstellarmass[x_flags[i]],self.s.SFR_ZDIST[x_flags[i]],'kx',markersize=8,label='No Fit')
            sp=plt.scatter(self.logstellarmass[point_flags[i]],self.s.SFR_ZDIST[point_flags[i]],c=self.sizeratio[point_flags[i]],vmin=0.1,vmax=1,cmap='jet_r',s=60,label='GALFIT')
            if (i == 0) | (i == 2):
                xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.s.SFR_ZDIST[point_flags[i]],7)
                xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],7)
                errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet_r',vmin=.1,vmax=1,marker='s')
            plt.axis([9.1,11.75,7.e-2,32])
            xe=arange(8.5,11.5,.1)
            xe=10.**xe
            ye=(.08e-9)*xe
            plot(log10(xe),(ye),'k-',lw=1,label='$Elbaz+2011$')
            plot(log10(xe),(2*ye),'k:',lw=1,label='$2 \ SFR_{MS}$')

            gca().set_yscale('log')
            a=plt.gca()
            bothax.append(a)
            axvline(x=9.3,c='k',ls='--')
            axhline(y=.086,c='k',ls='--')
            #if i > 2:
            #    xlabel('$log_{10}(M_* (M_\odot)) $',fontsize=22)
            if i == 0:
                a.set_xticklabels(([]))
                plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                plt.legend(loc='upper left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
            if i == 2:
                text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$SFR \ (M_\odot/yr)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)

            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$log_{10}(M_*/M_\odot)$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
            i += 1
        c=colorbar(ax=bothax,fraction=.05)
        c.ax.text(2.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)


        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.eps')
    def plotSFRStellarmassSizeold(self):
        figure(figsize=(10,5))
        subplots_adjust(left=.12,bottom=.15,wspace=.05)
        subplot(1,2,1)
        flag=self.sfsampleflag &  ~self.sampleflag & ~self.agnflag 
        plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'kx',markersize=8,label='No Fit')
        flag=self.sampleflag & ~self.agnflag & ~self.membflag
        sp=scatter(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],c=self.sizeratio[flag],vmin=0,vmax=1,cmap='jet_r',s=50,label='GALFIT')
        ax1=plt.gca()
        plt.title('$ SF \ Galaxies $',fontsize=22)
        plt.ylabel('$ SFR \ (M_\odot/yr) $')

        subplot(1,2,2)
        flag=self.sfsampleflag &  ~self.sampleflag & self.agnflag 
        plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'kx',markersize=8,label='No Fit')
        flag=self.sampleflag & self.agnflag & ~self.membflag
        sp=scatter(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],c=self.sizeratio[flag],vmin=0.1,vmax=1,cmap='jet_r',s=50,label='GALFIT')

        ax2=plt.gca()

        bothax=[ax1,ax2]
        for a in bothax:
            plt.sca(a)
            axis([9.1,12,7.e-2,32])
            xe=arange(8.5,11.5,.1)
            xe=10.**xe
            ye=(.08e-9)*xe
            plot(log10(xe),(ye),'k-',lw=1,label='$Elbaz+2011$')
            plot(log10(xe),(2*ye),'k:',lw=1,label='$2 \ SFR_{MS}$')

            gca().set_yscale('log')

            axvline(x=9.3,c='k',ls='--')
            axhline(y=.086,c='k',ls='--')
            xlabel('$log_{10}(M_* (M_\odot)) $',fontsize=22)
        ax2.set_yticklabels(([]))
        colorbar(ax=[ax1,ax2],fraction=.03)
        legend(loc='upper left',numpoints=1,scatterpoints=1)        
        title('$AGN $',fontsize=22)
        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/SFRStellarmassSize.eps')
    def compare_elbaz(self):
        plt.figure()
        flag=self.sampleflag & self.agnflag & self.dvflag #& (self.s.SERSIC_N < 2.)
        
        #plt.plot(self.sigma_ir[self.sampleflag & ~self.agnflag],s.ssfr[s.sampleflag & ~self.agnflag]*1.e9/.08,'bo')
        plt.scatter(self.sigma_ir[flag],s.ssfr[flag]*1.e9/.08,c=self.s.DR_R200[flag],s=60,cmap='jet_r',vmin=0,vmax=1.5)
        plt.colorbar(fraction=.08)
        plt.gca().set_yscale('log')
        plt.gca().set_xscale('log')
        plt.subplots_adjust(bottom=.2,left=.15)
        plt.axhline(y=2,ls='--')
        plt.axvline(x=5.e9,ls='--')
        plt.ylabel('$ sSFR/sSFR_{MS} $')
        plt.xlabel('$\Sigma_{IR} = L_{IR}/(\pi R_e(24)^2) $')


    def plotsSFRvsStellarmass(self,plotsingle=1,zoom=0,onepanel=0,farexterior=0):
        # log10(chabrier) = log10(Salpeter) - .25 (SFR estimate)
        # log10(chabrier) = log10(diet Salpeter) - 0.1 (Stellar mass estimates)

        if plotsingle:
            if onepanel:
                figure(figsize=(6,6))
                subplots_adjust(bottom=.15,left=.15,right=.95,top=.95,hspace=.02,wspace=.02)
            else:
                figure(figsize=(12,4))
                subplots_adjust(bottom=.2,left=.1,right=.95,top=.95,hspace=.02,wspace=.02)
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([1.e9,1.e12,5.e-14,5.e-10])
            #axis([9,12,-14.5,-10.5])
            #xlabel('$ log_{10}(Stellar \ Mass \ (M_\odot)) $',fontsize=20)
            #ylabel('$ log_{10}(SFR_{IR}/Stellar \ Mass \ (M_\odot))  $',fontsize=20)
            legend(loc='upper left',numpoints=1)

        colors=[log10(self.s.SIGMA_5),self.isosize]
        colors=[(self.s.DR_R200),self.isosize]
        colors=[self.isosize,self.sizeratio,(self.s.DR_R200)]
        cbticks=[arange(-.5,2.2,.5),arange(0,2.5,.5),arange(0,2.5,.5)]
        clabel=['$\Sigma_5$','$R_{iso}(24)/R_{iso}(r)$']
        clabel=['$R_{iso}(24)/R_{iso}(r)$','$R_{e}(24)/R_{e}(r)$','$\Delta r/R_{200}$',]
        cmaps=['jet_r','jet_r','jet_r']
        v1=[0.2,0.2,0]
        v2=[1.2,1.2,2]
        nplot=1
        x=(self.logstellarmass)#-.1
        y=log10(self.s.SFR_ZDIST)# convert from salpeter to chabrier IMF
        #y=log10(self.s.SFR_ZCLUST)-.2 # convert from salpeter to chabrier IMF

        if onepanel:
            nplots=1
        else:
            nplots=3
        
        for i in range(nplots):
            if not(onepanel):
                subplot(1,3,nplot)
                nplot +=1
            ax=gca()
            if i == 1:
                flag=self.sampleflag & ~self.agnflag & self.dvflag
                flag2=self.sampleflag & ~self.agnflag & ~self.dvflag
                
            else:
                flag=self.isosampleflag & ~self.agnflag & self.dvflag
                flag2=self.isosampleflag & ~self.agnflag & ~self.dvflag
            #sp=hexbin(x[flag],y[flag]-x[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=10,alpha=0.5)#,extent=(0,2.,0,1.5))
            sp=scatter(x[flag],y[flag]-x[flag],c=colors[i][flag],s=30,cmap=cmaps[i],vmin=v1[i],vmax=v2[i])
            if farexterior:
                sp=scatter(x[flag2],y[flag2]-x[flag2],marker='*',c=colors[i][flag2],s=300,cmap=cmaps[i],vmin=v1[i],vmax=v2[i])
            #scatter(x[self.outertruncflag & flag],y[self.outertruncflag & flag]-x[self.outertruncflag &flag],c=colors[i][self.outertruncflag & flag],marker='*',s=120)
            #flag2=flag & self.truncflag
            #scatter(x[flag2],y[flag2]-x[flag2],c=colors[i][flag2],marker='*',s=120)
            #scatter(x[self.sampleflag],y[self.outertruncflag]-x[self.outertruncflag],c=colors[i][self.outertruncflag],marker='*',s=120)
            xl=arange(9,11.5,.1)
            yl=(-0.53*((xl)-10)-9.87)
            #plot(xl,yl,'k-',label='Blue Galaxies (Salim+07)')
            yl=(-0.35*((xl)-10)-9.83)
            #plot(xl,yl,'k-',label='Pure SF (Salim+07)')
            yl=log10(5.96e-11*10.**((-1.35+1)*(xl-11.03))*exp(-10.**(xl-11.03)))
            plot(xl,yl,'r-',label='Salim+2007')
            plot(xl,yl-.5,'r--',label='Salim-0.5dex')
            #yl=(-0.35*((xl)-10)-10.)
            #plot(xl,yl,'k-',label='Enhanced')
            #plot(xl,yl-.92,'k--',label='Low sSFR')
            #plot(xl,yl-1.4,'k:',label='Depleted')
            '''
            xl=arange(2.5e9,3.e11,5.e9)
            xl=arange(9.5,11.5,.1)
            #yl=10.**(-0.53*(log10(xl)-10)-9.87)
            #yl=10.**(-0.35*(log10(xl)-10)-9.83)
            yl=(-0.35*((xl)-10)-9.83)
            plot(xl,yl,'k-',label='Salim+07')
            plot(xl,yl-log10(8),'k--',label='Salim/8')
            legend(prop={'size':12},numpoints=1)
            # plot SF Main Sequence from Elbaz et al 2011
            xl=arange(9,12,.1)
            xl=10.**xl
            yl=.25e-9*xl
            plot(log10(xl),log10(yl)-log10(xl),'c-',lw=3,label='Elbaz+ 2011')
            '''

            # plot SF Main Sequence from Elbaz et al 2011
            xl=arange(9.,11.5,.1)
            xl=10.**xl
            yl=.25e-9*xl
            # plot SF Main Sequence from Elbaz et al 2011
            xe=arange(9.,11.5,.1)
            xe=10.**xe
            ye=(.08e-9)*xe
            plot(log10(xe),(ye),'k-',lw=1,label='Elbaz+2011')
    
            text(8.3,ye[0]*2,'$\mathrm{Elbaz \ z=0}$',color='k',fontsize=14,horizontalalignment='left')

            # subtract 0.25 dex from log10(yl) to convert from salpeter to chabrier IMF
            # actually, don't need to correct b/c factor applies to both SFR and M*
            #plot(log10(xl),log10(yl)-log10(xl),'c-',lw=3,label='Elbaz+2011')
            if i == 0:
                legend(loc='upper right',prop={'size':10},numpoints=1)
            if zoom:
                print 'zooming'
                axis([8.5,12,-11.5,-9.7])
            else:
                if onepanel:
                    axis([8.9,11.9,-13.8,-8.9])
                else:
                    axis([8.9,12.2,-13.8,-8.9])

            if i > 0:
                ax.set_yticklabels(([]))

            axins1 = inset_axes(ax,
                    width="5%", # width = 10% of parent_bbox width
                    height="40%", # height : 50%
                    bbox_to_anchor=(.85,0.05,1,1),
                    bbox_transform=ax.transAxes,
                    borderpad=0,
                    loc=3)

            cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
            text(.82,.05,clabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)

        if onepanel:
            ax.text(.5,-.1,'$ log_{10}(M_*/M_\odot) $',fontsize=22,transform=ax.transAxes,horizontalalignment='center')
            ax.text(-.15,.5,'$ log_{10}(SFR/M_*) $',fontsize=22,transform=ax.transAxes,rotation=90,verticalalignment='center')

        else:
            ax.text(-.5,-.15,'$ log_{10}(M_*/M_\odot) $',fontsize=22,transform=ax.transAxes,horizontalalignment='center')
            ax.text(-2.32,.5,'$ log_{10}(SFR/M_*) $',fontsize=22,transform=ax.transAxes,rotation=90,verticalalignment='center')

        if zoom:
            savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass_zoom.png')
            savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass_zoom.eps')
        else:
            if onepanel:
                savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass_onepanel.png')
                savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass_onepanel.eps')
            else:
                savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass.png')
                savefig(homedir+'research/LocalClusters/SamplePlots/sSFRvsStellarmass.eps')

    def plotSFRvsStellarmass2panel(self,plotsingle=1,showtrunc=0):
        if plotsingle:
            figure(figsize=(10,5))
            ax=gca()
            #ax.set_xscale('log')
            ax.set_yscale('log')
            axis([8.8,12,1.e-3,40.])
            legend(loc='upper left',numpoints=1,prop={'size':10})
        subplots_adjust(bottom=0.15,wspace=.02,right=.95)
        subplot(1,2,1)
        flag=self.membflag & ~self.agnflag & self.sampleflag #(self.s.p_cs > spiralcut)
        for i in range(len(clusternames)):
            cl=clusternames[i]
            fflag=flag & (self.s.CLUSTER == cl)
            plot(self.logstellarmass[fflag],self.s.SFR_ZDIST[fflag],'ko',color=colors[i],marker=shapes[i],label=cl,markersize=8)
        xbin,ybin,ybinerr=my.binit(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],7)
        xbin,ybin,ybinerr=my.binitbins(9.5,11,6,self.logstellarmass[flag],self.s.SFR_ZDIST[flag])
        if showtrunc:
            plot(self.logstellarmass[flag&self.truncflag],self.s.SFR_ZDIST[flag & self.truncflag],'k*',markersize=20)
        #plot(xbin,ybin,'ro',markersize=10,label='_nolegend_')
        #errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='r')
        legend(numpoints=1,loc='upper left',prop={'size':10})
        gca().set_yscale('log')
        limits=[8.6,11.8,.08,15]
        axis(limits)
        ylabel('$ SFR_{IR} \ (M_\odot/yr) $',fontsize=26)
        text(.9,.9,'$Cluster $',fontsize=22,transform=gca().transAxes,horizontalalignment='right')
        subplot(1,2,2)
        flag= ~self.membflag & ~self.agnflag & self.sampleflag
        plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'b.',label='_nolegend_')
        plot(xbin,ybin,'ro',markersize=10,label='Cluster')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='r')

        xbin,ybin,ybinerr=my.binit(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],7)
        xbin,ybin,ybinerr=my.binitbins(9.5,11,6,self.logstellarmass[flag],self.s.SFR_ZDIST[flag])
        plot(xbin,ybin,'bo',markersize=10,label='External')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='b')
        gca().set_yscale('log')
        legend(numpoints=1,loc='upper left',prop={'size':10})
        axis(limits)
        gca().set_yticklabels(([]))
        text(.9,.9,'$Cluster \ vs. \ External $',fontsize=22,transform=gca().transAxes,horizontalalignment='right')
        text(-.05,-.15,'$ Stellar \ Mass \ (M_\odot) $',transform=gca().transAxes,horizontalalignment='center',fontsize=26)


        savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmass2panel.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmass2panel.eps')
    def plotSFRvsStellarmass(self,plotsingle=1,plotsize=False,plotagn=False):
        if plotsingle:
            plt.figure()
            plt.subplots_adjust(bottom=.15,left=.15)
        x=self.logstellarmass
        msize=self.sizeratio
        flag=self.sfsampleflag & self.membflag & ~self.agnflag
        plot(self.logstellarmass[flag],self.SFR_BEST[flag],'k.')
        #scatter(self.logstellarmass[flag],self.SFR_BEST[flag])
        if plotsize:
            #print self.sizeratio[flag]
            #plt.scatter(self.logstellarmass[flag],self.SFR_BEST[flag],s=self.logstellarmass[flag],c='r')#,vmin=0.1,vmax=1.,cmap=cm.jet_r)
            #colorbar(sp)
            print 'skipping'
        else:
            plot(x[flag],self.SFR_BEST[flag],'r.',label='_nolegend_')
        xbin,ybin,ybinerr=my.binitbins(9.3,11.3,9,x[flag],self.SFR_BEST[flag])
        plot(xbin,ybin,'r^',markersize=12,label='Cluster')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='r',label='_nolegend_')
        # plot exterior
        flag= ~self.membflag & self.sfsampleflag & ~self.agnflag#& ~self.AGNKAUFF #& ~self.agnflag
        if plotsize:
            print 'skipping'
            #sp=scatter(x[flag],self.SFR_BEST[flag],c=self.sizeratio[flag],s='100',vmin=0.1,vmax=1.,cmap='jet_r')
        else:
            plot(x[flag],self.SFR_BEST[flag],'b.',label='_nolegend_')
        xbin,ybin,ybinerr=my.binitbins(9.3,11.3,9,x[flag],self.SFR_BEST[flag])
        plot(xbin,ybin,'b^',markersize=12,label='External')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='b',label='_nolegend_')
        # plot SF Main Sequence from Elbaz et al 2011
        xl=arange(9.,11.5,.1)
        xl=10.**xl
        yl=.08e-9*xl
        #plot(log10(xl),(yl),'c-',lw=3,label='z=0 (Elbaz+2011)')
        # plot SF Main Sequence from Elbaz et al 2011
        xe=arange(9.,11.5,.1)
        xe=10.**xe
        ye=(.08e-9)*xe
        plot(log10(xe),(ye),'k-',lw=1,label='Elbaz+2011')
        legend(numpoints=1,loc='upper left')
        if plotsingle:
            ax=gca()
            #ax.set_xscale('log')
            ax.set_yscale('log')
            axis([9.1,12,5.e-2,15.])
            xlabel('$ Stellar \ Mass \ (M_\odot) $',fontsize=20)
            ylabel('$ SFR_{IR} \ (M_\odot/yr) $',fontsize=20)
            legend(loc='upper left',numpoints=1)

        #text(9.3,ye[0]*2,'$\mathrm{Elbaz \ z=0}$',color='k',fontsize=14,horizontalalignment='left')

        #savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmass.png')
        #savefig(homedir+'research/LocalClusters/SamplePlots/SFRvsStellarmass.eps')
    def plotsizestellarmass(self,plotsingle=True,btmax=None,btmin=None,equal_pop_bins=True,use_median=True):
        if plotsingle:
            plt.figure(figsize=(7,6))
            plt.subplots_adjust(bottom=.15,left=.15)
        flags = [self.sampleflag & self.membflag,self.sampleflag & ~self.membflag]
        if btmax != None:
            flags = flags & (self.gim2d.B_T_r < btmax)
        if btmin != None:
            flags = flags & (self.gim2d.B_T_r > btmin)
        colors = ['r','b']
        for i in range(len(flags)):
            #plot(self.logstellarmass[flags[i]],self.sizeratio[flags[i]],'ro',color=colors[i],alpha=0.5)
            plot(self.logstellarmass[flags[i]],self.sizeratio[flags[i]],'ro',color=colors[i],alpha=0.5)
            errorbar(self.logstellarmass[flags[i]],self.sizeratio[flags[i]],self.sizeratioERR[flags[i]],fmt=None,ecolor='0.5',alpha=0.5)
            flag = flags[i]
            if btmax != None:
                flag = flag & (self.logstellarmass > 9.1) & (self.logstellarmass < 10.5)
            xbin,ybin,ybinerr,colorbin = binxycolor(self.logstellarmass[flag],self.sizeratio[flag],self.gim2d.B_T_r[flag],erry=True,nbin=5,equal_pop_bins=equal_pop_bins,use_median=use_median)
            #print xbin
            plot(xbin,ybin,'ro',color=colors[i],markersize=18,mec='k',zorder=5)
            #scatter(xbin,ybin,s=200, c=colorbin,marker='^',vmin=0,vmax=0.6,cmap='jet')
            errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='k',alpha=0.7)
        #colorbar(label='$B/T$')

        xlabel('$ \log_{10}(M_\star /M_\odot) $',fontsize=22)
        ylabel('$ R_{24}/R_d  $',fontsize=22)
        #rho,p=spearman(self.logstellarmass[flag],self.sizeratio[flag])
        #ax=plt.gca()
        #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.legend(['$Core$','$<Core>$','$External$','$<External>$'],numpoints=1)
        s=''
        if btmax != None:
            s = '$B/T \ <  \  %.2f$'%(btmax)
        if btmin != None:
            s = '$B/T \ >  \  %.2f$'%(btmin)
        if (btmax != None) & (btmin != None):
            s = '$%.2f < B/T \ <  \  %.2f$'%(btmin,btmax)
        plt.title(s,fontsize=20)
        
        plt.axis([8.6,10.9,-.1,2.9])
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizestellarmass.pdf')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizestellarmass.png')
        plt.savefig(figuredir+'fig13.pdf')
    def newfigure(self):
        plt.figure(figsize=plotsize_2panel)
        #plt.subplot(1,2,1)
        extraflag=[self.membflag,~self.membflag]
        markers=['o','s']
        allax=[]
        for i in range(2):
            plt.subplot(1,2,i+1)
            flag=self.sfsampleflag & ~self.agnflag & extraflag[i]
            plt.scatter(self.logstellarmass[flag],self.SFR_BEST[flag],s=50.*self.sizeratio[flag],c='None',vmin=.1,vmax=1,marker=markers[i])
            flag=self.sampleflag  & ~self.agnflag & extraflag[i]
            plt.scatter(self.logstellarmass[flag],self.SFR_BEST[flag],s=50.*self.sizeratio[flag],c=self.NUV24[flag],vmin=1,vmax=4,cmap='jet',marker=markers[i])

            plt.axis([9.2,11,.04,12])
            plt.gca().set_yscale('log')
            self.plotelbaz()
            allax.append(plt.gca())
        
        c=colorbar(ax=allax,fraction=.05)
        c.ax.text(3.2,.5,'$NUV-24$',rotation=-90,verticalalignment='center',fontsize=20)

        flag = self.sampleflag & ~self.agnflag & self.membflag
        xbin,ybin,ybinerr=my.binitbinsmedian(9.3,11,7,self.logstellarmass[flag],self.SFR_BEST[flag])
        xbin,sizebin,sizebinerr=my.binitbinsmedian(9.3,11,7,self.logstellarmass[flag],self.sizeratio[flag])
        flag = self.sampleflag & ~self.agnflag & ~self.membflag
        fxbin,fybin,fybinerr=my.binitbinsmedian(9.3,11,7,self.logstellarmass[flag],self.SFR_BEST[flag])
        fxbin,fsizebin,fsizebinerr=my.binitbinsmedian(9.3,11,7,self.logstellarmass[flag],self.sizeratio[flag])
        #print xbin,ybin,sizebin
        #plt.subplot(1,2,2)
        plt.figure(figsize=plotsize_2panel)
        #for i in range(len(xbin)):print xbin[i],ybin[i],sizebin[i]
        plt.subplot(1,2,1)
        plt.scatter(xbin,ybin,s=250,c=sizebin,vmin=.1,vmax=1,marker='o',cmap='jet_r')
        plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=20)
        self.plotelbaz()

        plt.axis([9.2,11,.04,12])
        plt.gca().set_yscale('log')

        plt.subplot(1,2,2)
        #for i in range(len(xbin)):print xbin[i],ybin[i],sizebin[i]
        plt.scatter(fxbin,fybin,s=100,c=fsizebin,vmin=.1,vmax=1,marker='s',cmap='jet_r')

        plt.errorbar(fxbin,fybin,yerr=fybinerr,fmt=None,color='.5',markersize=20)

        self.plotelbaz()

        plt.axis([9.2,11,.04,12])
        plt.gca().set_yscale('log')
        c=colorbar(fraction=.08)
        c.ax.text(3.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)

    def plotSFR24vsSFRJM(self):
        figure(figsize=(10,5))
        subplots_adjust(bottom=.15,wspace=.3,right=.95,left=.1)
        subplot(1,2,1)
        sfrjm=self.jmass.SFR100_AVG
        flag=~self.agnflag
        plot(log10(self.s.SFR_ZDIST[flag])-.2,sfrjm[flag],'k.')
        xl=arange(-2.5,1.5,.1)
        plot(xl,xl,'b-')
        axis([-3,1,-6,1])
        xlabel(r'$ SFR(Chary \ & \ Elbaz) \ (M_\odot/yr) $',fontsize=20)
        ylabel('$ SFR(Moustakas) \ (M_\odot/yr) $',fontsize=20)

        subplot(1,2,2)
        plot(self.logstellarmass[flag],sfrjm[flag],'k.',label='Moustakas')
        plot(self.logstellarmass[flag],log10(self.s.SFR_ZDIST[flag])-.2,'b.',label='Chary-Elbaz')
        xlabel(r'$ M_*(Moustakas) \ (M_\odot/yr) $',fontsize=20)
        ylabel('$ SFR \ (M_\odot/yr) $',fontsize=20)
        legend(loc='upper left',numpoints=1,prop={'size':10})
        axis([8,12,-6,1])
        savefig(homedir+'research/LocalClusters/SamplePlots/CharyElbazvsMoustakas.png')

    def plotRe24vsmag(self,plotsingle=1,sbcutobs=20.,absmagflag=0):
        #print 'hi'
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ m_{24}$',fontsize=20)
            ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)


        xmin=10.5
        xmax=16.5
        flag=(self.sampleflag)# & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        x=(self.s.fcmag1[flag])
        y=self.s.fcre1[flag]*mipspixelscale
        if absmagflag:
            x=x-self.distmod[flag]
            xmin=-24.
            xmax=-16.

        color=self.sb_obs[flag]
        sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)
        if plotsingle:
            colorbar(sp)

        axis([xmin,xmax,.9,40.])
        xl=arange(xmin+1,xmax-.3,.1)
        yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
        plot(xl,yl,'k--')
        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')
        if plotsingle:
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsmag.eps')
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsmag.png')
    def plotdsrsigma(self,flag,plotsingle=True):
        if plotsingle:
            plt.figure(figsize=plotsize_2panel)


        plt.plot(self.s.SIGMA_5[flag],self.s.DR_R200[flag],'k.')
        if plotsingle:
            plt.xlabel('$\Sigma_5$')
            plt.ylabel('$\Delta R/R_{200} $')
        plt.axhline(y=1,c='k',ls='--')
        plt.gca().set_yscale('log')
        plt.gca().set_xscale('log')
        plt.axis([0.1,100,0.008,8])

    def plotsmoothnessBT(self):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(left=.12,bottom=.2,hspace=.0,wspace=.05)
        limits=[-.05,.9,.0,.4]
        allax=[]
        flags=[self.sampleflag & ~self.agnflag & self.gim2dflag,
               self.sampleflag & self.agnflag & self.gim2dflag]
        titles=['$SF \ Galaxies $','$AGN $']

        for i in range(len(flags)):
            plt.subplot(1,2,i+1)
            sp=plt.scatter(self.gim2d.B_T_r[flags[i]],self.s.S2g_1[flags[i]],c=self.sizeratio[flags[i]],s=60,vmin=.1,vmax=1,cmap='jet_r')
            plt.title(titles[i],fontsize=20)
            #plt.gca().set_yscale('log')
            plt.xlabel('$B/T$')
            plt.axis(limits)
            allax.append(plt.gca())
            if i == 0:
                plt.ylabel('$Smoothness $')
            if i == 1:
                plt.gca().set_yticklabels(([]))
        plt.colorbar(ax=allax,fraction=.05)
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsmoothBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsmoothBT.eps')       
    def plotdrBT(self,usesersic=False,useagn=False):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(left=.1,bottom=.2)
        limits=[-.05,.9,.04,6]
        plt.subplot(1,2,1)
        if usesersic:
            x=self.s.SERSIC_N
            limits=[-.1,6.1,.04,6.4]
            if useagn:
                flag=  self.sampleflag  
            else:
                flag=  self.sampleflag   & ~self.agnflag #& self.membflag
            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            limits=[-.1,.9,.04,6.4]
            if useagn:
                flag=  self.sampleflag & self.gim2dflag  
            else:
                flag=  self.sampleflag & self.gim2dflag  & ~self.agnflag #& self.membflag
            xl='$GIM2D \ B/T$'

        flag = flag & self.dvflag
        sp=plt.scatter(x[flag],self.s.DR_R200[flag],c=self.sizeratio[flag],s=60,vmin=0.1,vmax=1,cmap='jet_r')
        plt.xlabel(xl)
        plt.ylabel('$\Delta R/R_{200} $')
        plt.gca().set_yscale('log')
        plt.colorbar(sp,fraction=.08)
        plt.text(.95,.9,'$R_e(24)/R_e(r) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        plt.axis(limits)
        if usesersic:
            plt.gca().set_xscale('log')
            plt.xlim(.2,7)

        plt.subplot(1,2,2)
        sp=plt.scatter(x[flag],self.s.DR_R200[flag],c=self.logstellarmass[flag],s=60,vmin=9.3,vmax=10.8,cmap='jet')
        plt.xlabel(xl)
        plt.gca().set_yscale('log')
        if usesersic:
            plt.gca().set_xscale('log')
            plt.xlim(.2,7)
        #ylabel('$\Delta R/R_{200} $',fontsize=24)
        plt.text(.95,.9,'$log_{10}(M_*) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        plt.colorbar(sp,fraction=.08)
        plt.axis(limits)
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotdrBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotdrBT.eps')       
    def plotsigmaBT(self,usesersic=False):
        plt.figure(figsize=(10,8))
        plt.subplots_adjust(left=.12,bottom=.12,wspace=.01,hspace=.02)
        if usesersic:
            x=self.s.SERSIC_N
            limits=[-.1,6.1,.1,40]

            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            limits=[-.1,.9,.2,40]
            xl='$GIM2D \ B/T$'

        baseflag = self.sampleflag & self.gim2dflag & self.dvflag
        colors=[self.sizeratio,self.logstellarmass]
        sizeax=[]
        mstarax=[]
        allax=[]
        for i in range(4):
            plt.subplot(2,2,i+1)
            if (i == 0) | (i == 2):
                flag = baseflag  & ~self.agnflag
                
            if (i == 1) | (i == 3):
                flag = baseflag  & self.agnflag
            if (i < 2):
                col=colors[0]
                v1=.1
                v2=1
                cm='jet_r'
            else:
                col=colors[1]
                v1=mstarmin
                v2=mstarmax
                cm='jet'

            sp=plt.scatter(x[flag],self.s.SIGMA_5[flag],c=col[flag],s=60,vmin=v1,vmax=v2,cmap=cm)
            plt.gca().set_yscale('log')
            #plt.colorbar(sp,fraction=.08)
            plt.axis(limits)
            allax.append(plt.gca())
            a=plt.gca()
            if i == 0:
                a.set_xticklabels(([]))
                #plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
                sizeax.append(a)
            if i == 1:
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$AGN $',fontsize=22)
                sizeax.append(a)
                c=colorbar(ax=sizeax,fraction=.02,shrink=.9,pad=.03)
                c.ax.text(3.8,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)
            if i == 2:
                #text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$\Sigma_5 \ (gal/Mpc^2)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)
                mstarax.append(a)
            if i == 3:
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$GIM2D \ B/T$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
                mstarax.append(a)

                c=colorbar(ax=mstarax,fraction=.02,shrink=.9,pad=.03)
                c.ax.text(3.8,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)
            plt.axhline(y=10,color='k',ls='--')

            

        #plt.colorbar(ax=allax,fraction=.05)

        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.eps')       
    def plotsigmaBTblue(self,usesersic=False):
        plt.figure(figsize=(5,8))
        plt.subplots_adjust(left=.15,bottom=.12,wspace=.01,hspace=.03)
        if usesersic:
            x=self.s.SERSIC_N
            limits=[-.1,6.1,.1,40]

            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            limits=[-.1,.9,.2,40]
            xl='$GIM2D \ B/T$'

        baseflag = self.sampleflag & self.gim2dflag & self.dvflag
        colors=[self.sizeratio,self.logstellarmass]
        sizeax=[]
        mstarax=[]
        allax=[]
        flag=baseflag & ~self.agnflag
        for i in range(2):
            plt.subplot(2,1,i+1)
            if (i < 1):
                col=colors[0]
                v1=.1
                v2=1
                cm='jet_r'
            else:
                col=colors[1]
                v1=mstarmin
                v2=mstarmax
                cm='jet'

            a=plt.gca()
            if i == 0:
                sp=plt.scatter(x[flag],self.s.SIGMA_5[flag],c=col[flag],s=60,vmin=v1,vmax=v2,cmap=cm)
                a.set_xticklabels(([]))
                #plt.text(0.1,0.9,'$Core$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                plt.title('$ SF \ Galaxies $',fontsize=22)
                sizeax.append(a)
                c=colorbar(fraction=.08,pad=.03)
            if i == 9:
                #bflag=flag & (x < 0.2)
                #xbin,ybin,ybinerr=my.binitbins(log10(.6),log10(20),5,log10(self.s.SIGMA_5[bflag]),x[bflag] )
                #sxbin,sybin,sbinerr=my.binitbins(log10(.6),log10(20),5,log10(self.s.SIGMA_5[bflag]),col[bflag])
                ##xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                ##xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                ##errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                ##plt.scatter(ybin,10.**xbin,c=sybin,s=300,cmap='jet',vmin=v1,vmax=v2,marker='s')
                hexbin(x[flag],self.s.SIGMA_5[flag],C=col[flag],gridsize=10,yscale='log',cmap=cm)
                #xbin,ybin,ybinerr=my.binit(x[flag],self.s.SIGMA_5[flag],c=col[flag],s=60,vmin=v1,vmax=v2,cmap=cm)
                a.set_xticklabels(([]))
                a.set_yticklabels(([]))
                #plt.legend(loc='lower left',numpoints=1,scatterpoints=1)
                plt.title('$Median $',fontsize=22)
                sizeax.append(a)
                c=colorbar(ax=sizeax,fraction=.02,shrink=.9,pad=.03)
                c.ax.text(3.8,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)
            if i == 1:
                sp=plt.scatter(x[flag],self.s.SIGMA_5[flag],c=col[flag],s=60,vmin=v1,vmax=v2,cmap=cm)
                #text(0.1,0.9,'$External$',transform=a.transAxes,horizontalalignment='left',fontsize=20)
                text(-0.2,1.,'$\Sigma_5 \ (gal/Mpc^2)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)
                mstarax.append(a)
                plt.xlabel('$log_{10}(M_*/M_\odot)$',fontsize=20)
                c=colorbar(fraction=.08,pad=.03)
                text(-0.2,1.,'$\Sigma_5 \ (gal/Mpc^2)$',transform=a.transAxes,rotation=90,horizontalalignment='center',verticalalignment='center',fontsize=24)
            if i == 99:
                #xbin,ybin,ybinerr=my.binitbins(0.,.2,2,x[flag],self.s.SIGMA_5[flag] )
                #xbin,sbin,sbinerr=my.binitbins(0.,.6,2,x[flag],col[flag])
                ##xbin,ybin,ybinerr=my.binit(self.logstellarmass[point_flags[i]],self.SFR_BEST[point_flags[i] ],5)
                ##xbin,sbin,sbinerr=my.binit(self.logstellarmass[point_flags[i]],self.sizeratio[point_flags[i]],5)
                #errorbar(xbin,ybin,yerr=ybinerr,fmt=None,color='k',markersize=16)
                #plt.scatter(xbin,ybin,c=sbin,s=300,cmap='jet',vmin=mstarmin,vmax=mstarmax,marker='s')
                hexbin(x[flag],self.s.SIGMA_5[flag],C=col[flag],gridsize=10,yscale='log',cmap=cm)
                a.set_yticklabels(([]))
                text(-0.02,-.2,'$GIM2D \ B/T$',transform=a.transAxes,horizontalalignment='center',fontsize=24)
                mstarax.append(a)

                c=colorbar(ax=mstarax,fraction=.02,shrink=.9,pad=.03)
                c.ax.text(4.2,.5,'$log_{10}(M_*/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)
            plt.axhline(y=10,color='k',ls='--')
            plt.gca().set_yscale('log')
            #plt.colorbar(sp,fraction=.08)
            plt.axis(limits)
            allax.append(plt.gca())


            

        #plt.colorbar(ax=allax,fraction=.05)

        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.eps')       
    def plotLxBT(self,useagn=False,usesersic=False):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(left=.12,bottom=.2,wspace=.25)
        if usesersic:
            x=self.s.SERSIC_N
            limits=[-.1,6.1,41.5,44.5]
            if useagn:
                flag=  self.sampleflag  
            else:
                flag=  self.sampleflag   & ~self.agnflag #& self.membflag
            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            limits=[-.1,.3,41.5,44.5]
            if useagn:
                flag=  self.sampleflag & self.gim2dflag  
            else:
                flag=  self.sampleflag & self.gim2dflag  & ~self.agnflag #& self.membflag
            xl='$GIM2D \ B/T$'
        y=np.log10(self.s.CLUSTER_LX)+43.
        plt.subplot(1,2,1)

        flag = flag & self.dvflag
        sp=plt.scatter(x[flag],y[flag],c=self.sizeratio[flag],s=60,vmin=0.1,vmax=1,cmap='jet_r')
        plt.xlabel(xl)
        plt.ylabel('$log_{10}(L_X) $')
        #plt.gca().set_yscale('log')
        plt.colorbar(sp,fraction=.08)
        plt.text(.95,.9,'$R_e(24)/R_e(r) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        plt.axis(limits)
        plt.subplot(1,2,2)
        sp=plt.scatter(x[flag],y[flag],c=self.logstellarmass[flag],s=60,vmin=9.3,vmax=10.8,cmap='jet')
        plt.xlabel(xl)
        #plt.gca().set_yscale('log')
        #ylabel('$\Delta R/R_{200} $',fontsize=24)
        plt.text(.95,.9,'$log_{10}(M_*) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        plt.colorbar(sp,fraction=.08)
        plt.axis(limits)
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotsigmaBT.eps')       
    def plotphiBT(self,useagn=False,usesersic=False):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(left=.12,bottom=.2,wspace=.2)
        allax=[]
        if usesersic:
            x=self.s.SERSIC_N
            limits=[-.1,6.1,-2,92]
            if useagn:
                flag=  self.sampleflag  & self.membflag
            else:
                flag=  self.sampleflag   & ~self.agnflag & self.membflag#& self.membflag
            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            limits=[-.1,.9,-2,92]
            if useagn:
                flag=  self.sampleflag & self.gim2dflag  & self.membflag
            else:
                flag=  self.sampleflag & self.gim2dflag  & ~self.agnflag & self.membflag #& self.membflag
            xl='$GIM2D \ B/T$'

        plt.subplot(1,2,1)

        flag = flag & self.dvflag
        sp=plt.scatter(x[flag],self.s.CLUSTER_PHI[flag],c=self.sizeratio[flag],s=60,vmin=0.1,vmax=1,cmap='jet_r')
        plt.xlabel(xl)
        plt.ylabel('$\Phi \ (degree) $')
        #plt.gca().set_yscale('log')
        #plt.colorbar(sp,fraction=.08)
        plt.text(.95,.9,'$R_e(24)/R_e(r) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        plt.axis(limits)
        allax.append(plt.gca())
        plt.subplot(1,2,2)
        if useagn:
                flag=  self.sampleflag & self.membflag 
        else:
                flag=  self.sampleflag & self.membflag & ~self.agnflag 
        x=(self.s.SIGMA_5)
        sp=plt.scatter(x[flag],self.s.CLUSTER_PHI[flag],c=(self.sizeratio[flag]),s=60,vmin=.1,vmax=1.,cmap='jet_r')
        plt.xlabel('$\Sigma_5$')
        #plt.gca().set_yscale('log')
        #ylabel('$\Delta R/R_{200} $',fontsize=24)
        plt.text(.95,.9,'$R_e(24)/R_e(r) $',transform=gca().transAxes,horizontalalignment='right',fontsize=16)

        plt.gca().set_xscale('log')
        allax.append(plt.gca())
        plt.ylim(-2,92)
        plt.xlim(.5,60)
        plt.colorbar(ax=allax,fraction=.08)
        #plt.xlim()
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotphiBT.png') 
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotphiBT.eps')       
        
    def plotRevsmag(self,plotsingle=1,sbcutobs=20.,absmagflag=0):
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ m_{24}$',fontsize=20)
            ylabel('$ R_e \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        xmin=10.5
        xmax=16.5

        flag=(self.sampleflag) #& (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        x=(self.s.fcmag1[flag])
        if absmagflag:
            x=x-self.distmod[flag]
            xmin=-24.
            xmax=-16.
        y=self.s.SERSIC_TH50[flag]
        color=self.sb_obs[flag]
        sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)
        if plotsingle:
            colorbar(sp)

        xl=arange(xmin+1,xmax-.3,.1)
        yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
        plot(xl,yl,'k--')
        axis([xmin,xmax,.9,40.])
        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')

    def plotRe24vsrmag(self,plotsingle=1,sbcutobs=20.):
        #print 'hi'
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ m_{24}$',fontsize=20)
            ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        axis([-22.5,-16.5,.9,40.])
        flag=(self.sampleflag)# & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        x=(self.s.ABSMAG[:,4][flag])
        y=self.s.fcre1[flag]*mipspixelscale
        color=self.sb_obs[flag]
        sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)
        if plotsingle:
            colorbar(sp)

        xl=arange(11.5,16.2,.1)
        yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
        plot(xl,yl,'k--')
        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsrmag.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsrmag.png')

    def plotRevsrmag(self,plotsingle=1,sbcutobs=20.):
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ ABS \ r$',fontsize=20)
            ylabel('$ R_e \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        axis([-22.5,-16.5,.9,40.])
        flag=(self.sampleflag) & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        x=(self.s.ABSMAG[:,4][flag])
        y=self.s.SERSIC_TH50[flag]
        color=self.sb_obs[flag]
        sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)
        if plotsingle:
            colorbar(sp)

        xl=arange(11.5,16.2,.1)
        yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
                                              #plot(xl,yl,'k--')

        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')

    def plotRevsmass(self,plotsingle=1,sbcutobs=20.,flag24=1,sbflag=0):
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ log_{10}(M_*/M_\odot) $',fontsize=20)
            if flag24:
                ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            else:
                ylabel('$ R_e(r) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        axis([8.8,12.4,.9,40.])
        flag=(self.sampleflag) & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')

        if flag24:
            y=self.s.fcre1[flag]*mipspixelscale
            erry=self.s.fcre1[flag]*mipspixelscale
        else:
            flag=ones(len(self.s.SERSIC_TH50),'bool')
            y=self.s.SERSIC_TH50[flag]
            #erry=self.s.fcre1[flag]*mipspixelscale
        x=(self.logstellarmass[flag])
        if sbflag:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        else:
            color=log10(self.ssfr[flag])
            v1=ssfrmin
            v2=ssfrmax

        sp=scatter(x,y,s=30,c=color,vmin=v1,vmax=v2)
        if plotsingle:
            colorbar(sp)

        #xl=arange(8,12.2,.1)
        #yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
        #plot(xl,yl,'k--')
        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')
        if plotsingle:
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsmass.eps')
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRe24vsmass.png')


    def plotRisovsmass(self,plotsingle=1,sbcutobs=20.,flag24=1,sbflag=0):
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')

            xlabel('$ log_{10}(M_*/M_\odot) $',fontsize=20)
            if flag24:
                ylabel('$ R_iso(24) \ (arcsec) $',fontsize=20)
            else:
                ylabel('$ R_iso(r) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        axis([8.8,12.4,2,75.])
        flag=(self.isosampleflag) #& (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        x=log10(self.s.STELLARMASS[flag])
        if flag24:
            y=self.isorad.MIPS[flag]
            erry=.3*y
        else:
            y=self.isorad.NSA[flag]
            erry=.2*y
        if sbflag:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        else:
            color=log10(self.ssfr[flag])
            v1=-3.
            v2=-.2
        sp=scatter(x,y,s=30,c=color,vmin=v1,vmax=v2)
        if plotsingle:
            colorbar(sp)

        xl=arange(8,12.5,.1)
        yl=.28*(xl-10)+.9
        plot(xl,10.**yl,'k--')
        #plot(xl,.6*10.**yl,'k--')
        #yl=sqrt(1./pi*10**((sbcutobs-xl)/2.5))#/mipspixelscale
        #plot(xl,yl,'k--')
        axhline(y=mipspixelscale,color='k',ls=':')
        ax=plt.gca()
        ax.set_yscale('log')
        if plotsingle:
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRiso24vsmass.eps')
            savefig(homedir+'/research/LocalClusters/SamplePlots/plotRiso24vsmass.png')


    def plotRe24vsRe(self,plotsingle=1,sbcutobs=20.,prefix=None,usemyflag=0,myflag=None,showerr=0,logy=True,fixPA=False, usedr=False,colorflag=True):
        #print 'hi'
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([10.5,16.5,.9,60.])
            xlabel('$ R_e(r) \ (arcsec)$',fontsize=20)
            ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        if usemyflag:
            flag=myflag
        else:
            flag=self.sampleflag & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        mflag=flag & self.membflag
        nfflag = flag & ~self.membflag & self.dvflag
        ffflag = flag & ~self.membflag & ~self.dvflag
        print 'flag = ',sum(mflag),sum(nfflag),sum(ffflag)
        #x=(self.s.SERSIC_TH50)
        x=(self.gim2d.Rhlr)
        if USE_DISK_ONLY:
            x=self.gim2d.Rd
        if fixPA:
            y=self.s.fcre1*mipspixelscale
            myerr=self.s.fcre1err*mipspixelscale
        else:
            y=self.s.fcre1*mipspixelscale
            myerr=self.s.fcre1err*mipspixelscale
        y=self.s.SUPER_RE1*mipspixelscale*self.DA
        myerr=self.s.SUPER_RE1ERR*mipspixelscale*self.DA
        if plotsingle:
            print 'not printing errorbars'
        else:
            errorbar(x[flag],y[flag],yerr=myerr[flag],fmt=None,ecolor='k')
        #color=self.sb_obs
        #sp=scatter(x[mflag],y[mflag],s=100,marker='o',c=color[mflag],vmin=sbmin,vmax=sbmax)
        #sp=scatter(x[fflag],y[fflag],s=100,marker='s',c=color[fflag],vmin=sbmin,vmax=sbmax)
        mstarmin=9.3
        mstarmax=11

        color=self.logstellarmass
        cblabel='$log_{10}(M_*/M\odot) $'
        v1=mstarmin
        v2=mstarmax
        colormap=cm.jet
        if usedr:
            color=log10(sqrt(self.s.DR_R200**2 + self.s.DELTA_V**2))
            cblabel='$\Delta r/R_{200}$'
            cblabel='$log_{10}(\sqrt(\Delta r/R_{200}^2 + \Delta v/\sigma^2)$'
            v1=-.5
            v2=.7
            colormap=cm.jet_r

        #color=self.s.DR_R200
        #mstarmin=0
        #mstarmax=2
        #sp=scatter(x[flag & ~self.upperlimit],y[flag & ~self.upperlimit],s=100,marker='o',c=color[flag & ~self.upperlimit],vmin=mstarmin,vmax=mstarmax,cmap=cm.jet_r)
        #sp=scatter(x[flag & self.upperlimit],y[flag & self.upperlimit],s=100,marker='v',c=color[flag & self.upperlimit],vmin=mstarmin,vmax=mstarmax,cmap=cm.jet_r)
        #sp=scatter(x[flag ],y[flag ],s=60,marker='o',c=color[flag ],vmin=v1,vmax=v2,cmap=colormap)
        if colorflag:
            plotcolors = ['r','b']
        else:
            plotcolors = ['k','0.5']
        plot(x[mflag ],y[mflag],'ko',color=plotcolors[0],markersize=8,mec='k')
        plot(x[nfflag ],y[nfflag],'ks',color=plotcolors[1],markersize=8,mec='k')
        plot(x[ffflag ],y[ffflag],'ks',color=plotcolors[1],markersize=8,mec='k')
        uflag = flag & self.upperlimit
        print 'number of upper limits = ',sum(uflag)
        uplimits=array(zip(ones(sum(uflag)), zeros(sum(uflag))))
        errorbar(x[uflag],y[uflag],yerr=uplimits.T, lolims=True, fmt='*',ecolor='k',color='k',markersize=12)
        #if 1.*sum(flag & self.upperlimit) > .1:
        #    sp=scatter(x[flag & self.upperlimit],y[flag & self.upperlimit],s=100,marker='v',c=color[flag & self.upperlimit],vmin=mstarmin,vmax=mstarmax,cmap=cm.jet_r)
        #sp=scatter(x[fflag & ~self.upperlimit],y[fflag & ~self.upperlimit],s=60,marker='s',c=color[fflag & ~self.upperlimit],vmin=mstarmin,vmax=mstarmax)
        #sp=scatter(x[fflag & self.upperlimit],y[fflag & self.upperlimit],s=60,marker='v',c=color[fflag & self.upperlimit],vmin=mstarmin,vmax=mstarmax)
        if plotsingle:
            colorbar(sp)
        self.addlines(logflag=logy)
        ax=plt.gca()
        if USE_DISK_ONLY:
            axis([.5,12,-.5,7.3])
        else:
            axis([1,21,.1,21])
        if plotsingle:
            #ax.set_yscale('log')
            #ax.set_xscale('log')
            #axis([1,130.,1,20.])
            savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked.eps')
            savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked.png')


    def plotRiso24vsRiso(self,plotsingle=1,sbcutobs=20.,prefix=None,usemyflag=0,myflag=None,showerr=0,usesb=0):
        #print 'hi'
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([10.5,16.5,.9,60.])
            xlabel('$ R_{iso}(r) \ (arcsec)$',fontsize=20)
            ylabel('$ R_{iso}(24) \ (arcsec) $',fontsize=20)

            #legend(loc='upper left',numpoints=1)

        if usemyflag:
            flag=myflag
        else:
            flag=self.isosampleflag #& ~self.agnflag#& (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        mflag=flag & self.membflag
        fflag = flag & ~self.membflag
        x=(self.isorad.NSA)
        y=self.isorad.MIPS
        myerr=.25*y
        #if plotsingle:
        #    print 'not printing errorbars'
        #else:
        #    errorbar(x[flag],y[flag],yerr=myerr[flag],fmt=None,ecolor='k')
        if usesb:
            color=self.sb_obs
            v1=sbmin
            v2=sbmax
        else:
            color=self.logstellarmass
            v1=mstarmin
            v2=mstarmax
            #plot(x[mflag],y[mflag],'k.')
        sp=scatter(x[mflag],y[mflag],s=60,marker='o',c=color[mflag],vmin=v1,vmax=v2)
        sp=scatter(x[fflag],y[fflag],s=60,marker='^',c=color[fflag],vmin=v1,vmax=v2)
        #if plotsingle:
        #    colorbar(sp)
        xl=arange(0,60)
        plot(xl,xl,'k-')
        #plot(xl,.7*xl,'k--')
        #plot(xl,1.2*xl,'k:')
        ax=plt.gca()
        axis([-.2,30,-.2,30])
        if plotsingle:
            ax.set_yscale('log')
            ax.set_xscale('log')
            axis([1,130.,1,80.])
            savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked.eps')
            savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked.png')


    def plotRe24vsRev2(self,plotsingle=1,sbcutobs=20.,prefix=None,usemyflag=0,myflag=None,showerr=0):
        #print 'hi'
        if plotsingle:
            fig=figure(figsize=(12,6))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([10.5,16.5,.9,60.])
            xlabel('$ R_e(r) \ (arcsec)$',fontsize=20)
            ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        if usemyflag:
            flag=myflag
        else:
            flag=self.sampleflag & ~self.agnflag #(self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        mflag=flag & self.membflag
        fflag = flag & ~self.membflag & self.dvflag
        x=(self.s.SERSIC_TH50)
        y=self.s.fcre1*mipspixelscale
        myerr=self.s.fcre1err*mipspixelscale
        if plotsingle:
            print 'not printing errorbars'
        else:
            errorbar(x[flag],y[flag],yerr=myerr[flag],fmt=None,ecolor='k')

        color=self.logstellarmass
        subplots_adjust(bottom=.15,wspace=.02)
        subplot(1,3,1)
        if showerr:
            errorbar(x[mflag],y[mflag],yerr=myerr[mflag],fmt=None,ecolor='k')
            
        sp=scatter(x[mflag],y[mflag],s=100,marker='o',c=color[mflag],vmin=mstarmin,vmax=mstarmax)
        cx=x[mflag]
        cy=y[mflag]
        ax1=gca()
        self.addlines()
        text(.1,.9,'$Core$',fontsize=18,horizontalalignment='left',transform=ax1.transAxes)
        ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)

        subplot(1,3,2)
        if showerr:
            errorbar(x[fflag],y[fflag],yerr=myerr[fflag],fmt=None,ecolor='k')
        sp=scatter(x[fflag],y[fflag],s=100,marker='^',c=color[fflag],vmin=mstarmin,vmax=mstarmax)
        ax2=gca()
        fx=x[fflag]
        fy=y[fflag]

        self.addlines()
        text(.1,.9,'$External$',fontsize=18,horizontalalignment='left',transform=ax2.transAxes)
        text(-.05,-.14,'$R_e \ NSA \ (arcsec)$',fontsize=22,horizontalalignment='center',transform=ax2.transAxes)
        #text(0,.-.2,'$ R_e(r) \ (arcsec)$',fontsize=20,transform=ax2.transAxes)#,horizontalalignment='center')
        ax2.set_yticklabels(([]))

        colorbar(ax=[ax1,ax2],fraction=.05)
        subplots_adjust(right=0.8)
        #subplot(1,3,3)
        fig.add_axes([.72,.2,.25,.5])
        mybins=arange(0,2,.1)
        s1=cy/cx
        s2=fy/fx
        hist(cy/cx,bins=mybins,histtype='step',color='red',hatch='\\',label='$Core$')#,normed=True)
        hist(fy/fx,bins=mybins,histtype='step',color='blue',hatch='/',label='$External$')#,normed=True)
        xlabel('$R_e(24)/R_e(NSA) $',fontsize=20)
        axis([0,1.6,0,20])
        legend(loc='upper left')
        ks(s1,s2)
        savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked2panel.eps')
        savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked2panel.png')
    def plotsizehist(self, btcut = None,colorflag=False):
        figure(figsize=(6,6))
        plt.subplots_adjust(left=.15,bottom=.2,hspace=.1)
        axes=[]
        plt.subplot(2,1,1)

        axes.append(plt.gca())

        mybins=arange(0,2,.15)
        if btcut == None:
            flag = self.sampleflag
        else:
            flag = self.sampleflag & (self.gim2d.B_T_r < btcut)
        if colorflag:
            colors = ['r','b']
        else:
            colors = ['k','k']
        flags = [flag & self.membflag & ~self.agnflag,flag & ~self.membflag & ~self.agnflag]
        labels = ['$Core$','$External$']
        for i in range(len(colors)):
            plt.subplot(2,1,i+1)
            print 'median ratio for ',labels[i],' = ',np.median(self.sizeratio[flags[i]])
            hist(self.sizeratio[flags[i]],bins=mybins,histtype='stepfilled',color=colors[i],label=labels[i],lw=1.5,alpha=1)#,normed=True)
            plt.legend(loc='upper right')
            plt.axis([0,2,0,22])
            if i < 1:
                plt.xticks(([]))

        
        plt.text(-.2,1,'$N_{gal}$',transform=gca().transAxes,verticalalignment='center',rotation=90,fontsize=24)
        print 'comparing cluster and exterior SF galaxies'
        ks(self.sizeratio[flag & self.membflag & ~self.agnflag],self.sizeratio[flag & ~self.membflag & ~self.agnflag])
        
        plt.xlabel('$ R_{24}/R_d $')
        if btcut == None:
            #plt.ylim(0,20)
            #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizehistblue.eps')
            #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizehistblue.png')
            plt.savefig(figuredir+'fig11a.eps')
            
        else:
            #plt.ylim(0,15)
            plt.subplot(2,1,1)
            plt.title('$ B/T < %2.1f \ Galaxies $'%(btcut),fontsize=20)
            #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizehistblueBTcut.eps')
            #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizehistblueBTcut.png')
            plt.savefig(figuredir+'fig11b.eps')
    def plotsizeMBThist(self):
        figure(figsize=(12,5))
        plt.subplots_adjust(bottom=.2,wspace=.02)
        axes=[]
        plt.subplot(1,3,1)
        axes.append(plt.gca())

        mybins=arange(0,2,.1)
        hist(self.sizeratio[self.sampleflag & self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='red',hatch='\\',label='$Core$')
        hist(self.sizeratio[self.sampleflag & ~self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='blue',hatch='/',label='$External$')
        #plt.title('$ Blue \ Galaxies $',fontsize=20)
        plt.ylabel('$N_{gal}$')
        print 'comparing cluster and exterior SF galaxies'
        ks(self.sizeratio[self.sampleflag & self.membflag & ~self.agnflag],self.sizeratio[self.sampleflag & ~self.membflag & ~self.agnflag])
        plt.axis([0,1.5,0,18])
        plt.legend(loc='upper right')
        plt.xlabel('$ R_e(24)/R_e(r) $')

        plt.subplot(1,3,2)
        axes.append(plt.gca())
        mybins=arange(9.2,11.2,.2)
        hist(self.logstellarmass[self.sampleflag & self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='red',hatch='\\',label='$Core$')
        hist(self.logstellarmass[self.sampleflag & ~self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='blue',hatch='/',label='$External$')
        plt.axis([9.3,11.2,0,18])
        #plt.legend(loc='upper right')
        plt.xlabel('$ log_{10} (M_*/M_\odot) $')
        plt.gca().set_yticklabels(([]))

        plt.subplot(1,3,3)
        axes.append(plt.gca())
        mybins=arange(0,.8,.05)
        hist(self.gim2d.B_T_r[self.gim2dflag & self.sampleflag & self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='red',hatch='\\',label='$Core$')
        hist(self.gim2d.B_T_r[self.gim2dflag & self.sampleflag & ~self.membflag & ~self.agnflag],bins=mybins,histtype='step',color='blue',hatch='/',label='$External$')
        plt.axis([-0.05,.8,0,18])
        #plt.legend(loc='upper right')
        plt.xlabel('$ B/T $')
        plt.gca().set_yticklabels(([]))

        
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeMBThistblue.eps')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeMBThistblue.png')
    def plotRe24vsRev3(self,plotsingle=1,sbcutobs=20.,prefix=None,usemyflag=0,myflag=None,showerr=0):
        #print 'hi'
        if plotsingle:
            figure(figsize=(10,6))
            ax=gca()
            #ax.set_xscale('log')
            #ax.set_yscale('log')
            #axis([10.5,16.5,.9,60.])
            xlabel('$ R_e(r) \ (arcsec)$',fontsize=20)
            ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)
            #legend(loc='upper left',numpoints=1)

        if usemyflag:
            flag=myflag
        else:
            flag=self.sampleflag & (self.sb_obs < sbcutobs)
        #flag=ones(len(self.s.fcmag1),'bool')
        flags=[self.zone1,self.zone2,self.zone3,self.zone4]
        labels=['zone1','zone2','zone3','zone4']
        subplots_adjust(wspace=.02)
        allax=[]
        for i in range(len(flags)):
            subplot(1,4,i+1)
            mflag=flag & flags[i]
            x=(self.s.SERSIC_TH50)
            y=self.s.fcre1*mipspixelscale
            myerr=self.s.fcre1err*mipspixelscale

            color=self.logstellarmass
    

            if showerr:
                errorbar(x[mflag],y[mflag],yerr=myerr[mflag],fmt=None,ecolor='k')
            sp=scatter(x[mflag],y[mflag],s=100,marker='o',c=color[mflag],vmin=mstarmin,vmax=mstarmax)
            if i == 0:

                print x[mflag]
                print y[mflag]
                print myerr[mflag]
                tflag = mflag & (myerr > .001)
                b=fit_slope(x[tflag],y[tflag],yerr=myerr[tflag],yerrflag=1)
            else:
                b=fit_slope(x[mflag],y[mflag],yerr=myerr[mflag],yerrflag=1)
            print labels[i],' intercept = ',b
            print 'number of pts = ',sum(mflag)
            xl=arange(1,30.,1)
            plot(xl,xl*b,'r-')

            ax1=gca()
            self.addlines()
            s='$'+labels[i]+'$'
            text(.1,.9,s,fontsize=18,horizontalalignment='left',transform=ax1.transAxes)
            allax.append(ax1)
            if i == 0:
                ylabel('$ R_e(24) \ (arcsec) $',fontsize=20)

            if i > 0:
                ax1.set_yticklabels(([]))

        colorbar(ax=allax,fraction=.05)
        savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked4panel.eps')
        savefig(homedir+'research/LocalClusters/SamplePlots/plotRe24vsRestacked4panel.png')

    def addlines(self,logflag=True):
        xl=arange(0,100,.5)
        plot(xl,xl,'k-')
        #plot(xl,.68*xl,'k--')
        #plot(xl,.45*xl,'k:')

        if logflag:
            ax=plt.gca()
            ax.set_yscale('log')
            ax.set_xscale('log')
        axis([1,30.,1,30.])


    def plotSFRvsStellarmassv2(self,plotsingle=1):
        if plotsingle:
            figure(figsize=(10,8))
            ax=gca()
            #ax.set_xscale('log')
            ax.set_yscale('log')
            axis([1.e9,1.e12,1.e-3,40.])
            xlabel('$ Stellar \ Mass \ (M_\odot) $',fontsize=20)
            ylabel('$ SFR_{IR} \ (M_\odot/yr) $',fontsize=20)
            legend(loc='upper left',numpoints=1)
        flag=self.mipsflag & ~self.agnflag
        plot(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],'r.',label='_nolegend_')
        xbin,ybin,ybinerr=my.binit(self.logstellarmass[flag],self.s.SFR_ZDIST[flag],7)
        plot(xbin,ybin,'ro',markersize=10,label='Local Clusters')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='r')
        #flag=self.mipsflag & ~self.membflag & ~self.agnflag
        #plot(self.s.STELLARMASS[flag],self.s.SFR_ZDIST[flag],'b.',label='_nolegend_')
        #xbin,ybin,ybinerr=my.binit(self.s.STELLARMASS[flag],self.s.SFR_ZDIST[flag],7)
        #plot(xbin,ybin,'bo',markersize=10,label='External')
        #errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='b')

        #flag=self.mipsflag & self.truncflag & self.sampleflag & ~self.agnflag
        #plot(self.s.STELLARMASS[flag],self.s.SFR_ZDIST[flag],'k.',label='_nolegend_')
        #xbin,ybin,ybinerr=my.binit(self.s.STELLARMASS[flag],self.s.SFR_ZDIST[flag],7)
        #plot(xbin,ybin,'ko',markersize=10,label='Truncated')
        #errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='k')



        
    def compare(self,var,baseflag=None,plotflag=0,xlab=None,plotname=None):
        if baseflag == None:
            f1 = self.membflag & ~self.agnflag
            f2 = ~self.membflag &self.dvflag & ~self.agnflag
        else:
            f1=baseflag & self.membflag & ~self.agnflag
            f2=baseflag & ~self.membflag & ~self.agnflag
        xmin=min(var[baseflag])
        xmax=max(var[baseflag])
        #print 'xmin, xmax = ',xmin,xmax
        print 'KS test comparing members and exterior'
        (D,p)=ks(var[f1],var[f2])

        t=anderson.anderson_ksamp([var[f1],var[f2]])

        print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
        print 'anderson statistic = ',t[0]
        print 'critical values = ',t[1]
        print 'p-value = ',t[2]
        if plotflag:
            plt.figure(figsize=(12,6))
            plt.subplot(1,2,1)
            plt.hist(var[f1],bins=len(var[f1]),cumulative=True,histtype='step',normed=True,label='Member',range=(xmin,xmax),color='r')
            #print var[f2]
            plt.hist(var[f2],bins=len(var[f2]),cumulative=True,histtype='step',normed=True,label='External',range=(xmin,xmax),color='b')
            plt.title('Member vs. External ('+self.prefix+')')
            plt.xlabel(xlab,fontsize=20)
            plt.ylabel('$Cumulative \ Distribution $',fontsize=20)
            legend(loc='lower right')
            ylim(-.05,1.05)
            ax=gca()
            text(.05,.9,'$D = %4.2f$'%(D),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
            text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=14)


        if baseflag == None:
            f1 = self.truncflag
            f2 = ~self.truncflag
        else:
            f1=baseflag & self.truncflag
            f2=baseflag & ~self.truncflag
        print 'KS test comparing truncated and non-truncated spirals'
        (D1,p1)=ks(var[f1],var[f2])

        t=anderson.anderson_ksamp([var[f1],var[f2]])
        print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
        print 'anderson statistic = ',t[0]
        print 'critical values = ',t[1]
        print 'p-value = ',t[2]

        if plotflag:
            plt.subplot(1,2,2)
            plt.hist(var[f1],bins=len(var[f1]),cumulative=True,histtype='step',normed=True,label='Concentrated',range=(xmin,xmax),color='r')
            plt.hist(var[f2],bins=len(var[f2]),cumulative=True,histtype='step',normed=True,label='Normal',range=(xmin,xmax),color='b')
            title('Concentrated vs. Normal ('+self.prefix+')')
            plt.xlabel(xlab,fontsize=20)
            plt.ylabel('$Cumulative \ Distribution $',fontsize=20)
            legend(loc='lower right')
            ylim(-.05,1.05)
            ax=gca()
            text(.05,.9,'$D = %4.2f$'%(D1),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
            text(.05,.8,'$p = %5.4f$'%(p1),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
            figname=homedir+'research/LocalClusters/SamplePlots/'+plotname+'_'+str(self.prefix)+'_ks.png'
            plt.savefig(figname)
        return D, p, D1, p1

    def compareiso(self,var,baseflag=None,plotflag=0,xlab=None,plotname=None):
         if baseflag == None:
             baseflag = self.isosampleflag
         else:
             baseflag = baseflag  & self.isosampleflag
         f1 = self.membflag & self.isosampleflag
         f2 = ~self.membflag& self.isosampleflag

         xmin=min(var[baseflag])
         xmax=max(var[baseflag])
         #print 'xmin, xmax = ',xmin,xmax
         print 'KS test comparing members and exterior'
         (D,p)=ks(var[f1],var[f2])

         t=anderson.anderson_ksamp([var[f1],var[f2]])

         print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
         print 'anderson statistic = ',t[0]
         print 'critical values = ',t[1]
         print 'p-value = ',t[2]
         if plotflag:
             plt.figure(figsize=(12,6))
             plt.subplots_adjust(bottom=.15,left=.1,right=.95,top=.9,wspace=.25)
             plt.subplot(1,2,1)
             plt.hist(var[f1],bins=len(var[f1]),cumulative=True,histtype='step',normed=True,label='Member',range=(xmin,xmax),color='r')
             #print var[f2]
             plt.hist(var[f2],bins=len(var[f2]),cumulative=True,histtype='step',normed=True,label='External',range=(xmin,xmax),color='b')
             plt.title('Member vs. External ('+self.prefix+')')
             plt.xlabel(xlab,fontsize=20)
             plt.ylabel('$Cumulative \ Distribution $',fontsize=20)
             legend(loc='lower right')
             ylim(-.05,1.05)
             ax=gca()
             text(.05,.9,'$D = %4.2f$'%(D),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=14)


         if baseflag == None:
             baseflag=self.isosampleflag
         else:
             baseflag=baseflag & self.isosampleflag
         f1 = baseflag & self.isotruncflag 
         f2 = baseflag & ~self.isotruncflag 
         print 'KS test comparing truncated and non-truncated spirals'
         (D1,p1)=ks(var[f1],var[f2])

         t=anderson.anderson_ksamp([var[f1],var[f2]])
         print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
         print 'anderson statistic = ',t[0]
         print 'critical values = ',t[1]
         print 'p-value = ',t[2]

         if plotflag:
             plt.subplot(1,2,2)
             plt.hist(var[f1],bins=len(var[f1]),cumulative=True,histtype='step',normed=True,label='Truncated',range=(xmin,xmax),color='r')
             plt.hist(var[f2],bins=len(var[f2]),cumulative=True,histtype='step',normed=True,label='Normal',range=(xmin,xmax),color='b')
             title('Truncated vs. Normal ('+self.prefix+')')
             plt.xlabel(xlab,fontsize=20)
             plt.ylabel('$Cumulative \ Distribution $',fontsize=20)
             legend(loc='lower right')
             ylim(-.05,1.05)
             ax=gca()
             text(.05,.9,'$D = %4.2f$'%(D1),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
             text(.05,.8,'$p = %5.4f$'%(p1),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
             figname=homedir+'research/LocalClusters/SamplePlots/'+plotname+'_'+str(self.prefix)+'_ks.png'
             plt.savefig(figname)
         return D, p, D1, p1

    def plotHAEW(self):
         keepflag=self.truncflag & self.sdssspecflag & self.sampleflag & ~self.agnflag
         d1=self.s.HAEW[keepflag]
         keepflag=~self.truncflag & self.sdssspecflag & self.sampleflag & ~self.agnflag
         d2=self.s.HAEW[keepflag]
         print 'KS comparing HA EW of truncated and non-truncated spirals (AGNFLAG)'
         D,p=ks(d1,d2)


         keepflag=self.truncflag & self.sdssspecflag & self.sampleflag & ~self.AGNKEWLEY
         d1=self.s.HAEW[keepflag]
         keepflag=~self.truncflag & self.sdssspecflag & self.sampleflag & ~self.AGNKEWLEY
         d2=self.s.HAEW[keepflag]
         print 'KS comparing HA EW of truncated and non-truncated spirals (AGNKEWLEY)'
         D,p=ks(d1,d2)

         keepflag=self.truncflag & self.sdssspecflag & self.sampleflag & ~self.agnflag
         d1=self.s.HAEW[keepflag]
         keepflag=~self.truncflag & self.sdssspecflag & self.sampleflag & ~self.agnflag
         d2=self.s.HAEW[keepflag]
         print 'KS comparing HA EW of truncated and non-truncated spirals (AGNFLAG)'
         D,p=ks(d1,d2)
         figure()#figsize=(10,7))
         xmin=-5.
         xmax=140.
         plt.hist(d1,bins=len(d1),cumulative=True,range=(xmin,xmax),histtype='step',normed=True,label='Truncated',color='r')
         plt.hist(d2,bins=len(d2),cumulative=True,range=(xmin,xmax),histtype='step',normed=True,label='Normal',color='b')
         ax=gca()
         plt.legend(loc='lower right')
         text(.05,.9,'$D = %4.2f$'%(D),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
         text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=14)

         plt.axis([xmin,xmax,-.05,1.05])
         plt.xlabel(r'$ H\alpha \ EW \ (Angstrom) $',fontsize=20)
         plt.ylabel(r'$ Cumulative \ Distribution$',fontsize=20)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/HalphaCumulative.png')


    def plotagn(self):
         figure()
         clf()
         keepflag=self.sampleflag & self.sdssspecflag
         keepflag=self.sdssspecflag
         x=np.log10(self.s.N2FLUX/self.s.HAFLUX)
         y=np.log10(self.s.O3FLUX/self.s.HBFLUX)

         sp=plt.scatter(x[keepflag],y[keepflag],s=60,c=(self.sizeratio[keepflag]), cmap=cm.jet_r,vmax=1,label='_nolabel_')
         plt.colorbar(sp)
         #plt.plot(x[self.agnkewley],y[self.agnkewley],'co',markersize=12, label='_nolabel_')

         plt.plot(x[self.AGNKAUFF & keepflag],y[self.AGNKAUFF & keepflag],'k*',mec='None',markersize=4, label='_nolabel_')
         plt.plot(x[self.agnflag & keepflag],y[self.agnflag & keepflag],'k*',mec='None',markersize=14, label='_nolabel_')
         #plt.plot(x[self.agnflag],y[self.agnflag],'ro',markersize=4, label='_nolabel_')
         #draw AGN diagnostic lines
         x=arange(-3,.4,.01)
         y=(.61/(x-.47)+1.19)
         #Kewley
         plot(x,y,'c',label='Kewley & Dopita 2002')
         x=arange(-3,.0,.01)
         y =(.61/(x-.05)+1.3)#Kauffman 2003?
         plot(x,y,'g',label='Kauffmann et al. 2003')
         y = ((-30.787+(1.1358*x)+((.27297)*(x)**2))*tanh(5.7409*x))-31.093 #Stasinska 2006	    
         plot(x,y,'r',label='Stasinska et al. 2006')

         plt.axis([-1.5,.49,-1.,1.5])
         plt.xlabel(r'$\log_{10}(NII/H\alpha)$',fontsize=20)
         plt.ylabel(r'$\log_{10}(OIII/H\beta)$',fontsize=20)
         plt.legend(loc='upper left',prop={'size':12})
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/AGNclassification.png')

    def plotagnv2(self):
         figure()
         clf()
         keepflag=self.emissionflag #sampleflag & self.sdssspecflag
         x=np.log10(self.s.N2FLUX/self.s.HAFLUX)
         y=np.log10(self.s.O3FLUX/self.s.HBFLUX)
         plot(x[keepflag],y[keepflag],'ko',color='0.5',mec='0.5',alpha=0.5,label='_nolabel_')
         keepflag=self.emissionflag & self.sampleflag & ~self.truncflag
         plot(x[keepflag],y[keepflag],'bo',label='Normal')
         keepflag=self.emissionflag & self.sampleflag & self.truncflag
         plot(x[keepflag],y[keepflag],'ro',label='Truncated')

         #keepflag=self.emissionflag & self.sampleflag & self.truncflag & ~self.agnflag
         #plot(x[keepflag],y[keepflag],'g.',label='_nolabel_')
 #draw AGN diagnostic lines
         x=np.arange(-2,.4,.01)
         y=(.61/(x-.47)+1.19)
         #Kewley
         plt.plot(x,y,'c',label='Kewley & Dopita 2002')
         y =(.61/(x-.05)+1.3)#Kauffman 2003?
         plt.plot(x[x<0],y[x<0],'g',label='Kauffmann et al. 2003')
         y = ((-30.787+(1.1358*x)+((.27297)*(x)**2))*np.tanh(5.7409*x))-31.093 #Stasinska 2006	    
         plt.plot(x,y,'r',label='Stasinska et al. 2006')
         plt.axis([-1.5,.52,-1.5,1.5])
         plt.xlabel(r'$\log_{10}(NII/H\alpha)$',fontsize=20)
         plt.ylabel(r'$\log_{10}(OIII/H\beta)$',fontsize=20)
         plt.legend(loc='upper left',prop={'size':12},numpoints=1)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/AGNclassification.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/AGNclassification.eps')
    def plotwise(self):
         figure(figsize=(12,6))
         clf()
         keepflag=self.sampleflag & self.sdssspecflag #& self.wiseflag
         x=self.s.W3MAG_3-self.s.W4MAG_3
         y=self.s.W1MAG_3-self.s.W2MAG_3
         plt.subplots_adjust(wspace=.25,hspace=.35)
         plt.subplot(1,2,1)

         sp=plt.scatter(x[keepflag],y[keepflag],s=30,c=(self.sumagnflag[keepflag]), cmap=cm.jet,vmax=3,label='_nolabel_')

         #plt.xlabel(r'$ [5.8] - [8.0]$',fontsize=20)
         #plt.ylabel(r'$ [3.6] - [4.5]$',fontsize=20)
         plt.xlabel(r'$ [12] - [22]$',fontsize=20)
         plt.ylabel(r'$ [3.4] - [4.5]$',fontsize=20)
         plt.axis([1,4.,-.3,.5])
         plt.colorbar(sp)
         plt.title('colorbar = AGN')
         plt.subplot(1,2,2)
         sp=plt.scatter(x[keepflag],y[keepflag],s=30,c=(self.sizeratio[keepflag]), cmap=cm.jet_r,vmax=1,label='_nolabel_')
         plt.colorbar(sp)
         plt.axis([1,4.,-.3,.5])
         plt.xlabel(r'$ [5.8] - [8.0]$',fontsize=20)
         plt.title('colorbar = size ratio')
         #plt.plot(x[self.agnkewley],y[self.agnkewley],'co',markersize=12, label='_nolabel_')
         #plt.plot(x[self.agnflag],y[self.agnflag],'go',markersize=8, label='_nolabel_')
         #plt.plot(x[self.agnflag],y[self.agnflag],'ro',markersize=4, label='_nolabel_')


         plt.legend(loc='upper left',prop={'size':12})
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/WISEcolor.png')

    def plotwisecolorvssize(self):
         figure(figsize=(10,4))
         clf()
         #keepflag=self.sampleflag & self.wiseflag #& self.sbflag
         keepflag=self.wiseflag #& self.sbflag
         #x=self.s.W2MAG_3-self.s.W3MAG_3
         x=self.s.W1MAG_3-self.s.W2MAG_3
         y=self.sizeratio
         allax=[]
         plt.subplots_adjust(bottom=.15,left=.1,right=.95,wspace=.3,hspace=.35)
         plt.subplot(1,2,1)
         allax.append(gca())
         sp=plt.scatter(x[keepflag],y[keepflag],s=30,c=(self.logstellarmass[keepflag]), vmin=mstarmin,vmax=mstarmax,cmap=cm.jet,label='SF')

         #plt.xlabel(r'$ [5.8] - [8.0]$',fontsize=20)
         #plt.ylabel(r'$ [3.6] - [4.5]$',fontsize=20)
         plt.xlabel(r'$ WISE \ [3.4] - [4.6]$',fontsize=20)
         #plt.ylabel(r'$ [3.4] - [4.5]$',fontsize=20)
         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.axis([-1,1,-.1,2])
         plt.axvline(x=0.8,ls='--')
         #plt.colorbar(sp)
         #plt.title('colorbar = AGN')
         plt.legend()
         subplot(1,2,2)
         allax.append(gca())
         keepflag= self.agnflag &  self.wiseflag
         y=self.sizeratio

         sp=plt.scatter(x[keepflag],y[keepflag],s=30,c=(self.logstellarmass[keepflag]), vmin=mstarmin,vmax=mstarmax,cmap=cm.jet,label='AGN')
         plt.colorbar(sp,ax=allax,fraction=.1)
         #plt.axis([1,4.,-.3,.5])
         plt.axis([-1,1,-.1,2])
         plt.axvline(x=0.8,ls='--')
         plt.legend()
         plt.ylabel(r'$ R_{iso}(24)/R_{iso}(r)$',fontsize=20)
         plt.xlabel(r'$ WISE \ [3.4] - [4.6]$',fontsize=20)
         #plt.title('colorbar = M*')
         #plt.plot(x[self.agnkewley],y[self.agnkewley],'co',markersize=12, label='_nolabel_')
         #plt.plot(x[self.agnflag],y[self.agnflag],'go',markersize=8, label='_nolabel_')
         #plt.plot(x[self.agnflag],y[self.agnflag],'ro',markersize=4, label='_nolabel_')


         #plt.legend(loc='upper left',prop={'size':12})
         #plt.savefig(homedir+'research/LocalClusters/SamplePlots/WISEcolorsize.png')

    def sizehist(self):
         figure()
         clf()
         keepflag=self.sampleflag #& self.sdssspecflag #& self.wiseflag
         t=(self.sizeratio[keepflag])
         plt.hist(t,bins=40)

         plt.xlabel(r'$ log_{10}(R_e(24)/R_e(r))$',fontsize=20)
         plt.ylabel(r'$ Number$',fontsize=20)
         plt.axvline(x=.5,ls='--',color='r')
         xlim(0,2)
         #plt.axis([1,4.,-.3,.5])

         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizehist.png')

    def sizeRe(self,sbcutobs=21.):
         figure(figsize=(10,8))
         clf()
         flag=(~self.s['cnumerical_error_flag24']) & (self.sb_obs < sbcutobs) & (~self.agnflag)
         y=(self.sizeratio[flag])
         x=self.s.SERSIC_TH50[flag]
         color=self.sb_obs[flag]
         sp=scatter(x,y,s=30,c=color)
         colorbar(sp)

         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.xlabel(r'$ R_e(r)$',fontsize=20)
         ax=plt.gca()
         ax.set_xscale('log')
         ax.set_yscale('log')
         plt.axhline(y=.5,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         #xlim(0,2)
         plt.axis([1,150.,.01,5])
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeReall.png')
    def plotsizedr(self,sbcutobs=20.5,usemass=1,usecolor=0,isoflag=0,blueflag=True):
         figure(figsize=plotsize_single)
         subplots_adjust(bottom=.15)
         plt.clf()
         #flag=(~self.s['cnumerical_error_flag24']) & (self.sb_obs < sbcutobs) & self.sampleflag
         if blueflag:
            flag=  self.bluesampleflag & self.dvflag & ~self.agnflag
         else:
            flag=  self.sampleflag & self.dvflag & ~self.agnflag
         if isoflag:
             flag=self.isosampleflag & self.dvflag
             flag=self.sampleflag & self.dvflag
             y=self.isorad.MIPS[flag]/self.isorad.NSA[flag]
             ymin=0
             ymax=2
             ylab='$R_{iso}(24)/R_{iso}(r)$'

         else:
             y=(self.sizeratio[flag])
             yerr = self.sizeratioERR[flag]
         x=self.s.DR_R200[flag]
         if usemass:
             color=(self.logstellarmass[flag])
             sp=plt.scatter(x,y,s=50,c=color,vmin=9.3,vmax=11.)


         elif usecolor:
             color=self.s.ABSMAG[:,3][flag]-self.s.ABSMAG[:,4][flag]
             sp=plt.scatter(x,y,s=50,c=color,vmin=min(color),vmax=max(color))

         else:
             color=self.sb_obs[flag]
             sp=plt.scatter(x,y,s=50,c=color,vmin=sbmin,vmax=sbmax)
         errorbar(x,y,yerr,fmt=None,ecolor='0.5')
         colorbar(sp,fraction=.08)

         if isoflag:
             plt.ylabel(ylab,fontsize=24)
         else:
             plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=18)
         plt.xlabel(r'$ \Delta R/R_{200}$',fontsize=18)
         ax=plt.gca()
         plt.xticks(fontsize=12)
         plt.yticks(fontsize=12)
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.axis([0,3.5,ymin,ymax])
         else:
             plt.axis([0,3.5,.01,2])
         xbin,ybin,ybinerr=my.binitbins_weighted(0,3.5,7,x,y,yerr)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=20)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exteriorflag = self.sampleflag & ~self.dvflag
         if blueflag:
             exteriorflag = self.bluesampleflag & ~self.membflag & (self.s.DR_R200 > 1.5)
         exterior=ws.weighted_mean(self.sizeratio[exteriorflag],weights=1./self.sizeratioERR[exteriorflag])
         fstd=std(s.s.SIZE_RATIO[exteriorflag])/np.sqrt(1.*sum(exteriorflag))
         print 'exterior mean (far exterior) = ',exterior
         plt.axhline(y=exterior,ls='-',color='k')
         plt.axhline(y=exterior-fstd,ls='--',color='k')
         plt.axhline(y=exterior+fstd,ls='--',color='k')
         #plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedr.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedr.eps')

    def plotsizeRe(self,sbcutobs=20.,usemass=0,usecolor=0):
         figure(figsize=(10,8))
         clf()
         flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
         flag= (self.sb_obs < sbcutobs) & self.sampleflag & self.dvflag & (self.sb_obs > 16)
         y=(self.sizeratio[flag])
         x=self.s.SERSIC_TH50[flag]
         if usemass:
             color=log10(self.s.STELLARMASS[flag])
             sp=scatter(x,y,s=30,c=color,vmin=9,vmax=11.5)

         elif usecolor:
             color=self.s.ABSMAG[:,3][flag]-self.s.ABSMAG[:,4][flag]
             sp=scatter(x,y,s=30,c=color,vmin=min(color),vmax=max(color))

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.xlabel(r'$R_e(r) \ (arcsec)$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.axis([0,30,.01,1.5])
         xbin,ybin,ybinerr=my.binitbins(0,20,7,x,y)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=mean(ybin[4:len(ybin)])
         print 'exterior mean = ',exterior
         plt.axhline(y=exterior,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedr.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedr.eps')

    def plotmassdr(self,sbcutobs=20.,usemass=0,usecolor=0):
         figure(figsize=(10,8))
         clf()
         flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
         flag= (self.sb_obs < sbcutobs) & self.sampleflag
         y=log10(self.s.STELLARMASS[flag])
         x=self.s.DR_R200[flag]
         if usemass:
             color=log10(self.s.STELLARMASS[flag])
             sp=scatter(x,y,s=30,c=color,vmin=9,vmax=11.5)

         elif usecolor:
             color=self.s.ABSMAG[:,3][flag]-self.s.ABSMAG[:,4][flag]
             sp=scatter(x,y,s=30,c=color,vmin=min(color),vmax=max(color))

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(r'$ M_* \ (M/M_\odot)$',fontsize=20)
         plt.xlabel(r'$ \Delta R/R_{200}$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.axis([0,3.5,9,12])
         xbin,ybin,ybinerr=my.binit(x,y,5)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=mean(ybin[4:len(ybin)])
         print 'exterior mean = ',exterior
         plt.axhline(y=exterior,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/massdr.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/massdr.eps')


    def plotRedr(self,sbcutobs=20.,usemass=0,usecolor=0):
         figure(figsize=(10,8))
         clf()
         flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
         flag= (self.sb_obs < sbcutobs) & self.sampleflag
         y=(self.s.SERSIC_TH50[flag])
         x=self.s.DR_R200[flag]
         if usemass:
             color=log10(self.s.STELLARMASS[flag])
             sp=scatter(x,y,s=30,c=color,vmin=9,vmax=11.5)

         elif usecolor:
             color=self.s.ABSMAG[:,3][flag]-self.s.ABSMAG[:,4][flag]
             sp=scatter(x,y,s=30,c=color,vmin=min(color),vmax=max(color))

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(r'$ R_e(r) \ (arcsec)$',fontsize=20)
         plt.xlabel(r'$ \Delta R/R_{200}$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.axis([0,3.5,0,30])
         xbin,ybin,ybinerr=my.binitbins(0,3.5,7,x,y)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=mean(ybin)
         print 'exterior mean = ',exterior
         plt.axhline(y=exterior,ls='--',color='k')
         #plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/ReNSAdr.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/ReNSAdr.eps')


    def plotsizemass(self,sbcutobs=20.,usemass=0):
         figure(figsize=(10,8))
         clf()
         flag= (self.sb_obs < sbcutobs) & self.sampleflag & self.membflag
         y=(self.sizeratio[flag])
         x=(self.logstellarmass[flag])
         if usemass:
             color=log10(self.s.STELLARMASS[flag])
             sp=scatter(x,y,s=30,c=color,vmin=9,vmax=11.5)

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.xlabel(r'$ M_* \ (M_\odot)$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         #plt.axis([9,12,.01,1.5])
         xbin,ybin,ybinerr=my.binit(x,y,5)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=.682
         plt.axhline(y=exterior,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.eps')

    def plotsizemassv2(self,sbcutobs=20.):
         figure(figsize=(12,8))
         clf()
         flag= (self.sb_obs < sbcutobs) & self.sampleflag
         yall=[(self.isorad.NSA[flag]),(self.isorad.MIPS[flag]),(self.s.SERSIC_TH50[flag]),(self.s.fcre1[flag]*mipspixelscale)]
         ylabels=['$ R_{iso}(r) $','$ R_{iso}(24) $','$ R_{e}(r) $','$ R_{e}(24) $']
         x=(self.logstellarmass[flag])
         sb=self.sb_obs[flag]

         subplots_adjust(wspace=.3,hspace=.3)
         color=self.sb_obs[flag]
         for i in range(len(yall)):
             subplot(2,2,i+1)
             y=yall[i]
             ax=gca()
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)
             xbin,ybin,ybinerr=my.binit(x,y,5)

             plt.plot(xbin,ybin,'ko',markersize=12)
             if i == 0:
                 xref=xbin
                 yref=ybin
             else:
                 plot(xref,yref,'r')
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
             spearman(x,y)
             if i == 3:
                 xbin,ybin,ybinerr=my.binit(x[sb > 16],y[sb > 16],5)

                 plt.plot(xbin,ybin,'o',color='0.7',markersize=12)
                 spearman(x[sb > 16],y[sb > 16])
                 axhline(y=mipspixelscale,ls='--',color='k')
             plt.xlabel(r'$ log_{10}(M_* \ (M_\odot))$',fontsize=20)
             plt.ylabel(ylabels[i],fontsize=20)
             gca().set_yscale('log')
             axis([7.5,12,1,60])
             #colorbar(sp)



         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')


         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.eps')

    def plotsizesb_all(self,sbcutobs=20.,usemass=0):
         figure(figsize=(10,8))
         clf()
         
         flag = self.sampleflag
         y=(self.sizeratio[flag])
         x=(self.sb_obs[flag])
         if usemass:
             color=(self.logstellarmass[flag])
             sp=scatter(x,y,s=30,c=color,vmin=mstarmin,vmax=mstarmax)

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.xlabel(r'$ \mu $',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.axis([sbmin,20.5,.01,1.5])
         xbin,ybin,ybinerr=my.binit(x,y,5)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=.682
         plt.axhline(y=exterior,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemass.eps')

    def plotsizessfr(self,sbcutobs=20.5,usemass=1,isoflag=0):
         figure(figsize=(10,8))
         clf()
         flag= (self.sb_obs < sbcutobs) & self.sampleflag & ~self.agnflag #& self.dvflag
         #flag = self.sampleflag
         x=(self.sizeratio)
         xerr=self.sizeratioERR
         #x=self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
         #xerr=self.s.fcre1err*mipspixelscale/self.s.SERSIC_TH50
         xlab=r'$ R_e(24)/R_e(r)$'
         if isoflag:
             flag=self.isosampleflag & ~self.agnflag
             y=(self.isosize[flag])
             xlab='$R_{iso}(24)/R_{iso}(r) $'
         y=(self.ssfr)
         yerrp=(self.ssfrerr)
         yerrm=(self.ssfrerr)
         yerrpm=array(zip(yerrp,yerrm),'f')
         if usemass:
             color=(self.logstellarmass)
             sp=scatter(x[flag],y[flag],s=80,c=color[flag],vmin=9,vmax=11.5,cmap=cm.jet)
             errorbar(x[flag],y[flag],yerr=yerrpm[flag].T,xerr=xerr[flag],fmt=None,ecolor='k')
             plot(x[flag & self.AGNKAUFF],y[flag & self.AGNKAUFF],'k*',mec='k',mfc='None',markersize=20)
             #color=(self.logstellarmass[flag & self.membflag])
             #sp=scatter(log10(self.ssfr[flag&self.membflag]),self.sizeratio[flag&self.membflag],s=120,c=color,marker='s',vmin=9,vmax=11.5)

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp,fraction=.08)
         plt.axhline(y=(.08e-9),ls='-',color='k',lw=3)
         gca().set_yscale('log')
         plt.xlabel(xlab,fontsize=26)
         plt.ylabel(r'$ sSFR \ (yr^{-1}) $',fontsize=26)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         #plt.axis([sbmin,20.5,.01,1.5])
         xbin,ybin,ybinerr=my.binit(x,y,5)
         #print ybin
         #axis([-11.5,-9,0,2.7])
         axis([0,2.7,10.**-11.5,10.**-9])
         ax.tick_params(axis='both', which='major', labelsize=16)
         #plt.plot(xbin,ybin,'ko',markersize=12)
         #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         #exterior=.682
         #plt.axhline(y=exterior,ls='--',color='k')
         #plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesSFR.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesSFR.eps')
    def plotsizessfrv2(self,usemass=True):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(left=.1,bottom=.2,wspace=.08)
        #plt.subplots_adjust(left=.1,bottom=.2,hspace=.01)
        plt.clf()
        flag=  self.sampleflag & ~self.agnflag #& self.dvflag
        #flag = self.sampleflag
        y=(self.sizeratio)
        yerr=self.sizeratioERR
        #x=self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
        #xerr=self.s.fcre1err*mipspixelscale/self.s.SERSIC_TH50
        xlab=r'$ R_e(24)/R_e(r)$'
        x=(self.ssfr)/.08e-9
        xerrp=(self.ssfrerr)/.08e-9
        xerrm=(self.ssfrerr)/.08e-9
        xerrpm=array(zip(xerrp,xerrm),'f')
        if usemass:
            color=(self.logstellarmass)
            v1=9.2
            v2=11
             #plot(x[flag & self.AGNKAUFF],y[flag & self.AGNKAUFF],'k*',mec='k',mfc='None',markersize=20)
             #color=(self.logstellarmass[flag & self.membflag])
             #sp=scatter(log10(self.ssfr[flag&self.membflag]),self.sizeratio[flag&self.membflag],s=120,c=color,marker='s',vmin=9,vmax=11.5)

        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmin
        plt.subplot(1,2,1)
        sp=plt.scatter(x[flag],y[flag],s=50,c=color[flag],vmin=v1,vmax=v2,cmap=cm.jet)
        #errorbar(x[flag],y[flag],yerr=yerr[flag].T,xerr=xerrp[flag],fmt=None,ecolor='k')
        ax1=gca()
        plt.ylabel(xlab)#,fontsize=26)
        subplot(1,2,2)
        flag=  self.sampleflag & self.agnflag #& self.dvflag
        sp=scatter(x[flag],y[flag],s=50,c=color[flag],vmin=v1,vmax=v2,cmap=cm.jet)
        #errorbar(x[flag],y[flag],yerr=yerr[flag].T,xerr=xerrp[flag],fmt=None,ecolor='k')
        ax2=gca()
        ax2.set_yticklabels(([]))
        allax=[ax1,ax2]
        colorbar(ax=allax,fraction=.03)
        for a in allax:
            plt.sca(a)
            a.set_xscale('log')
            plt.xlabel(r'$ sSFR/sSFR_{MS}  $')#,fontsize=26)
            axis([.01,10,0,2])
        #spearman(x,y)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesSFR.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesSFR.eps')

    def plotsizeBA(self,sbcutobs=20.,usemass=0,usecolor=0,isoflag=0):
         figure(figsize=(10,8))
         clf()
         #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
         flag=  self.sampleflag & ~self.agnflag
         y=(self.sizeratio[flag])
         ylab='$R_{e}(24)/R_{e}(r) $'
         if isoflag:
             flag=self.isosampleflag & ~self.agnflag
             y=self.isosize[flag]
             ylab='$R_{iso}(24)/R_{iso}(r) $'
         x=self.s.SERSIC_BA[flag]
         if usemass:
             color=log10(self.s.STELLARMASS[flag])
             sp=scatter(x,y,s=30,c=color,vmin=9,vmax=11.5)

         elif usecolor:
             color=self.s.ABSMAG[:,3][flag]-self.s.ABSMAG[:,4][flag]
             sp=scatter(x,y,s=30,c=color,vmin=min(color),vmax=max(color))

         else:
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=30,c=color,vmin=sbmin,vmax=sbmax)

         colorbar(sp)

         plt.ylabel(ylab,fontsize=20)
         plt.xlabel(r'$ NSA \ B/A$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.axis([0,1.,.01,1.5])
         xbin,ybin,ybinerr=my.binit(x,y,5)
         print ybin
         plt.plot(xbin,ybin,'ko',markersize=12)
         plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         exterior=mean(ybin[4:len(ybin)])
         print 'exterior mean = ',exterior
         plt.axhline(y=exterior,ls='--',color='k')
         plt.axhline(y=1,ls='-',color='k')
         spearman(x,y)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBA.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBA.eps')



    def plotsizeBTold(self,sbcutobs=20.,usemass=1,usecolor=0,usesersic=False,useagn=False):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2,left=.12)
        plt.clf()
        #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
        y=(self.sizeratio)
        if usesersic:
            x=self.s.SERSIC_N
            axrange=[-.1,6.,.01,1.5]
            if useagn:
                flag=  self.sampleflag   
            else:
                flag=  self.sampleflag   & ~self.agnflag #& self.membflag
            xl='$N\_SERSIC$'
        else:
            x=self.gim2d.B_T_r
            axrange=[-.1,1.,.01,1.5]
            if useagn:
                flag=  self.sampleflag & self.gim2dflag  
            else:
                flag=  self.sampleflag & self.gim2dflag  & ~self.agnflag #& self.membflag
            xl='$GIM2D \ B/T$'
        plt.subplot(1,2,1)

        allax=[]
        if usemass:
            color=(self.logstellarmass)
            v1=9.3
            v2=11.
        elif usecolor:
            color=self.s.ABSMAG[:,3]-self.s.ABSMAG[:,4]
            v1=min(color)
            v2=max(color)
        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        allax.append(plt.gca())
        plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=20)
        plt.title('$SF \ Galaxies $',fontsize=20)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.subplot(1,2,2)
        flag=  self.sampleflag & self.gim2dflag  & self.agnflag #& self.membflag
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        plt.title('$AGN $',fontsize=20)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        allax.append(plt.gca())
        for a in allax:
            plt.sca(a)
            plt.xlabel(r'$ GIM2D \ B/T$')#,fontsize=20)
            plt.axis([-.1,1.,.01,1.5])
            #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
            #print ybin
            #plt.plot(xbin,ybin,'ko',markersize=18)
            #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

        plt.colorbar(ax=allax,fraction=.03)

        #xlim(0,2)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTold.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTold.eps')
    def plotsizeclusterphi2(self,sbcutobs=20.,usemass=0,usecolor=1,useagn=False):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2,left=.12,wspace=.02)
        plt.clf()
        #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
        y=(self.sizeratio)
        x=self.s.CLUSTER_PHI
        limits=[-5,95,.01,1.5]
        exteriorflag=self.sampleflag & self.dvflag & ~self.membflag  & ~self.agnflag #& self.membflag
        exterior=mean(y[exteriorflag])
        exteriorerr=std(y[exteriorflag])/sqrt(1.*sum(exteriorflag))

        xl='$\psi \ (degrees)$'
        plt.subplot(1,2,1)
        flag=  self.sampleflag & self.membflag  & ~self.agnflag #& self.membflag
        allax=[]
        if usemass:
            color=(self.logstellarmass)
            v1=9.3
            v2=11.
        elif usecolor:
            color=self.s.ABSMAG[:,2]-self.s.ABSMAG[:,4]
            v1=1
            v2=3.
        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        plt.axhline(y=exterior,ls='-',color='k')
        plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
        plt.axhline(y=exterior-exteriorerr,ls='--',color='k')

        allax.append(plt.gca())
        plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=20)
        plt.title('$SF \ Galaxies $',fontsize=20)
        #rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        #f2=flag & (self.logstellarmass < 10.4) #& (self.gim2d.B_T_r < 0.2)
        #print 'for log(M) < 10.4 galaxies only:'
        #rho,p=spearman(x[f2],y[f2])
        f2=flag & self.blueflag #
        print 'for blue galaxies only:'
        rho,p=spearman(x[f2],y[f2])
        print 'ks test comparing psi < 30 and psi > 30'
        ks(y[flag & (x < 30.)],y[flag & (x>30)])

        plt.subplot(1,2,2)
        flag=  self.sampleflag & self.membflag  & self.agnflag #& self.membflag
        exteriorflag=  self.sampleflag & ~self.membflag & self.dvflag  & self.agnflag #& self.membflag
        exterior=mean(y[exteriorflag])
        exteriorerr=std(y[exteriorflag])/sqrt(1.*sum(exteriorflag))
        plt.axhline(y=exterior,ls='-',color='k')
        plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
        plt.axhline(y=exterior-exteriorerr,ls='--',color='k')

        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        plt.title('$AGN $',fontsize=20)
        #rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        ax.set_yticklabels(([]))
        #plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        #plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        allax.append(plt.gca())
        for a in allax:
            plt.sca(a)
            plt.xlabel(xl)#,fontsize=20)
            plt.axis(limits)
            #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
            #print ybin
            #plt.plot(xbin,ybin,'ko',markersize=18)
            #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

        plt.colorbar(ax=allax,fraction=.03)

        #xlim(0,2)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphi2.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphi2.eps')
    def plotsizemassdens2panel(self,sbcutobs=20.,usemass=1,usecolor=0):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2,left=.12)
        plt.clf()
        #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
        y=(self.sizeratio)
        x=self.massdensity
        plt.subplot(1,2,1)
        flag=  self.sampleflag & ~self.agnflag #& self.membflag
        allax=[]

        if usemass:
            color=(self.logstellarmass)
            v1=9.3
            v2=11.
        elif usecolor:
            color=self.s.ABSMAG[:,3]-self.s.ABSMAG[:,4]
            v1=min(color)
            v2=max(color)
        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        allax.append(plt.gca())
        plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=20)
        plt.title('$SF \ Galaxies $',fontsize=20)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)

        plt.subplot(1,2,2)
        flag=  self.sampleflag &  self.agnflag #& self.membflag
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.title('$AGN $',fontsize=20)

        for a in allax:
            plt.sca(a)
            plt.xlabel(r'$log_{10}(M_*/\pi R_e^2)$')#,fontsize=20)
            plt.axis([6,10.,.01,1.5])
            #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
            #print ybin
            #plt.plot(xbin,ybin,'ko',markersize=18)
            #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

        plt.colorbar(ax=allax,fraction=.03)

        #xlim(0,2)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdens2panel.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdens2panel.eps')
    def plotsizemassradius2panel(self,sbcutobs=20.,usemass=1,usecolor=0):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2,left=.12)
        plt.clf()
        #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
        y=(self.sizeratio)
        x=self.logstellarmass - np.log10(self.s.SERSIC_TH50*self.DA)
        plt.subplot(1,2,1)
        flag=  self.sampleflag & ~self.agnflag #& self.membflag
        allax=[]
        if usemass:
            color=(self.logstellarmass)
            v1=9.3
            v2=11.
        elif usecolor:
            color=self.s.ABSMAG[:,3]-self.s.ABSMAG[:,4]
            v1=min(color)
            v2=max(color)
        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        allax.append(plt.gca())
        plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=20)
        plt.title('$SF \ Galaxies $',fontsize=20)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)

        plt.subplot(1,2,2)
        flag=  self.sampleflag &  self.agnflag #& self.membflag
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        plt.title('$AGN $',fontsize=20)
        allax.append(plt.gca())
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        
        for a in allax:
            plt.sca(a)
            plt.xlabel(r'$log_{10}(M_*/ R_e)$')#,fontsize=20)
            plt.axis([8,11.,.01,1.5])
            #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
            #print ybin
            #plt.plot(xbin,ybin,'ko',markersize=18)
            #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

        plt.colorbar(ax=allax,fraction=.03)

        #xlim(0,2)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassradius.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassradius.eps')
    def plotsizeNsersic(self,sbcutobs=20.,usemass=1,usecolor=0):
        plt.figure(figsize=plotsize_2panel)
        plt.subplots_adjust(bottom=.2,left=.12)
        plt.clf()
        #flag=(self.s.cnumerical_error_flag24 < 1.) & (self.sb_obs < sbcutobs) & self.sampleflag
        y=(self.sizeratio)
        x=self.s.SERSIC_N
        plt.subplot(1,2,1)
        flag=  self.sampleflag   & ~self.agnflag #& self.membflag
        allax=[]
        if usemass:
            color=(self.logstellarmass)
            v1=9.3
            v2=11.
        elif usecolor:
            color=self.s.ABSMAG[:,3]-self.s.ABSMAG[:,4]
            v1=min(color)
            v2=max(color)
        else:
            color=self.sb_obs[flag]
            v1=sbmin
            v2=sbmax
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        allax.append(plt.gca())
        plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=20)
        plt.title('$SF \ Galaxies $',fontsize=20)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        
        plt.subplot(1,2,2)
        flag=  self.sampleflag   & self.agnflag #& self.membflag
        sp=plt.scatter(x[flag],y[flag],s=100,c=color[flag],vmin=v1,vmax=v2)
        rho,p=spearman(x[flag],y[flag])
        ax=plt.gca()
        plt.text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=18)
        plt.title('$AGN $',fontsize=20)
        allax.append(plt.gca())
        for a in allax:
            plt.sca(a)
            plt.xlabel(r'$ N\_ SERSIC$')#,fontsize=20)
            plt.axis([-.1,7.,.01,1.5])
            #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
            #print ybin
            #plt.plot(xbin,ybin,'ko',markersize=18)
            #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

        plt.colorbar(ax=allax,fraction=.03)

        #xlim(0,2)
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeNsersic.png')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeNsersic.eps')


    def plotsizeHImass(self,sbcutobs=20.5,isoflag=0,r90flag=0):
         figure(figsize=plotsize_single)
         clf()
         flag = self.sampleflag & (self.HIflag) & ~self.agnflag
         print 'number of galaxies = ',sum(flag)
         y=(self.sizeratio[flag])
         x=np.log10(self.s.HIMASS[flag])

         #color=self.logstellarmass[flag]
         color=self.logstellarmass[flag]
         sp=scatter(x,y,s=90,c=color,vmin=mstarmin,vmax=mstarmax)
         rho,p=spearman(x,y)
         ax=plt.gca()
         text(.75,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=22)
         text(.75,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=22)
         print 'spearman for log(M*) < 10.41'
         rho,p=spearman(x[color < 10.41],y[color<10.41])
         colorbar(sp,fraction=.08)
         #plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=26)
         plt.ylabel('$R_{24}/R_d$')
         plt.xlabel(r'$ HI \ Mass$')#,fontsize=26)

         #ax.tick_params(axis='both', which='major', labelsize=16)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHImass.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHImass.eps')
    def plotsizeHIfrac(self,sbcutobs=20.5,isoflag=0,r90flag=0,color_BT=False):
         plt.figure(figsize=plotsize_single)
         plt.subplots_adjust(bottom=.2,left=.15)
         plt.clf()
         flag = self.sampleflag & (self.HIflag) #& self.dvflag #& ~self.agnflag
         print 'number of galaxies = ',sum(flag)
         y=(self.sizeratio[flag & self.membflag])
         x=np.log10(self.s.HIMASS[flag & self.membflag])-self.logstellarmass[flag & self.membflag]
         print 'spearman for cluster galaxies only'
         t = spearman(x,y)
         if color_BT:
             pointcolor = self.gim2d.B_T_r
             v1=0
             v2=0.6
         else:
             pointcolor = self.logstellarmass
             v1=mstarmin
             v2=mstarmax
         #color=self.logstellarmass[flag]
         color=pointcolor[flag & self.membflag]
         sp=scatter(x,y,s=90,c=color,vmin=v1,vmax=v2,label='$Core$',cmap='jet',edgecolor='k')

         y=(self.sizeratio[flag & ~self.membflag])
         x=np.log10(self.s.HIMASS[flag & ~self.membflag])-self.logstellarmass[flag & ~self.membflag]
         print 'spearman for exterior galaxies only'
         t = spearman(x,y)

         #color=self.logstellarmass[flag]
         color=pointcolor[flag & ~self.membflag]
         sp=scatter(x,y,s=90,c=color,vmin=v1,vmax=v2,marker='s',label='$External$',cmap='jet',edgecolor='k')
         y=(self.sizeratio[flag])
         x=np.log10(self.s.HIMASS[flag])-self.logstellarmass[flag]
         plt.legend(loc='upper left',scatterpoints=1)
         errorbar(x,y,self.sizeratioERR[flag],fmt=None,ecolor='.5',zorder=100)
         rho,p=spearman(x,y)

         ax=plt.gca()
         text(.95,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
         text(.95,.8,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
         print 'spearman for log(M*) < 10.41'
         rho,p=spearman(x[color < 10.41],y[color<10.41])
         cb = plt.colorbar(sp,fraction=.08,ticks=np.arange(8.5,11,.5))
         cb.ax.text(4.,.5,'$\log(M_\star/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)
         #plt.ylabel(r'$ R_e(24)/R_e(r)$')
         plt.ylabel('$R_{24}/R_d$')
         plt.xlabel(r'$ \log_{10}(M_{HI}/M_*)$')

         ax.tick_params(axis='both', which='major', labelsize=16)
         plt.axis([-1.8,1.6,0,2.5])
         #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHIfrac.png')
         #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHIfrac.eps')
         plt.savefig(figuredir+'fig16a.eps')
    def plotsizeHIdef(self,sbcutobs=20.5,isoflag=0,r90flag=0):
         figure(figsize=plotsize_single)
         plt.subplots_adjust(left=.15,bottom=.2)
         clf()
         flag = self.sampleflag & (self.HIflag) #& self.membflag #& self.dvflag
         print 'number of galaxies = ',sum(flag)
         y=(self.sizeratio[flag & self.membflag])
         x=(self.s.HIDef[flag & self.membflag])
         print 'spearman for cluster galaxies only'
         t = spearman(x,y)

         #color=self.logstellarmass[flag]
         #color=self.logstellarmass[flag & s.membflag]
         colors=self.logstellarmass
         color=colors[flag & self.membflag]
         sp=scatter(x,y,s=90,c=color,vmin=mstarmin,vmax=mstarmax,label='$Core$',cmap='jet',edgecolor='k')

         y=(self.sizeratio[flag & ~self.membflag])
         x=(self.s.HIDef[flag & ~self.membflag])
         print 'spearman for exterior galaxies only'
         t = spearman(x,y)

         #color=self.logstellarmass[flag]
         color=colors[flag & ~self.membflag]
         sp=scatter(x,y,s=90,c=color,vmin=8.5,vmax=10.8,marker='s',label='$External$',cmap='jet',edgecolor='k')
         y=(self.sizeratio[flag])
         x=(self.s.HIDef[flag])
         plt.legend(loc='upper left',scatterpoints=1)
         errorbar(x,y,self.sizeratioERR[flag],fmt=None,ecolor='.5',zorder=100)
         rho,p=spearman(x,y)
         ax=plt.gca()
         text(.75,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
         text(.75,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
         print 'spearman for log(M*) < 10.41'
         rho,p=spearman(x[color < 10.41],y[color<10.41])
         #cb = colorbar(sp,fraction=.08)
         #cb.ax.text(6.5,.5,'$\log(M_\star/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)
         cb = plt.colorbar(sp,fraction=.08,ticks=np.arange(8.5,11,.5))
         cb.ax.text(4.,.5,'$\log(M_\star/M_\odot)$',rotation=-90,verticalalignment='center',fontsize=20)

         #plt.ylabel(r'$ R_e(24)/R_e(r)$')#,fontsize=26)
         plt.ylabel('$R_{24}/R_d$')
         plt.xlabel('$HI \ Deficiency$')#,fontsize=26)
         plt.axis([-.6,1.6,0,2.5])
         #ax.tick_params(axis='both', which='major', labelsize=16)
         #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHIdef.png')
         #plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeHIdef.eps')
         plt.savefig(figuredir+'fig16b.eps')
    def plotsizetdepletion(self,sbcutobs=20.5,isoflag=0):
         figure(figsize=(10,8))
         clf()
         flag = self.sampleflag & (self.HIflag) & ~self.agnflag
         #flag = (self.s.HIflag > .1)
         print 'number of galaxies = ',sum(flag)
         if isoflag:
             y=(self.isosize[flag])
         else:
             y=(self.sizeratio[flag])
         x=(self.tdepletion[flag])/1.e9
         rho,p=spearman(x,y)
         ax=plt.gca()
         text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=22)
         text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=22)

         color=self.logstellarmass[flag]
         sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)

         colorbar(sp,fraction=.08)
         plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
         plt.xlabel(r'$ Depletion \ timescale \ (Gyr)$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')
         #ax.set_yscale('log')
         #plt.axhline(y=.5,ls='--',color='k')

         #flag2=self.spiralflag & self.HIflag
         #plot(self.tdepletion[flag2],0.1*ones(sum(flag2)),'rx')
         #xlim(0,2)
         #plt.axis([9,12,.01,1.5])
         #xbin,ybin,ybinerr=my.binit(x,y,5)
         #print ybin
         #plt.plot(xbin,ybin,'ko',markersize=12)
         #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
         #spearman(x,y)
         #flag = self.sampleflag & (self.HIflag) & self.agnflag
         #x=(self.tdepletion[flag])/1.e9
         #y=(self.sizeratio[flag])
         #spearman(x,y)
         #color=self.logstellarmass[flag]
         #sp=scatter(x,y,s=50,marker='*', c=color,vmin=mstarmin,vmax=mstarmax)

         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizeHIdef.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizeHIdef.eps')

         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizetdeplete.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizetdeplete.eps')

    def tdepletionssfr(self,sbcutobs=20.5,isoflag=0,showtrunc=0):
         figure(figsize=(10,8))
         clf()
         flag = self.sbflag & self.sampleflag & (self.s.HIflag > .1)
         if isoflag:
             flag = self.isosampleflag & (self.HIflag)
         else:
             flag = self.sampleflag & (self.HIflag)
         #flag = (self.s.HIflag > .1)
         print 'number of galaxies = ',sum(flag)
         y=log10(self.tdepletion[flag])
         x=log10(self.ssfr[flag])
         spearman(x,y)
         color=self.logstellarmass[flag]
         sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
         if showtrunc:
             y=log10(self.tdepletion[flag & self.truncflag])
             x=log10(self.ssfr[flag & self.truncflag])
             plot(x,y,'r*',markersize=20)
         axhline(y=log10(3.e9),color='k',ls=':')
         colorbar(sp,fraction=.08)
         plt.ylabel(r'$ log_{10}(t_{dep}(HI) \ (yr))$',fontsize=20)
         plt.xlabel(r'$ log_{10}(SFR/M_*)$',fontsize=20)
         xl=arange(-11.5,-9,.1)
         yl= -0.724*xl+1.54
         #yl= (-0.724 +/-0.039)*xl + (1.54 +/- 0.41)
         plot(xl,yl,'k-')
         plot(xl,yl+.039,'k--')
         plot(xl,yl-.039,'k--')
         axis([-11.5,-9,8,11])

         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isotdepssfr.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isotdepssfr.eps')

         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/tdepssfr.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/tdepssfr.eps')

    def tdepletiontform(self,sbcutobs=20.5,isoflag=0,showtrunc=0):
         figure(figsize=(10,8))
         clf()
         flag = self.sbflag & self.sampleflag & (self.s.HIflag > .1)
         if isoflag:
             flag = self.isosampleflag & (self.HIflag)
         else:
             flag = self.sampleflag & (self.HIflag)
         #flag = (self.s.HIflag > .1)
         print 'number of galaxies = ',sum(flag)
         y=log10(self.tdepletion[flag])
         x=log10(1./self.ssfr[flag])
         spearman(x,y)
         color=self.logstellarmass[flag]
         sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
         if showtrunc:
             y=log10(self.tdepletion[flag & self.truncflag])
             x=log10(1./self.ssfr[flag & self.truncflag])
             plot(x,y,'r*',markersize=20)
         #axhline(y=log10(3.e9),color='k',ls=':')
         colorbar(sp,fraction=.08)
         plt.ylabel(r'$ log_{10}(t_{dep}(HI) \ (yr))$',fontsize=20)
         plt.xlabel(r'$ log_{10}(M_*/SFR)$',fontsize=20)
         xl=arange(9,11.5,.1)
         #yl= -0.724*xl+1.54
         #yl= (-0.724 +/-0.039)*xl + (1.54 +/- 0.41)
         plot(xl,xl,'k-')
         #plot(xl,yl+.039,'k--')
         #plot(xl,yl-.039,'k--')
         axis([8,12,8,12])

         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isotdepssfr.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isotdepssfr.eps')

         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/tdeptform.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/tdeptform.eps')
    def plotsizeclusterphiblue(self):
        flag = self.sampleflag & ~self.agnflag & self.blueflag & self.membflag
        plt.figure()
        plt.subplots_adjust(bottom=.15,left=.15)
        plt.plot(self.s.CLUSTER_PHI[flag],self.sizeratio[flag],'bo')
        plt.xlabel(r'$\psi \ (degrees)$')
        plt.ylabel(r'$R_e(24)/R_e(r)$')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphiblue.eps')
        plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphiblue.png')
             
    def plotsizeclusterphi(self,sbcutobs=20.5,isoflag=0,masscut=2.55e10,r90flag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,wspace=.01,bottom=0.15,left=.15)
         clf()
         baseflag= self.sampleflag & ~self.agnflag & self.membflag
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             plt.subplot(2,1,j+1)
             if isoflag:
                 y=(self.isosize[flag])
             elif r90flag:
                 y=(self.r90size[flag])
             else:
                 y=(self.sizeratio[flag])
             plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
             x=self.s.CLUSTER_PHI[flag]
             color=self.logstellarmass[flag]
             #sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
             color=self.sb_obs[flag]
             sp=scatter(x,y,s=100,c=color,vmin=sbmin,vmax=sbmax)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))
             else:
                 ax.set_yticklabels(([]))
             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([0,90,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             try:
                 (rho,p)=spearman(x,y)
             except:
                 print 'trouble running spearman'
                 rho=-99
                 p=-99
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             xbin,ybin,ybinerr=my.binitbins(0,90.,3,x,y)

             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
             exterior=mean(y[x>1.5])
             exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             plt.axhline(y=exterior,ls='-',color='k')
             plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$\psi$',fontsize=28)
         ax=plt.gca()

         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphi.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeclusterphi.eps')

    def comparestellarmass(self):
         # log10(chabrier) = log10(Salpeter) - .25 (SFR estimate)
         # log10(chabrier) = log10(diet Salpeter) - 0.1 (Stellar mass estimates)

         figure(figsize=(10,8))
         plot(self.s.MSTAR_50,log10(self.s.STELLARMASS),'bo',label='Bell+2003')
         plot(self.s.MSTAR_50,self.logstellarmassTaylor,'go',label='Taylor+2011')
         xl=arange(7.8,12.5,.1)
         xlabel('$ log_{10}(M_*) \  Moustakas $',fontsize=20)
         ylabel('$ log_{10}(M_*) $',fontsize=20)
         plot(xl,xl,'k-',lw=3,label='1:1')
         dy=.4
         plot(xl,xl+dy,'k--',label='1:1 + '+str(dy))
         plot(xl,xl-.15,'r-',label='1:1 - 0.15 ')
         legend(loc='upper left',numpoints=1)
         axis([7.5,12.5,7.5,12.5])
         savefig(homedir+'research/LocalClusters/SamplePlots/Stellarmass.png')
    def plotsizedrbymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=0,r90flag=0,fixPA=False):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=0.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
             baseflag=  self.sampleflag &  self.dvflag & ~self.agnflag
         elif r90flag:
             baseflag=  self.sampleflag & self.mipsflag &  self.dvflag & ~self.agnflag
         else:
             baseflag= (self.sb_obs < sbcutobs) & self.sampleflag&  self.dvflag  & ~self.agnflag
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             yplot=(self.sizeratio)
             y=(yplot[flag & self.upperlimit])
             x=self.s.DR_R200[flag & self.upperlimit ]
             #color=self.sb_obs[flag]
             color=self.logstellarmass[flag & self.upperlimit]
             errs=array(zip(.1*ones(len(x)),zeros(len(x))),'f')
             errorbar(x,y,xerr=None,yerr=errs.T,fmt=None,ecolor='k', \
    lolims=True,capsize=4,capthick=0,elinewidth=2,mew=1,label='Upper Lims')
             sp=scatter(x,y,s=100,c=color,marker='v',vmin=mstarmin,vmax=mstarmax)
             #plot(self.s.DR_R200[flag & self.pointsource],self.sizeratio[flag & self.pointsource],'k*',markersize=14)
             #plot(self.s.DR_R200[flag & self.AGNKAUFF],yplot[flag & self.AGNKAUFF],'k*',mec='k',mfc='None',markersize=20)
             if j == 0:
                outfile=homedir+'research/LocalClusters/Rdata/sizedr_highmass.txt'
             else:
                outfile=homedir+'research/LocalClusters/Rdata/sizedr_lowmass.txt'
             out1=open(outfile,'w')
             for i in range(sum(self.sizeratio)):
                 if flag[i]:
                    s='%5.2f %5.2f %i %5.3f \n'%(self.s.DR_R200[i],self.sizeratio[i],self.upperlimit[i], self.s.fcre1[i])
                    out1.write(s)
             out1.close()

             y=(yplot[flag & ~self.upperlimit])
             x=self.s.DR_R200[flag & ~self.upperlimit ]

                              
             #color=self.sb_obs[flag]
             color=self.logstellarmass[flag & ~self.upperlimit]
             sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([0,3.5,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             y=yplot[flag]
             x=self.s.DR_R200[flag]

             (rho,p)=spearman(x,y)
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             t=my.ratioerror(len(y[(x<1) & (y < 0.5)]),len(y[x<1]))
             print t[0],t[1],t[2]
             print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             t=my.ratioerror(len(y[(x>1)&(y<0.5)]),len(y[x>1]))
             print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #xbin,ybin,ybinerr=my.binitbins(0,3.,3,x,y)
             xbin,ybin,ybinerr=my.binit(x,y,7)

             plt.plot(xbin,ybin,'ko',markersize=16)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None,ecolor='k')
             exterior=median(y[x>1.5])
             exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             plt.axhline(y=exterior,ls='-',color='k')
             plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ \Delta R/R_{200}$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizedrbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizedrbymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedrbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizedrbymass.eps')


    def plotsizesigmabymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=0,ssfrflag=0,NUV24flag=0,BTflag=0,r90flag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(10,6))
         subplots_adjust(hspace=.05,wspace=.05,bottom=0.15,left=.1)
         print 'r90flag = ',r90flag
         clf()
         allax=[]
         for j in range(4):
             if j == 0:
                 flag=self.sampleflag & self.dvflag & ~self.agnflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 2:
                 flag=self.sampleflag & self.dvflag & ~self.agnflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))
             elif j == 3:
                 flag=self.sampleflag & self.dvflag & self.agnflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))
             elif j == 1:
                 flag=self.sampleflag & self.dvflag & self.agnflag  & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,2,j+1)
             y=(self.sizeratio[flag])
             x=log10(self.s.SIGMA_5[flag])
             
             #color=self.sb_obs[flag]
             color=self.logstellarmass[flag]
             
             v1=mstarmin
             v2=mstarmax
             ccmap='jet'
             if ssfrflag:
                 color=log10(self.ssfr[flag])
                 v1=ssfrmin
                 v2=ssfrmax
                 ccmap='jet_r'
             elif NUV24flag:
                 color=self.NUV24[flag]
                 v1=min(color)
                 v2=max(color)
                 ccmap='jet'
             elif BTflag:
                 color=self.gim2d.B_T_r[flag]
                 v1=min(color)
                 v2=max(color)
                 ccmap='jet'
             sp=scatter(x,y,s=100,c=color,vmin=v1,vmax=v2,cmap=ccmap)
             ax=gca()
             plt.yticks(arange(0,1.5,.4))
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j == 0:
                 plt.title('$SF \ Galaxies$',fontsize=20)
             if j == 1:
                 plt.title('$AGN$',fontsize=20)
                
             if j < 2:                
                 ax.set_xticklabels(([]))
             if (j == 1) | (j == 3): 
                 ax.set_yticklabels(([]))                
             if isoflag:
                 ymax=2.2
             else:
                 ymax=2.5

             plt.axis([-1.1,2.1,0,1.5])

             allax.append(ax)
             plt.text(.95,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             if (len(x) > 0):
                (rho,p)=spearman(x,y)
                #print rho,p
                text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
                text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #xbin,ybin,ybinerr=my.binitbins(-.5,2.,5,x,y)

             #plt.plot(xbin,ybin,'ko',markersize=20,mfc='k')
             #plt.errorbar(xbin,ybin,yerr=3.*ybinerr,fmt=None,ecolor='k')
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)

         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-1.3,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         plt.text(0,-.3,r'$ log_{10}(\Sigma_5 \ (gal/Mpc^2))$',transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizesigmabymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizesigmabymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesigmabymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizesigmabymass.eps')
    def plotsbsigmabymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=0,ssfrflag=0,NUV24flag=0,BTflag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=0.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
             baseflag=  self.sampleflag &  self.dvflag & ~self.agnflag
         else:
             baseflag= (self.sb_obs < sbcutobs) & self.sampleflag&  self.dvflag & ~self.agnflag
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             y=(self.sb_obs[flag])
             x=log10(self.s.SIGMA_5[flag])
             color=self.sb_obs[flag]
             color=self.logstellarmass[flag]
             v1=mstarmin
             v2=mstarmax
             ccmap='jet'
             if ssfrflag:
                 color=log10(self.ssfr[flag])
                 v1=ssfrmin
                 v2=ssfrmax
                 ccmap='jet_r'
             elif NUV24flag:
                 color=self.NUV24[flag]
                 v1=min(color)
                 v2=max(color)
                 ccmap='jet'
             elif BTflag:
                 color=self.gim2d.B_T_r[flag]
                 v1=min(color)
                 v2=max(color)
                 ccmap='jet'
             sp=scatter(x,y,s=100,c=color,vmin=v1,vmax=v2,cmap=ccmap)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([-1.1,2.1,sbmin,sbmax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             (rho,p)=spearman(x,y)
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             xbin,ybin,ybinerr=my.binitbins(-.5,2.,5,x,y)

             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ log_{10}(\Sigma_5 \ (gal/Mpc^2))$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ \mu_{24} \ (mag/arcsec^2)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sbsizesigmabymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sbsizesigmabymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sbsigmabymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sbsigmabymass.eps')

    def plotsizeLxbymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
         else:
             baseflag= (self.sb_obs < sbcutobs) & self.sampleflag&  self.dvflag & ~self.agnflag
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             if isoflag:
                 y=(self.isosize[flag])
             else:
                 y=(self.sizeratio[flag])
             x=log10(self.s.CLUSTER_LX)-2.*log10(self.s.DR_R200)
             x=x[flag]
             color=self.sb_obs[flag]
             color=self.logstellarmass[flag]
             sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([-2.8,2.8,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             (rho,p)=spearman(x,y)
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             xbin,ybin,ybinerr=my.binitbins(-.5,2.,5,x,y)

             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=3.*ybinerr,fmt=None)
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ log_{10}(L_X/\Delta r^2 )$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizeLxbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizeLxbymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeLxbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeLxbymass.eps')

    def plotsizeBTbymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=False):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
             baseflag=  self.sampleflag  &  self.gim2dflag & ~self.agnflag & self.dvflag
         else:
             baseflag= self.sampleflag  &self.dvflag  & self.gim2dflag & ~self.agnflag 
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0]) #& self.membflag
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])#& self.membflag
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))

             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             if isoflag:
                 y=(self.isosize)
             else:
                 y=(self.sizeratio)
                 yerror=self.sizeratio_ERR
             x=self.gim2d.B_T_r
             #color=self.sb_obs[flag]
             color=self.logstellarmass
             sp=scatter(x[flag],y[flag],s=100,c=color[flag],vmin=mstarmin,vmax=mstarmax)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([-.05,.805,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             (rho,p)=spearman_with_errors(x[flag],y[flag],yerror[flag])
              
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(np.mean(rho)),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(np.mean(p)),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=spearman_boot(x[flag],y[flag])
             #print 'Spearman Rank Test w/bootstrap:'
             #print 'rho = %6.2f'%(t[0])
             #print 'p-vale = %6.5f (prob that samples are uncorrelated)'%(t[1]) 

             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #xbin,ybin,ybinerr=my.binitbins(0,.5,5,x,y)
             xbin,ybin,ybinerr=my.binit(x[flag],y[flag],5)

             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')
         print 'all masses'
         spearman(x[baseflag],y[baseflag])

         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ B/T$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.eps')

    def plotsizeBTbyenv(self,masscut=2.55e10,sbcutobs=20.,isoflag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
             baseflag=  self.sampleflag  & ~self.agnflag & self.dvflag
         else:
             baseflag= (self.sb_obs < sbcutobs) & self.sampleflag  & ~self.agnflag &self.dvflag 
         allax=[]
         for j in range(2):
             if j == 0:
                 flag=baseflag & self.membflag
                 slabel='$ Cluster $'
                 binmarker='ko'

             elif j == 1:
                 flag=baseflag  & ~self.membflag
                 slabel='$ External $'
                 binmarker='k^'
             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             if isoflag:
                 y=(self.isosize[flag])
             else:
                 y=(self.sizeratio[flag])
             x=self.gim2d.B_T_r
             x=x[flag]
             color=self.sb_obs[flag]
             color=self.logstellarmass[flag]
             sp=scatter(x,y,s=100,c=color,vmin=mstarmin,vmax=mstarmax)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([-.05,.805,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             (rho,p)=spearman(x,y)
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             if j == 1:
                 plt.plot(xbin,ybin,'ko',markersize=12)
                 plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)

             xbin,ybin,ybinerr=my.binitbins(0,.6,3,x,y)

             plt.plot(xbin,ybin,binmarker,markersize=12)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None)
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ B/T$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizeBTbymass.eps')

    def plotsizemassdensbymass(self,masscut=2.55e10,sbcutobs=20.,isoflag=0,clusterflag=0,envflag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(8,8))
         subplots_adjust(hspace=.05,bottom=.15,left=.15)
         clf()
         if isoflag:
             baseflag=  self.isosampleflag &  self.dvflag & ~self.agnflag
             baseflag=  self.sampleflag  & ~self.agnflag & self.dvflag
         else:
             baseflag= (self.sb_obs < sbcutobs) & self.sampleflag  & ~self.agnflag &self.dvflag 
         allax=[]
                    
         xvar=self.massdensity
         for j in range(2):
             if clusterflag:
                 if j == 0:
                     flag=baseflag & (self.membflag)
                     slabel='$ Cluster $'

                 elif j == 1:
                     flag=baseflag  & ~self.membflag
                     slabel='$ External$'
                 color=log10(self.s.SIGMA_5[flag])
                 v1=-1
                 v2=2

             elif envflag:
                 if j == 0:
                     flag=baseflag & (log10(self.s.SIGMA_5) > .75)
                     slabel='$ log_{10}(\Sigma_5) > 0.75 $'

                 elif j == 1:
                     flag=baseflag  & (log10(self.s.SIGMA_5) < .75)
                     slabel='$ log_{10}(\Sigma_5) < 0.75 $'
                 color=log10(self.s.SIGMA_5[flag])
                 v1=-1
                 v2=2
             else:
                 if j == 0:
                     flag=baseflag & (self.logstellarmass > mass_breaks[0])
                     slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

                 elif j == 1:
                     flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                     slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))
                 color=self.logstellarmass[flag]
                 v1=mstarmin
                 v2=mstarmax
             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             if isoflag:
                 y=(self.isosize[flag])
             else:
                 y=(self.sizeratio[flag])

             x=xvar[flag]


             sp=scatter(x,y,s=100,c=color,vmin=v1,vmax=v2)
             ax=gca()
             ax.tick_params(axis='both', which='major', labelsize=16)
             if j < 1:                
                 ax.set_xticklabels(([]))

             if isoflag:
                 ymax=2.2
             else:
                 ymax=1.5
             plt.axis([4.,9,0,ymax])
             allax.append(ax)
             text(.9,.9,slabel,transform=ax.transAxes,fontsize=16,horizontalalignment='right')
             (rho,p)=spearman(x,y)
             #print rho,p
             text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
             #t=my.ratioerror(len(y[(x<1) & (y < 0.3)]),len(y[x<1]))
             #print t[0],t[1],t[2]
             #print 'fraction of size < 0.5 galaxies w/in R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             #t=my.ratioerror(len(y[(x>1)&(y<0.3)]),len(y[x>1]))
             #print 'fraction of size < 0.5 galaxies outside R200 = %5.2f - %5.2f + %5.2f'%(t[0],t[1],t[2])
             xbin,ybin,ybinerr=my.binitbins(5,8,3,x,y)

             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None,ecolor='k')
             #exterior=mean(y[x>1.5])
             #exteriorerr=std(y[x>1.5])/sqrt(1.*sum(x>1.5))
             #plt.axhline(y=exterior,ls='-',color='k')
             #plt.axhline(y=exterior+exteriorerr,ls='--',color='k')
             #plt.axhline(y=exterior-exteriorerr,ls='--',color='k')
             #plt.axhline(y=1,ls='-',color='k')


             #ax.set_yscale('log')


         colorbar(ax=allax,fraction=.05)
         plt.xlabel(r'$ log_{10}(M_*/\pi R_e^2)$',fontsize=28)
         ax=plt.gca()
         if isoflag:
             xl=r'$ R_{iso}(24)/R_{iso}(r)$'
         else:
             xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,1,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         if isoflag:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdensbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdensbymass.eps')
         else:
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdensbymass.png')
             plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdensbymass.eps')


    def plotsizemassdens(self,masscut=2.55e10,sbcutobs=20.,envflag=0,ageflag=0):
         # mass cut is from kauffmann+04, which is ~3e10
         # I translated from Kroupa to Chabrier IMF using
         # M_chabrier = M_kroupa - 0.07
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(7,6))
         subplots_adjust(hspace=.05,bottom=.15,left=.15)
         clf()
         flag= self.sampleflag  & ~self.agnflag #& self.dvflag & (self.sizeratioERR < .2)
                    
         xvar=self.massdensity
         color=log10(self.s.SIGMA_5[flag])

         if envflag:
             color=log10(self.s.SIGMA_5[flag])
             v1=-1
             v2=2
         elif ageflag:
             color=self.jmass.SFRAGE_50[flag]
             v1=0
             v2=12
         else:
             color=self.logstellarmass[flag]
             v1=mstarmin
             v2=mstarmax

         y=(self.sizeratio[flag])
         erry=(self.sizeratioERR[flag])

         x=xvar[flag]

         errorbar(x,y,erry,fmt=None,ecolor='k')
         sp=scatter(x,y,s=60,c=color,vmin=v1,vmax=v2)
         
         ax=gca()
         ax.tick_params(axis='both', which='major', labelsize=16)
         ymax=1.5
         plt.axis([4.,8.5,0,ymax])
         print 'ALL GALAXIES'
         (rho,p)=spearman(x,y)
         print 'GALAXIES WITH SIZE < .5'
         (rho,p)=spearman(x[y<.5],y[y<.5])
         #print rho,p
         #text(.05,.9,r'$\rho = %4.2f$'%(rho),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
         #text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=16)
         #xbin,ybin,ybinerr=my.binitbins(5,8,3,x,y)

         #plt.plot(xbin,ybin,'ko',markersize=12)
         #plt.errorbar(xbin,ybin,yerr=ybinerr,fmt=None,ecolor='k')
         colorbar(fraction=.05)
         plt.xlabel(r'$ log_{10}(M_*/\pi R_e^2)$',fontsize=28)
         ax=plt.gca()
         xl=r'$ R_e(24)/R_e(r)$'
         plt.text(-0.18,.5,xl,fontsize=28,transform=ax.transAxes,rotation=90,verticalalignment='center')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdens.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/sizemassdens.eps')


    def plotisosizedrbymass(self,masscut=9.e10,sbcutobs=20.,massflag=0):
         mass_breaks=[log10(masscut)]#,10.**10.45]
         figure(figsize=(10,8))
         subplots_adjust(hspace=.05)
         clf()
         baseflag= self.isosampleflag & ~self.agnflag
         if massflag:
             color=self.logstellarmass
             v1=mstarmin
             v2=mstarmax
         else:
             color=self.sb_obs
             v1=sbmin
             v2=sbmax

         for j in range(2):
             if j == 0:
                 flag=baseflag & (self.logstellarmass > mass_breaks[0])
                 slabel='$ log_{10}(M_*) > %5.2f $'%((mass_breaks[0]))

             elif j == 1:
                 flag=baseflag  & (self.logstellarmass <= mass_breaks[0])
                 slabel='$ log_{10}(M_*) < %5.2f $'%((mass_breaks[0]))#,log10(mass_breaks[0]))
                 plt.ylabel(r'$ R_e(24)/R_e(r)$',fontsize=20)
             #elif j == 2:
             #    flag=baseflag &  (self.s.STELLARMASS <= mass_breaks[1])
             #    slabel='$ log_{10}(M_*) < %5.2f $'%(log10(mass_breaks[1]))
             #
             print j, sum(flag)
             plt.subplot(2,1,j+1)
             y=(self.isorad.MIPS[flag]/self.isorad.NSA[flag])
             x=self.s.DR_R200[flag]

             sp=scatter(x,y,s=100,c=color[flag],vmin=v1,vmax=v2)
             ax=gca()
             if j < 1:                
                 ax.set_xticklabels(([]))

             plt.axis([0,3.5,0,1.5])

             text(.9,.85,slabel,transform=ax.transAxes,fontsize=14,horizontalalignment='right')
             xbin,ybin,ybinerr=my.binitbins(0,3.,3,x,y)
             plt.plot(xbin,ybin,'ko',markersize=12)
             plt.errorbar(xbin,ybin,yerr=3.*ybinerr,fmt=None)
             exterior=mean(y[x>1.5])
             plt.axhline(y=exterior,ls='--',color='k')
             plt.axhline(y=1,ls='-',color='k')
             spearman(x,y)
             #ax.set_yscale('log')


         plt.xlabel(r'$ \Delta R/R_{200}$',fontsize=20)
         ax=plt.gca()
         #ax.set_xscale('log')

         #plt.axhline(y=.5,ls='--',color='k')

         #xlim(0,2)
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizedrbymass.png')
         plt.savefig(homedir+'research/LocalClusters/SamplePlots/isosizedrbymass.eps')

    def compareRiso(self):
         figure(figsize=(10,6))
         subplots_adjust(wspace=0.01,hspace=.3,bottom=.1,left=.1,top=.95,right=.95)
         subplot(1,2,1)
         flag=self.isosampleflag & self.membflag

         cb=scatter(self.isorad.NSA[flag],self.isorad.MIPS[flag],s=50,c=self.logstellarmass[flag],vmin=8.5,vmax=12.)
         #colorbar(cb)
         xlabel('$R_{iso}(r) $',fontsize=20)
         ylabel('$R_{iso}(24) $',fontsize=20)
         xl=arange(1,70)
         plot(xl,xl,'k--')
         plot(xl,.7*xl,'k:')
         plot(xl,1.3*xl,'k:')

         axis([0,70,-2,50])
         ax1=gca()
         text(.1,.9,'$Core$',transform=ax1.transAxes,horizontalalignment='left',fontsize=18)
         subplot(1,2,2)
         flag=self.isosampleflag & ~self.membflag

         cb=scatter(self.isorad.NSA[flag],self.isorad.MIPS[flag],s=50,c=self.logstellarmass[flag],vmin=8.5,vmax=12.)

         plot(xl,xl,'k--')
         plot(xl,.7*xl,'k:')
         plot(xl,1.3*xl,'k:')
         ax2=gca()
         colorbar(cb,ax=[ax1,ax2])
         ax2.set_yticklabels(([]))
         axis([0,70,-2,50])
         text(.1,.9,'$External$',transform=ax2.transAxes,horizontalalignment='left',fontsize=18)
         xlabel('$R_{iso}(r) $',fontsize=20)

    def plotRevsRiso(self,useE0=0):
         figure(figsize=(10,6))
         subplots_adjust(wspace=0.2,hspace=.35,bottom=.15,left=.1,top=.95,right=.95)
         flag=self.isosampleflag & self.dvflag & ~self.agnflag
         flag2=self.sampleflag & self.dvflag & ~self.agnflag
         if useE0:
             x=self.isorad.MIPSE0[flag]/self.isorad.NSA[flag]
             x2=self.isorad.MIPSE0[flag2]/self.isorad.NSA[flag2]
         else:
             x=self.isorad.MIPS[flag]/self.isorad.NSA[flag]
             x2=self.isorad.MIPS[flag2]/self.isorad.NSA[flag2]

         y=self.s.fcre1[flag]*mipspixelscale/self.s.SERSIC_TH50[flag]
         y2=self.s.fcre1[flag2]*mipspixelscale/self.s.SERSIC_TH50[flag2]

         subplot(2,2,2)
         hist(y2,bins=arange(0,2,.1),histtype='step')
         xlabel('$R_{e}(24)/R_{e}(r) $',fontsize=20)
         subplot(2,2,4)
         hist(x,bins=arange(0,2,.1),histtype='step')
         hist(x2,bins=arange(0,2,.1),histtype='step')
         xlabel('$R_{iso}(24)/R_{iso}(r) $',fontsize=20)
         axis([0,2,0,40])

         subplot(1,2,1)

         #color=self.logstellarmass[flag]
         aflag=self.agnflag[flag]
         mflag=self.membflag[flag]
         color=log10(self.ssfr[flag2])
         v1=ssfrmin
         v2=ssfrmax
         #color=(self.logstellarmass[flag])
         #v1=mstarmin
         #v2=mstarmax
         #color=log10(self.s.SIGMA_5[flag])#maybe something
         #color=(self.s.CLUSTER_PHI[flag])#maybe something
         #color=log10(self.s.SIGMA_NN[flag])#nothing
         #color=(self.dv[flag])#nothing
         #color=(self.s.NUVr_color[flag])#yes, w/iso size
         #color=(self.gim2d.B_T_r[flag])#yes, w/Re size
         #color=(self.s.AV[flag])#nah
         #color=(self.s.HAEW[flag])#yes, something
         #color=(self.s.SERSIC_N[flag])#yes, mainly with Re size
         #color=(self.s.ZDIST[flag])#no
         #color=(self.s.SERSIC_BA[flag])#no

         #v1,v2=scoreatpercentile(color,[5.,80.])#,limit=[0,15])
         #sp=scatter(x[aflag],y[aflag],s=70,marker='*',c=color[aflag],vmin=v1,vmax=v2,cmap='jet_r')
         sp=scatter(x2,y2,s=20,c=color,vmin=v1,vmax=v2,cmap='jet_r')
         #sp=scatter(x[~mflag],y[~mflag],s=20,marker='s',c=color[~mflag],vmin=v1,vmax=v2)
         colorbar(sp)
         #gca().set_yscale('log')
         #gca().set_xscale('log')

         #plot(x,y,'bo')
         xlabel('$R_{iso}(24)/R_{iso}(r) $',fontsize=20)
         ylabel('$R_{e}(24)/R_{e}(r) $',fontsize=20)
         axis([.1,2.8,.1,2.8])
         axis([-0.2,2.8,-0.2,2.8])
         axvline(x=.7,ls='--',color='k')
         axvline(x=1.2,ls='--',color='k')
         axhline(y=1,ls='--',color='k')
         axhline(y=.5,ls='--',color='k')

    def plotconcentration(self,useE0=0):
         figure(figsize=(10,6))
         subplots_adjust(wspace=0.2,hspace=.35,bottom=.15,left=.1,top=.95,right=.95)
         flag=(self.isorad.NSA > 0.) & (self.s.fcmag1 > 0) & (self.s.cnumerical_error_flag24 < .5)
         flag2=(self.isorad.NSA > 0.)
         if useE0:
             x=self.isorad.MIPSE0[flag]/self.isorad.NSA[flag]
             x2=self.isorad.MIPSE0[flag2]/self.isorad.NSA[flag2]
         else:
             x=self.isorad.MIPS[flag]/self.isorad.NSA[flag]
             x2=self.isorad.MIPS[flag2]/self.isorad.NSA[flag2]
         x=self.s.SERSIC_TH50[flag]/self.isorad.NSA[flag]
         y=self.s.fcre1[flag]*mipspixelscale/self.isorad.MIPS[flag]
         #y=self.s.fcre1[flag]*mipspixelscale/self.isorad.NSA[flag]

         subplot(2,2,2)
         hist(y,bins=arange(0,2,.1),histtype='step')
         xlabel('$R_{e}(24)/R_{iso}(24) $',fontsize=20)
         subplot(2,2,4)
         hist(x,bins=arange(0,2,.1),histtype='step')
         #hist(x2,bins=arange(0,2,.1),histtype='step')
         xlabel('$R_{e}(r)/R_{iso}(r) $',fontsize=20)
         #axis([0,2,0,40])

         subplot(1,2,1)
         color=self.logstellarmass[flag]
         sp=scatter(x,y,s=100,c=color,vmin=8.5,vmax=11.5)
         colorbar(sp)
         gca().set_yscale('log')
         gca().set_xscale('log')
         #plot(x,y,'bo')
         xlabel('$R_{e}(r)/R_{iso}(r) $',fontsize=20)
         ylabel('$R_{e}(24)/R_{iso}(24) $',fontsize=20)
         axis([.1,20,.1,20])
         axvline(x=.5,ls='--',color='k')
         #axvline(x=1.2,ls='--',color='k')
         #axhline(y=1,ls='--',color='k')
         axhline(y=.5,ls='--',color='k')
    def plotsize_LIR(self):
        figure(figsize=(12,10))
        subplots_adjust(hspace=.3,wspace=.3)
        subplot(2,3,1)
        sp=scatter(log10(self.LIR_BEST[self.sampleflag]),self.sizeratio[self.sampleflag],s=60,c=self.logstellarmass[self.sampleflag],vmin=9,vmax=11)
        colorbar(sp,fraction=0.08)
        ylabel('$R_e(24)/R_e(r) $')
        xlabel('$log_{10}(L_{IR})$')
        subplot(2,3,2)
        sp=scatter((self.logstellarmass[self.sampleflag]),self.sizeratio[self.sampleflag],s=60,c=log10(self.LIR_BEST[self.sampleflag]),vmin=9,vmax=11)
        sp=scatter((self.logstellarmass[self.sampleflag]),self.size_ratio_corr[self.sampleflag],marker='*',s=20,c=log10(self.LIR_BEST[self.sampleflag]),vmin=9,vmax=11)
        colorbar(sp,fraction=.08)
        ylabel('$R_e(24)/R_e(r) $')
        xlabel('$log_{10}(M_*)$')

        subplot(2,3,4)
        #plot(log10(self.LIR_BEST[self.sampleflag])-self.logstellarmass[self.sampleflag],self.sizeratio[self.sampleflag],'bo')#,c=self.LIR_BEST[self.sampleflag])
        sp=scatter(log10(self.LIR_BEST[self.sampleflag])-self.logstellarmass[self.sampleflag],self.sizeratio[self.sampleflag],s=60,c=log10(self.LIR_BEST[self.sampleflag]),vmin=9, vmax=11)
        colorbar(sp,fraction=.08)
        ylabel('$R_e(24)/R_e(r) $')
        xlabel('$log_{10}(L_{IR}/M_*)$')

        subplot(2,3,3)
        #plot(log10(self.LIR_BEST[self.sampleflag])-self.logstellarmass[self.sampleflag],self.sizeratio[self.sampleflag],'bo')#,c=self.LIR_BEST[self.sampleflag])
        sp=scatter(self.logstellarmass[self.sampleflag],log10(self.LIR_BEST[self.sampleflag]),c=self.sizeratio[self.sampleflag],s=60,vmin=.1, vmax=1,cmap='jet_r')
        xlabel('$log_{10}(M_*) $')
        ylabel('$log_{10}(Lir) $')
        colorbar(sp,fraction=.08)

        subplot(2,3,5)
        #plot(log10(self.LIR_BEST[self.sampleflag])-self.logstellarmass[self.sampleflag],self.sizeratio[self.sampleflag],'bo')#,c=self.LIR_BEST[self.sampleflag])
        markercolor=(log10(self.LIR_BEST[self.sampleflag]))#-self.logstellarmass[self.sampleflag])
        v1=9
        v2=11
        sp=scatter(self.sizeratio[self.sampleflag],self.s.fcnsersic1[self.sampleflag],c=markercolor,s=60,vmin=v1, vmax=v2,cmap='jet_r')
        xlabel('$R_e(24)/R_e(r)$')
        ylabel('$Sersic \ n$')
        colorbar(sp,fraction=.08)
        axis([-.09,1.2,-.02,6])

        subplot(2,3,6)
        markercolor=(log10(self.LIR_BEST[self.sampleflag])-self.logstellarmass[self.sampleflag])
        v1=-2.
        v2=.5
        sp=scatter(self.sizeratio[self.sampleflag],self.s.fcnsersic1[self.sampleflag],c=markercolor,s=60,vmin=v1, vmax=v2,cmap='jet_r')
        xlabel('$R_e(24)/R_e(r)$')
        ylabel('$Sersic \ n$')
        colorbar(sp,fraction=.08)
        axis([-.09,1.2,-.02,6])

        
    def agnfraction(self):
         baseflag=self.sampleflag & self.sdssspecflag

         print 'fraction of AGN among truncated galaxies = ',1.0*sum(self.agnflag[baseflag & self.truncflag])/len(self.agnflag[baseflag & self.truncflag])

         print 'fraction of AGN among non-truncated galaxies = ',1.0*sum(self.agnflag[baseflag & ~self.truncflag])/len(self.agnflag[baseflag & self.truncflag])
         print '##### ISO RADIUS #####'
         baseflag=self.isosampleflag & self.sdssspecflag

         print 'fraction of AGN among truncated galaxies = ',1.0*sum(self.agnflag[baseflag & self.isotruncflag])/len(self.agnflag[baseflag & self.isotruncflag])

         print 'fraction of AGN among non-truncated galaxies = ',1.0*sum(self.agnflag[baseflag & ~self.isotruncflag])/len(self.agnflag[baseflag & self.isotruncflag])
    def compare_single(self,var,baseflag=None,plotsingle=True,xlab=None,plotname=None):
        if baseflag == None:
            f1 = self.sampleflag & self.membflag & ~self.agnflag
            f2 = self.sampleflag & ~self.membflag &self.dvflag & ~self.agnflag
        else:
            f1=baseflag & self.sampleflag & self.membflag & ~self.agnflag
            f2=baseflag & self.sampleflag & ~self.membflag  & ~self.agnflag
        xmin=min(var[baseflag])
        xmax=max(var[baseflag])
        #print 'xmin, xmax = ',xmin,xmax
        print 'KS test comparing members and exterior'
        (D,p)=ks(var[f1],var[f2])

        #t=anderson.anderson_ksamp([var[f1],var[f2]])

        #print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
        #print 'anderson statistic = ',t[0]
        #print 'critical values = ',t[1]
        #print 'p-value = ',t[2]
        if plotsingle:
            plt.figure()#figsize=(12,6))
            plt.title('Member vs. External ('+self.prefix+')')
            subplots_adjust(bottom=.15,left=.15)
            print 'hey'

        plt.xlabel(xlab,fontsize=18)
        #plt.ylabel('$Cumulative \ Distribution $',fontsize=20)
        plt.legend(loc='lower right')

        plt.hist(var[f1],bins=len(var[f1]),cumulative=True,histtype='step',normed=True,label='Core',range=(xmin,xmax),color='k')
            #print var[f2]
        plt.hist(var[f2],bins=len(var[f2]),cumulative=True,histtype='step',normed=True,label='External',range=(xmin,xmax),color='0.5')
        ylim(-.05,1.05)
        ax=gca()
        text(.9,.25,'$D = %4.2f$'%(D),horizontalalignment='right',transform=ax.transAxes,fontsize=16)
        text(.9,.1,'$p = %5.4f$'%(p),horizontalalignment='right',transform=ax.transAxes,fontsize=16)


        return D, p


    def compare_cluster_exterior(self):
        plt.figure(figsize=plotsize_single)
        plt.subplots_adjust(bottom=.15,hspace=.4,top=.95)
        plt.subplot(2,2,1)
        self.compare_single((self.logstellarmass),baseflag=(self.sampleflag & ~self.agnflag),plotsingle=False,xlab='$ log_{10}(M_*/M_\odot) $',plotname='stellarmass')
        plt.legend(loc='upper left')
        plt.xticks(np.arange(9,12,.5))
        plt.xlim(8.9,11.15)
        #xlim(mstarmin,mstarmax)
        plt.subplot(2,2,2)
        self.compare_single(self.gim2d.B_T_r,baseflag=(self.sampleflag & ~self.agnflag),plotsingle=False,xlab='$GIM2D \ B/T $',plotname='BT')
        plt.xticks(np.arange(0,1.1,.2))
        plt.xlim(-.05,.85)
        plt.subplot(2,2,3)
        self.compare_single(self.s.ZDIST,baseflag=(self.sampleflag & ~self.agnflag),plotsingle=False,xlab='$ Redshift $',plotname='zdist')
        plt.xticks(np.arange(0.02,.055,.01))
        plt.xlim(.0146,.045)
        plt.subplot(2,2,4)
        #self.compare_single(self.s.SERSIC_TH50*self.da,baseflag=(self.sampleflag & ~self.agnflag),plotsingle=False,xlab='$R_e(r) \ (kpc)$',plotname='Rer')
        self.compare_single(self.gim2d.Rhlr,baseflag=(self.sampleflag & ~self.agnflag),plotsingle=False,xlab='$R_e(r) \ (kpc)$',plotname='Rer')
        #xticks(arange(2,20,2))
        #plt.xlim(2,20)
        plt.text(-1.5,1,'$Cumulative \ Distribution$',fontsize=22,transform=plt.gca().transAxes,rotation=90,verticalalignment='center')
        #plt.savefig(homedir+'research/LocalClusters/SamplePlots/cluster_exterior.png')
        #plt.savefig(homedir+'research/LocalClusters/SamplePlots/cluster_exterior.eps')
        plt.savefig(figuredir+'fig5.eps')
    def compare_BT(self,isoflag=0,blueflag=False):
         if isoflag:
             self.compareiso(self.gim2d.B_T_r,baseflag=(self.gim2dflag & self.sdssspecflag & ~self.agnflag),plotflag=1,xlab='$GIM2D \ B/T $',plotname='BTiso')
         elif blueflag:
             self.compare(self.gim2d.B_T_r,baseflag=(self.bluesampleflag & self.gim2dflag & self.sdssspecflag & ~self.agnflag),plotflag=1,xlab='$GIM2D \ B/T $',plotname='BT')
         else:
             self.compare(self.gim2d.B_T_r,baseflag=(self.sampleflag & self.gim2dflag & self.sdssspecflag & ~self.agnflag),plotflag=1,xlab='$GIM2D \ B/T $',plotname='BT')
    def compare_BA(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.SERSIC_BA,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$B/A $',plotname='BAiso')
         else:
             self.compare(self.s.SERSIC_BA,baseflag=(self.sampleflag  & ~self.agnflag),plotflag=1,xlab='$B/A $',plotname='BA')
    def compare_redshift(self):
         self.compare(self.s.ZDIST,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ ZDIST $',plotname='ZDIST')
    def compare_sersicn(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.fcnsersic1,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ 24um \ SERSIC \ N $',plotname='sersicn24iso')
         else:
             self.compare(self.s.fcnsersic1,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ 24um \ SERSIC \ N $',plotname='sersicn24')
    def compare_ssfr(self,isoflag=0):
         if isoflag:
             print 'log(M*) < 10.41'
             self.compareiso(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$sSFR $',plotname='ssfriso')
             print 'log(M*) > 10.41'
             self.compareiso(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='$sSFR $',plotname='ssfriso')
         else:
             print 'log(M*) < 10.41'
             self.compare(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$ sSFR$',plotname='ssfr_lm')
             print 'log(M*) > 10.41'
             self.compare(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='$ sSFR$',plotname='ssfr_hm')
    def compare_mass_bymass(self,isoflag=0):
         x=self.logstellarmass
         if isoflag:
             print 'log(M*) < 10.41'
             self.compareiso(x,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$M* $',plotname='massiso_lm')
             print 'log(M*) > 10.41'
             self.compareiso(x,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='M* $',plotname='massiso_hm')
         else:
             print 'log(M*) < 10.41'
             self.compare(x,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$ M* \ (low \ mass)$',plotname='mass_lm')
             print 'log(M*) > 10.41'
             self.compare(x,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='$ M* \ (high \ mass)$',plotname='mass_hm')
    def compare_BT_bymass(self,isoflag=0):
         if isoflag:
             print 'log(M*) < 10.41'
             self.compareiso(self.gim2d.B_T_r,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$B/T \ iso \ (low \ mass) $',plotname='BTiso_lm')
             print 'log(M*) > 10.41'
             self.compareiso(self.gim2d.B_T_r,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='$B/T \ iso \ (high \ mass) $',plotname='BTiso_hm')
         else:
             print 'log(M*) < 10.41'
             self.compare(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41)),plotflag=1,xlab='$ B/T \ (low \ mass)$',plotname='BT_lm')
             print 'log(M*) > 10.41'
             self.compare(self.ssfr,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass > 10.41)),plotflag=1,xlab='$ B/T \ (high \ mass)$',plotname='BT_hm')
    def compare_HAEW_conc(self,isoflag=0):
        haflag=(self.s.HAEW > 0.1)
        if isoflag:
             self.compareiso(self.s.HAEW,baseflag=(self.sampleflag & ~self.agnflag & haflag & (self.logstellarmass < 10.41)),plotflag=1,xlab=r'$H\alpha \ EW $',plotname='haewiso')
        else:
             self.compare(self.s.HAEW,baseflag=(self.sampleflag & ~self.agnflag & haflag & (self.logstellarmass < 10.41)),plotflag=1,xlab=r'$H \alpha \ EW$',plotname='haew')
    def compare_HI(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.HIDef,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41) & self.HIflag),plotflag=1,xlab='$HI \ Def $',plotname='ssfriso')
         else:
             self.compare(self.s.HIDef,baseflag=(self.sampleflag & ~self.agnflag & (self.logstellarmass < 10.41) & self.HIflag),plotflag=1,xlab='$ HI \ Def$',plotname='ssfr')
    def compare_nsasersicn(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.SERSIC_N,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ r-band \ SERSIC \ N $',plotname='sersicnr')
         else:
             self.compare(self.s.SERSIC_N,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ r-band \ SERSIC \ N $',plotname='sersicnr')

    def compare_nsasersicth50(self):
         self.compare(self.s.SERSIC_TH50,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ r-band \ SERSIC \ R_e $',plotname='Rer')

    def compare_stellarmass(self,isoflag=0):
         if isoflag:
             self.compareiso((self.logstellarmass),baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ log_{10}(M_*/M_\odot) $',plotname='stellarmassiso')
         else:
             self.compare((self.logstellarmass),baseflag=(self.sampleflag & ~self.agnflag & self.sbflag),plotflag=1,xlab='$ log_{10}(M_*/M_\odot) $',plotname='stellarmass')

    def compare_stellarmasssurfden(self,isoflag=0):
         if isoflag:
             self.compareiso((self.logstellarmass-log10(pi*self.isorad.NSA**2)),baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ log_{10}(M_*/(\pi R_{iso}^2)) $',plotname='stellarmasssurfdeniso')
         else:
             self.compare((self.logstellarmass-log10(pi*self.isorad.NSA**2)),baseflag=(self.sampleflag & ~self.agnflag & self.sbflag),plotflag=1,xlab='$ log_{10}(M_*/M_\odot) $',plotname='stellarmasssurfden')

    def compare_LIRstellarmass(self):
         self.compare(np.log10(self.s.LIR_ZDIST/self.s.STELLARMASS),baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ log_{10}(L_{IR}/M_*) (L_\odot/M_\odot) $',plotname='LIRstellarmass')

    def compare_LIR(self):
         self.compare(np.log10(self.s.LIR_ZDIST),baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ log_{10}(L_{IR}) (L_\odot) $',plotname='LIR')

    def compare_SFR24stellarmass(self,isoflag=0):
         if isoflag:
             self.compareiso(log10((self.s.SFR_ZDIST)/(10.**(self.logstellarmass-9))),baseflag=(self.isosampleflag & ~self.agnflag & (self.s.SFR_ZDIST > 0.)),plotflag=1,xlab='$log_{10}(sSFR_{24} (Gyr^{-1})) $',plotname='sSFR24iso')
         else:
             self.compare(np.log10(self.s.SFR_ZDIST/(self.s.STELLARMASS/1.e9)),baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ log_{10}(sSFR_{24} (Gyr^{-1})) $',plotname='sSFR24')

    def compare_NUV24(self,isoflag=0):
         x=self.s.NUVr_color + self.s.RMAG - self.s.fcmag1
         if isoflag:
             self.compareiso(x,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ NUV - 24$',plotname='NUV24iso')
         else:
             self.compare(x,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ NUV - 24$',plotname='NUV24')


    def compare_dr(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.DR_R200,baseflag=(self.isosampleflag & self.dvflag & ~self.agnflag),plotflag=1,xlab='$ \Delta r/R_{200} $',plotname='drR200iso')
         else:
             self.compare(self.s.DR_R200,baseflag=(self.sampleflag & ~self.agnflag & self.dvflag),plotflag=1,xlab='$ \Delta r/R_{200} $',plotname='drR200')
    def compare_drtrunc(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.DR_R200,baseflag=(self.isosampleflag & self.dvflag & ~self.agnflag),plotflag=1,xlab='$ \Delta r/R_{200} $',plotname='drR200iso')
         else:
             self.compare(self.s.DR_R200,baseflag=(self.sampleflag & ~self.agnflag & self.dvflag),plotflag=1,xlab='$ \Delta r/R_{200} $',plotname='drR200')
    def compare_color(self):
         self.compare(self.s.NUVr_color,baseflag=(self.sampleflag & ~self.agnflag ),plotflag=1,xlab='$ NUV - r $',plotname='NUVr')

    def compare_mag24(self):
         self.compare(self.s.fcmag1,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ mag_{24} $',plotname='mag24')
    def compare_asymi(self):
         self.compare(self.s.ASYMMETRY[:,6],baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ ASYMMETRY \ i $',plotname='asymi')
    def compare_asymu(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.ASYMMETRY[:,2],baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ ASYMMETRY \ u $',plotname='asymi')
         else:
             self.compare(self.s.ASYMMETRY[:,2],baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ ASYMMETRY \ u $',plotname='asymi')
    def compare_clumpyi(self):
         self.compare(self.s.CLUMPY[:,6],baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ CLUMPY \ i $',plotname='clumpyi')
    def compare_clumpyu(self):
         self.compare(self.s.CLUMPY[:,2],baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ CLUMPY \ u $',plotname='clumpyu')
    def compare_pcs(self):
         self.compare(self.s.p_cs,baseflag=(self.sampleflag & ~self.agnflag & self.zooflag),plotflag=1,xlab='$ p\_cs $',plotname='pcs')
    def compare_pel(self):
         self.compare(self.s.p_el,baseflag=(self.sampleflag & ~self.agnflag & self.zooflag),plotflag=1,xlab='$p\_el $',plotname='pel')
    def compare_pedge(self):
         self.compare(self.s.p_cs,baseflag=(self.sampleflag & ~self.agnflag & self.zooflag),plotflag=1,xlab='$ p\_cs $',plotname='pcs')
    def compare_merger(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.p_mg,baseflag=( ~self.agnflag & self.zooflag),plotflag=1,xlab='$ p\_cs $',plotname='pcs')
         else:
             self.compare(self.s.p_mg,baseflag=(self.sampleflag & ~self.agnflag & self.zooflag),plotflag=1,xlab='$ p\_cs $',plotname='pcs')

    def compare_n2(self):
         self.compare(self.s.N2FLUX,baseflag=(self.sampleflag & ~self.agnflag & self.sdssspecflag &(self.s.N2FLUX > -5)),plotflag=1,xlab='$NII \ Flux $',plotname='n2')
    def compare_av(self):
         self.compare(self.s.AV,baseflag=(self.sampleflag & ~self.agnflag & self.emissionflag & (self.s.AV > -1.)),plotflag=1,xlab='$A_V$',plotname='av')
    def compare_HImass(self,isoflag=0):
         if isoflag:
             self.compareiso(np.log10(self.s.HIMASS),baseflag=(self.isosampleflag & ~self.agnflag & self.HIflag),plotflag=1,xlab='$ log_{10}(M_{HI}/M_\odot )$',plotname='HImassiso')
         else:
             self.compare(np.log10(self.s.HIMASS),baseflag=(self.sampleflag & ~self.agnflag & self.HIflag),plotflag=1,xlab='$ log_{10}(M_{HI}/M_\odot )$',plotname='HImass')
    def compare_HaEW(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.HAEW,baseflag=(self.isosampleflag & ~self.agnflag & self.sdssspecflag &(self.s.HAFLUX > -5)),plotflag=1,xlab='$ H-alpha \ EW $',plotname='haEWiso')
         else:
             self.compare(self.s.HAEW,baseflag=(self.sampleflag & ~self.agnflag & self.sdssspecflag &(self.s.HAFLUX > -5)),plotflag=1,xlab='$ H-alpha \ EW $',plotname='haEW')

    def compare_Ha(self):
         self.compare(self.s.HAFLUX,baseflag=(self.sampleflag & ~self.agnflag & self.sdssspecflag &(self.s.HAFLUX > -5)),plotflag=1,xlab='$ H-alpha \ flux $',plotname='ha')

    def compare_Hb(self):
         self.compare(self.s.HAFLUX,baseflag=(self.sampleflag & ~self.agnflag & self.sdssspecflag &(self.s.HAFLUX > -5)),plotflag=1,xlab='$ H-alpha \ flux $',plotname='hb')

    def compare_gasfrac(self,isoflag=0):
         if isoflag:
             self.compareiso(np.log10(self.s.HIMASS/self.s.STELLARMASS),baseflag=(self.isosampleflag & ~self.agnflag & self.HIflag),plotflag=1,xlab='$ log_{10}(M_{HI}/M_* )$',plotname='HImassfrac')
         else:
             self.compare(np.log10(self.s.HIMASS/self.s.STELLARMASS),baseflag=(self.sampleflag & ~self.agnflag & self.HIflag),plotflag=1,xlab='$ log_{10}(M_{HI}/M_* )$',plotname='HImassfrac')

    def compare_localdens(self,isoflag=0):
         if isoflag:
             self.compareiso(self.s.SIGMA_NN,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{NN} $',plotname='SIGMANNiso')
             self.compareiso(self.s.SIGMA_5,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{5} $',plotname='SIGMA5iso')
             self.compareiso(self.s.SIGMA_10,baseflag=(self.isosampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{10} $',plotname='SIGMA10iso')
         else:
             self.compare(self.s.SIGMA_NN,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{NN} $',plotname='SIGMANN')
             self.compare(self.s.SIGMA_5,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{5} $',plotname='SIGMA5')
             self.compare(self.s.SIGMA_10,baseflag=(self.sampleflag & ~self.agnflag),plotflag=1,xlab='$ \Sigma_{10} $',plotname='SIGMA10')

    def plot_colorcolor24(self):
         # plot u-r vs r-24
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2, (5) size_re, (6) size_iso 
         figure(figsize=(10,8))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.1,top=.95,left=.1,right=.95)
         colors=[log10(self.ssfr),self.logstellarmass,self.sizeratio,self.isosize]
         v1=[ssfrmin,mstarmin,0,0]
         v2=[ssfrmax,mstarmax,1.5,1.5]
         cmaps=['jet_r','jet','jet_r','jet_r']
         colorlabel=['$log_{10}(sSFR_{24})$','$log_{10}(M_*)$','$R_e(24)/R_e(r)$','$R_{iso}(24)/R_{iso}(r)$']
         cbticks=[arange(ssfrmin,ssfrmax+1,1),arange(9.5,12.5,1),arange(0,1.8,.4),arange(0,1.8,.4)]
         y=self.nsamag[:,2] - self.nsamag[:,4]
         x=self.nsamag[:,4]-self.mag24
         #x=self.nsamag[:,4]-self.s.fcmag1
         flag=self.isosampleflag
         for i in range(len(colors)):
             subplot(2,2,i+1)
             #hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5)#,extent=(0,2.,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])
             ax=gca()
             text(.78,.05,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             axis([-5,5,.3,3.1])
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.8,0.05,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         yl='$u - r$'
         xl='$r - 24$'
         text(-.0,-.15,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)

         savefig(homedir+'research/LocalClusters/SamplePlots/colorcolor24.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/colorcolor24.eps')

    def plotcolorcolor(self,colorBT=False,plotnofit=False,colorM=False,colorN=False,plotsingle=True):
        y = self.NUVr
        x =self.nsamag[:,4]-self.mag24
        if colorBT:
            color=self.gim2d.B_T_r
            v1=0
            v2=.6
            cblabel='$B/T$'
            cc='jet'
            size=self.sizeratio
            outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorBT'
            cbticks = np.arange(0,.7,.2)
        elif colorM:
            color=self.logstellarmass
            v1=8.5
            v2=10.8
            cblabel='$\log_{10}(M_\star/M_\odot)$'
            cc='jet'
            size=self.sizeratio
            outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorMstar'
            cbticks = np.arange(8.5,11.2,1)
        elif colorN:
            color=self.s.ng
            v1=.5
            v2=4
            cblabel='$S\'ersic \ n$'
            cc='jet'
            size=self.sizeratio
            outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorSersicN'
            cbticks = np.arange(1,4.5,1)
        else:
            color=self.sizeratio
            v1=0
            v2=1.5
            cblabel='$R_{24}/R_d$'
            cc='jet_r'
            size=self.gim2d.B_T_r
            outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorsize'
            cbticks = np.arange(0,1.5,.2)
        size=np.ones(len(self.s.RA))
            
        flags = [self.sampleflag & self.membflag, self.sampleflag & ~self.membflag]
        nofitflags = [self.allbutgalfitflag  & self.membflag, self.allbutgalfitflag & ~self.membflag]
        if plotsingle:
            plt.figure(figsize=(8,4))
            plt.subplots_adjust(wspace=.01,bottom=.15)
        allax=[]

        for i in range(len(flags)):
            plt.subplot(1,2,i+1)
            if plotnofit:
                if colorBT or colorM or colorN:
                    plt.scatter(x[nofitflags[i]],y[nofitflags[i]],marker='x',c=color[nofitflags[i]],s=60,vmin=v1,vmax=v2)
                else:
                    plt.plot(x[nofitflags[i]],y[nofitflags[i]],'x',color='0.3',markersize=6)


            sp=plt.scatter(x[flags[i]],y[flags[i]],c=color[flags[i]],s=(size[flags[i]]+1)*20,cmap=cc,vmin=v1,vmax=v2)
            allax.append(plt.gca())
            plt.axis([-3.8,5,0,6.5])
            plt.xticks(np.arange(-4,5,2))
            plt.yticks(np.arange(0,7,2))
            if i == 0:
                plt.ylabel('$NUV - r$')
                #plt.text(.95,.9,'$Core$',transform=gca().transAxes,horizontalalignment='right',fontsize=20)
                plt.title('$Core$',fontsize=20)
            if i == 1:
                plt.gca().set_yticklabels(([]))
                #plt.text(.95,.9,'$External$',transform=gca().transAxes,horizontalalignment='right',fontsize=20)
                plt.title('$External$',fontsize=20)
            plt.axvline(x=1.8,ls='--',color='k')
            plt.axhline(y=4,ls='-',color='0.5')
            plt.axhline(y=4.5,ls='--',color='0.5')
            plt.axhline(y=3.5,ls='--',color='0.5')
            
            plt.text(.05,.75,'$Low \ sSFR$',transform=gca().transAxes,horizontalalignment='left',fontsize=16)
            plt.text(.95,.05,'$Dusty$',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
        cb = colorbar(fraction=.06,ax=allax,ticks=cbticks)
        cb.ax.text(3.2,.5,cblabel,rotation=-90,verticalalignment='center',fontsize=20)
        plt.text(-.0,-.19,'$r - 24$',transform=gca().transAxes,horizontalalignment='center',fontsize=22)
        if plotsingle:
            plt.savefig(outfile+'.png')
            plt.savefig(outfile+'.eps')
    def plotcolorcolor3panel(self,plotnofit=True):
        y = self.NUVr
        x =self.nsamag[:,4]-self.mag24
        plt.figure(figsize=(8,9))
        plt.subplots_adjust(wspace=.01,hspace = .01,left=.1,right=.9)
        nrows = 3
        for j in range(nrows):
            if j == 0:
                color=self.sizeratio
                v1=0
                v2=1.5
                cblabel='$R_{24}/R_d$'
                cc='jet_r'
                size=self.gim2d.B_T_r
                outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorsize'
                cbticks = np.arange(0,1.5,.4)
            elif j == 1:
                color=self.gim2d.B_T_r#*self.sizeratio
                v1=0
                v2=.4
                cblabel='$B/T$'
                cc='jet'
                size=self.sizeratio
                outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorBT'
                cbticks = np.arange(0,.7,.2)
            elif j == 2:
                color=self.logstellarmass
                v1=8.5
                v2=10.8
                cblabel='$\log_{10}(M_\star/M_\odot)$'
                cc='jet'
                size=self.sizeratio
                outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorMstar'
                cbticks = np.arange(8.5,11.2,1)
            elif j == 3:
                color=self.s.HIDef
                v1=-.4
                v2=1.4
                cblabel='$HI \ Def$'
                cc='jet'
                size=self.sizeratio
                outfile=homedir+'research/LocalClusters/SamplePlots/colorcolorMstar'
                cbticks = np.arange(-.4,1.5,.4)

            size=np.ones(len(self.s.RA))
            
            flags = [self.sampleflag & self.membflag, self.sampleflag & ~self.membflag]
            nofitflags = [self.allbutgalfitflag  & self.membflag, self.allbutgalfitflag & ~self.membflag]
            allax=[]

            for i in range(len(flags)):
                plt.subplot(nrows,2,2*j+i+1)
                if plotnofit:
                    if j > -1:
                        plt.scatter(x[nofitflags[i]],y[nofitflags[i]],marker='x',c=color[nofitflags[i]],s=60,vmin=v1,vmax=v2)
                    else:
                        plt.plot(x[nofitflags[i]],y[nofitflags[i]],'x',color='0.3',markersize=6)


                sp=plt.scatter(x[flags[i]],y[flags[i]],c=color[flags[i]],s=(size[flags[i]]+1)*15,cmap=cc,vmin=v1,vmax=v2,edgecolors='0.5')
                allax.append(plt.gca())
                plt.axis([-4.6,4.6,0.2,6.5])
                plt.xticks(np.arange(-4,5,2))
                plt.yticks(np.arange(0,7,2))
                if i == 0:
                    #plt.ylabel('$NUV - r$')
                    #plt.text(.95,.9,'$Core$',transform=gca().transAxes,horizontalalignment='right',fontsize=20)
                    if j == 0:
                        plt.title('$Core$',fontsize=20)
                    if j == 1:
                        plt.text(-.1,0.5,'$NUV-r$',transform=gca().transAxes,verticalalignment='center',horizontalalignment='right',rotation=90,fontsize=24)
                if i == 1:
                    plt.gca().set_yticklabels(([]))
                    
                    if j == 0:
                        plt.title('$External$',fontsize=20)
                    #if j < nrows:
                    #    plt.gca().set_xticklabels(([]))
                plt.axvline(x=1.8,ls='--',color='k')
                plt.axhline(y=4,ls='-',color='0.5')
                plt.axhline(y=4.5,ls='--',color='0.5')
                plt.axhline(y=3.5,ls='--',color='0.5')
            
                #plt.text(.65,.9,'$Low \ sSFR$',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
                #plt.text(.95,.05,'$Dusty$',transform=gca().transAxes,horizontalalignment='right',fontsize=16)
            if nrows == 3:
                cbfraction = .015
            else:
                cbfraction = .012
            cb = colorbar(fraction=cbfraction,ax=allax,ticks=cbticks)
            cb.ax.text(5.,.5,cblabel,rotation=-90,verticalalignment='center',fontsize=20)
            if j == 2:
                plt.text(-.0,-.3,'$r - 24$',transform=gca().transAxes,horizontalalignment='center',fontsize=24)
        #hexbin(
        outfile=homedir+'research/LocalClusters/SamplePlots/colorcolor3panel'
        plt.savefig(outfile+'.png')
        plt.savefig(outfile+'.eps')
        #plt.savefig(homedir+'Dropbox/Research/MyPapers/LCSpaper1/submit/resubmit/fig16.eps')
        #plt.savefig(homedir+'Dropbox/Research/MyPapers/LCSpaper1/submit/resubmit4/fig12.eps')
        a=sum((self.NUVr > 3.5) & (self.NUVr < 4.5) & self.sampleflag & self.membflag)
        b=sum(self.sampleflag & self.membflag)
        r,errup,errdown = my.ratioerror(a,b)
        print 'Fraction of cluster galaxies in green valley = %5.2f+ %5.2f/-%5.2f(%i/%i)'%(r,errup,errdown,a,b)
        a=sum((self.NUVr > 3.5) & (self.NUVr < 4.5) & self.sampleflag & ~self.membflag)
        b=sum(self.sampleflag & ~self.membflag)
        r,errup,errdown = my.ratioerror(a,b)
        print 'Fraction of exterior galaxies in green valley = %5.2f+ %5.2f/-%5.2f(%i/%i)'%(r,errup,errdown,a,b)
        flag = (self.NUVr > 3.5) & (self.NUVr < 4.5) & self.sampleflag & self.membflag
        print ''
        print 'size of cluster galaxies in green valley = %.2f +/-%.2f (%.2f)'%(mean(self.sizeratio[flag]),std(self.sizeratio[flag])/np.sqrt(1.*sum(flag)),median(self.sizeratio[flag]))
        flag = (self.NUVr > 3.5) & (self.NUVr < 4.5) & self.sampleflag & ~self.membflag
        print 'size of exterior galaxies in green valley = %.2f +/-%.2f (%.2f)'%(mean(self.sizeratio[flag]),std(self.sizeratio[flag])/np.sqrt(1.*sum(flag)),median(self.sizeratio[flag]))
        print ''
        flag = (x > 1.8) & self.sampleflag & self.membflag
        a=sum((x > 1.8) & self.sampleflag & self.membflag)
        b=sum(self.sampleflag & self.membflag)
        r,errup,errdown = my.ratioerror(a,b)

        print 'Fraction of dusty cluster galaxies = %5.2f+ %5.2f/-%5.2f(%i/%i)'%(r,errup,errdown,a,b)
        print 'ave(median) size of dusty cluster galaxies = %5.2f (%5.2f)'%(np.mean(self.sizeratio[flag]),np.median(self.sizeratio[flag]))

        flag = (x > 1.8) & self.sampleflag & ~self.membflag
        a=sum((x > 1.8)  & self.sampleflag & ~self.membflag)
        b=sum(self.sampleflag & ~self.membflag)
        r,errup,errdown = my.ratioerror(a,b)
        print ''
        print 'Fraction of dusty exterior galaxies = %5.2f+ %5.2f/-%5.2f(%i/%i)'%(r,errup,errdown,a,b)
        print 'ave(median) size of dusty exterior galaxies = %5.2f (%5.2f)'%(np.mean(self.sizeratio[flag]),np.median(self.sizeratio[flag]))
        
    def plot_r24colormag(self):
         # plot u-r vs r-24
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2, (5) size_re, (6) size_iso 
         figure(figsize=(8,6))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.15,top=.95,left=.1,right=.95)
         colors=[log10(self.ssfr),self.logstellarmass,self.sizeratio,self.s.p_cs]
         v1=[ssfrmin,mstarmin,.0,0]
         v2=[ssfrmax,mstarmax,1,1.]
         cmaps=['jet_r','jet','jet_r','jet_r']
         colorlabel=['$log_{10}(sSFR_{24})$','$log_{10}(M_*)$','$R_e(24)/R_e(r)$','$Zoo \ p_{cs}$']
         cbticks=[arange(ssfrmin,ssfrmax+1,1),arange(9.5,12.5,1),arange(0,1.8,.4),arange(0,1.8,.4)]
         #x=self.nsamag[:,4]
         x=self.gi_corr
         y=self.nsamag[:,4]-self.mag24
         #x=self.nsamag[:,4]-self.s.fcmag1
         flag=self.sampleflag
         nplot=1
         for i in range(4):
             subplot(2,2,nplot)
             nplot += 1
             #hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5)#,extent=(0,2.,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])
             ax=gca()
             text(.78,.05,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             axis([-.5,2,-6,5])
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.8,0.05,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         xl='$g - r$'
         yl='$r - 24$'
         text(-.0,-.2,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1.,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)

         savefig(homedir+'research/LocalClusters/SamplePlots/colormag24.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/colormag24.eps')

    def plot_salim07colormag_old(self,sbcutobs=20.5):
        figure(figsize=(10,5))
        subplots_adjust(bottom=.15,left=.1,wspace=.05)
        v1=0.1
        v2=1.
        xl='$M_r$'
        yl='$NUV - r$'
        limits=[-22.8,-16.8,.5,6.9]
        y=self.nsamag[:,1] - self.nsamag[:,4]
        x=self.s.ABSMAG[:,4]
        subplot(1,2,1)
        flag=self.sfsampleflag &  ~self.sampleflag & ~self.agnflag
        plot(x[flag],y[flag],'kx',markersize=8,label='No Fit')

        flag=self.sampleflag  & ~self.agnflag
        z=self.sizeratio
         
        sp=scatter(x[flag],y[flag],c=z[flag],s=50,vmin=v1,vmax=v2,cmap='jet_r')
        xlabel(xl,fontsize=22)
        ylabel(yl,fontsize=22)
        axis(limits)
        ax1=gca()
        #text(0.9,0.9,'$SF $',transform=gca().transAxes,horizontalalignment='right',fontsize=20)
        title('$SF \ Galaxies$',fontsize=20)
        subplot(1,2,2)
        flag=self.sfsampleflag &  ~self.sampleflag & self.agnflag
        plot(x[flag],y[flag],'kx',markersize=8,label='No Fit')

        flag=self.sampleflag  & self.agnflag
        z=self.sizeratio
        sp=scatter(x[flag],y[flag],c=z[flag],s=50,vmin=v1,vmax=v2,cmap='jet_r')
        ax2=gca()
        cb=colorbar(ax=[ax1,ax2],fraction=0.03)
        xl='$M_r$'
        yl='$NUV - r$'
        xlabel(xl,fontsize=22)
        gca().set_yticks([])
        axis(limits)
        #text(0.9,0.9,'$AGN $',transform=gca().transAxes,horizontalalignment='right',fontsize=20)
        title('$AGN$',fontsize=20)
        savefig(homedir+'research/LocalClusters/SamplePlots/salim_colormag.png')
        savefig(homedir+'research/LocalClusters/SamplePlots/salim_colormag.eps')
    def plot_colorcolor(self):
         figure()
         x=self.nsamag[:,2] - self.nsamag[:,4]
         #x=self.gi_corr
         y=self.nsamag[:,1]-self.s.fcmag1
         flag=self.sampleflag  & ~self.agnflag
         #plot(x[flag],y[flag],'bo')
         flag=self.sampleflag  & ~self.agnflag
         #plot(x[flag],y[flag],'ro')
         xl='$u - r$'
         yl='$NUV - 24$'
         xlabel(xl,fontsize=20)
         ylabel(yl,fontsize=20)
         figure()
         flag=self.sampleflag & ~self.agnflag
         z=self.sizeratio
         sp=scatter(x[flag],y[flag],c=z[flag],vmin=.0,vmax=1.,cmap='jet_r')
         cb=colorbar(sp)
         xlabel(xl,fontsize=20)
         ylabel(yl,fontsize=20)

    def plot_wolfcolor(self):
         figure(figsize=(6,4))
         subplots_adjust(bottom=.15,left=.15)
         x=self.nsamag[:,4] - self.nsamag[:,5]
         #y=self.s.NUVr_color
         y=self.nsamag[:,2]-self.nsamag[:,3]
         flag=self.sampleflag  & ~self.agnflag
         plot(x[flag],y[flag],'bo')
         flag=self.sampleflag & self.agnflag
         plot(x[flag],y[flag],'ro')
         xlabel('$r - i$',fontsize=20)
         ylabel('$u - g$',fontsize=20)
         axis([-.2,.8,.2,2.5])
         figure(figsize=(6,4))
         subplots_adjust(bottom=.15,left=.15)
         flag=self.sampleflag & ~self.agnflag
         z=self.sizeratio
         sp=scatter(x[flag],y[flag],c=z[flag],vmin=0.1,vmax=1.,cmap='jet_r')
         cb=colorbar(sp, fraction=0.08)
         axis([-.2,.8,.2,2.5])
         xlabel('$r - i$',fontsize=20)
         ylabel('$u - g$',fontsize=20)

    def plot_ReRiso(self):
         # plot r-band concentratio vs 24-micron concentration
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2
         figure(figsize=(10,8))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.1,top=.95,left=.1,right=.95)
         colors=[log10(self.ssfr),self.logstellarmass,self.logstellarmass-log10(2*pi*self.s.SERSIC_TH50**2*self.s.SERSIC_BA),self.logstellarmass-log10(2*pi*self.isorad.NSA**2*self.s.SERSIC_BA)]
         v1=[ssfrmin,mstarmin,7,7]
         v2=[ssfrmax,mstarmax,9,9]
         cmaps=['jet_r','jet','jet_r','jet_r']
         colorlabel=['$log_{10}(sSFR_{24})$','$log_{10}(M_*)$','$M_*/\pi R_e(r)^2$','$M_* / \pi R_{iso}^2$']
         cbticks=[arange(ssfrmin,ssfrmax+1,1),arange(9.5,12.5,1),arange(v1[2],v2[2]+1,1),arange(v1[3],v2[3]+1,1)]
         #y=self.s.fcre1*mipspixelscale/self.isorad.MIPS
         #x=self.s.SERSIC_TH50/self.isorad.NSA
         y=self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
         x=self.isorad.MIPS/self.isorad.NSA
         flag=self.isosampleflag & (self.s.cnumerical_error_flag24 < .1)
         for i in range(len(colors)):
             subplot(2,2,i+1)
             axis([-.1,2.2,-.1,1.9])
             #hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5,extent=(0,2.,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])

             ax=gca()
             text(.8,.9,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))

             drawbox([1.1,.7,.6,.6,0],'k-')
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.82,0.55,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         yl='$R_e(24)/R_{e}(r)$'
         xl='$R_{iso}(24)/R_{iso}(r)$'
         text(-.0,-.15,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)

         savefig(homedir+'research/LocalClusters/SamplePlots/concentration.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/concentration.eps')

    def plot_ReRisoenv(self):
         # plot r-band concentratio vs 24-micron concentration
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2
         figure(figsize=(10,8))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.1,top=.95,left=.1,right=.95)
         colors=[log10(self.s.SIGMA_5),self.s.DR_R200,self.s.CLUSTER_PHI,self.s.HIDef]
         v1=[-.5,0,0,0]
         v2=[1.5,2,90,1]
         cmaps=['jet_r','jet','jet_r','jet_r']
         colorlabel=['$log_{10}(\Sigma_{5})$','$\Delta r/R_{200}$','$\Phi$','$HI \ Def$']
         cbticks=[arange(v1[0],v2[0]+1,1),arange(v1[1],v2[1]+1,1),arange(v1[2],v2[2]+1,20),arange(v1[3],v2[3]+1,1)]
         #y=self.s.fcre1*mipspixelscale/self.isorad.MIPS
         #x=self.s.SERSIC_TH50/self.isorad.NSA
         y=self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
         x=self.isorad.MIPS/self.isorad.NSA
         flag=self.isosampleflag & (self.s.cnumerical_error_flag24 < .1) & (self.dvflag)
         for i in range(len(colors)):
             subplot(2,2,i+1)
             hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5,extent=(0,2.,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])
             ax=gca()
             text(.8,.9,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             axis([-.1,2.2,-.1,1.9])
             drawbox([1.1,.7,.6,.6,0],'k-')
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.82,0.55,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         yl='$R_e(24)/R_{e}(r)$'
         xl='$R_{iso}(24)/R_{iso}(r)$'
         text(-.0,-.15,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)

         savefig(homedir+'research/LocalClusters/SamplePlots/concentration.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/concentration.eps')


    def plot_Risoenv(self):
         # plot r-band concentratio vs 24-micron concentration
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2
         figure(figsize=(10,8))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.1,top=.95,left=.1,right=.95)
         colors=[log10(self.s.SIGMA_5),self.s.DR_R200,log10(self.ssfr),self.logstellarmass-log10(2*pi*self.s.SERSIC_TH50**2*self.s.SERSIC_BA)]
         v1=[-.2,0,-12,6.5]
         v2=[1.2,2.5,-9,8.5]
         cmaps=['jet','jet_r','jet_r','jet']
         colorlabel=['$log_{10}(\Sigma_{5})$','$\Delta r/R_{200}$','$log_{10}(sSFR)$','$log_{10}(M_*/\pi R_e^2)$']
         cbticks=[arange(v1[0],v2[0]+1,1),arange(v1[1],v2[1]+1,1),arange(v1[2],v2[2]+1,1),arange(v1[3],v2[3]+1,1)]
         #y=self.s.fcre1*mipspixelscale/self.isorad.MIPS
         #x=self.s.SERSIC_TH50/self.isorad.NSA
         x=self.logstellarmass
         y=self.isorad.MIPS/self.isorad.NSA
         flag=self.isosampleflag  & (self.dvflag)
         for i in range(len(colors)):
             subplot(2,2,i+1)
             hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5,extent=(8.5,11.5,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])
             ax=gca()
             text(.8,.9,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             axis([8,12.5,-.1,1.9])
             #drawbox([1.1,.7,.6,.6,0],'k-')
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.82,0.55,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         xl='$M_* (M_\odot)$'
         yl='$R_{iso}(24)/R_{iso}(r)$'
         text(-.0,-.15,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)

         savefig(homedir+'research/LocalClusters/SamplePlots/isosizeenv.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/isosizeenv.eps')


    def plot_Rmasscolor(self,colors,v1,v2,cmaps,colorlabel,cbticks,reflag=1):
         # plot r-band concentratio vs 24-micron concentration
         # color code by (1) sSFR, (2) M*, (3) M*/pire^2, (4) M*/piRiso^2
         figure(figsize=(10,8))
         subplots_adjust(wspace=.01,hspace=.01,bottom=.1,top=.95,left=.1,right=.95)
         #y=self.s.fcre1*mipspixelscale/self.isorad.MIPS
         #x=self.s.SERSIC_TH50/self.isorad.NSA
         x=self.logstellarmass
         if reflag:
             y=self.s.fcre1*mipspixelscale/self.s.SERSIC_TH50
             flag=self.sampleflag  & (self.dvflag) & ~self.agnflag
         else:
             y=self.isorad.MIPS/self.isorad.NSA
             flag=self.isosampleflag  & (self.dvflag)& ~self.agnflag
         for i in range(len(colors)):
             subplot(2,2,i+1)
             hexbin(x[flag],y[flag],C=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i],gridsize=7,alpha=0.5,extent=(8.5,11.5,0,1.5))
             sp=scatter(x[flag],y[flag],s=40,c=colors[i][flag],vmin=v1[i],vmax=v2[i],cmap=cmaps[i])
             ax=gca()
             text(.8,.9,colorlabel[i],transform=ax.transAxes,horizontalalignment='right',fontsize=18)
             if i < 2:
                 ax.set_xticklabels(([]))
             if i in [1,3]:
                 ax.set_yticklabels(([]))
             axis([8,12.5,-.1,1.9])
             #drawbox([1.1,.7,.6,.6,0],'k-')
             axins1 = inset_axes(ax,
                     width="5%", # width = 10% of parent_bbox width
                     height="40%", # height : 50%
                     bbox_to_anchor=(.82,0.55,1,1),
                     bbox_transform=ax.transAxes,
                     borderpad=0,
                     loc=3)

             cb=colorbar(sp,cax=axins1,ticks=cbticks[i])
         xl='$M_* (M_\odot)$'
         if reflag:
             yl='$R_{e}(24)/R_{e}(r)$'
         else:
             yl='$R_{iso}(24)/R_{iso}(r)$'
         text(-.0,-.15,xl,transform=ax.transAxes,horizontalalignment='center',fontsize=28)
         text(-1.2,1,yl,transform=ax.transAxes,verticalalignment='center',fontsize=28,rotation=90)


    def plotRenv1(self):
         colors=[log10(self.s.SIGMA_5),self.s.DR_R200,log10(self.ssfr),self.logstellarmass-log10(2*pi*self.s.SERSIC_TH50**2*self.s.SERSIC_BA)]
         v1=[-.2,0,-12,6.5]
         v2=[1.2,2.,-9,8.5]
         cmaps=['jet','jet_r','jet_r','jet']
         colorlabel=['$log_{10}(\Sigma_{5})$','$\Delta r/R_{200}$','$log_{10}(sSFR)$','$log_{10}(M_*/\pi R_e^2)$']
         cbticks=[arange(v1[0],v2[0]+1,1),arange(v1[1],v2[1]+1,1),arange(v1[2],v2[2]+1,1),arange(v1[3],v2[3]+1,1)]
         self.plot_Rmasscolor(colors,v1,v2,cmaps,colorlabel,cbticks)

         savefig(homedir+'research/LocalClusters/SamplePlots/Resizeenv1.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/Resizeenv1.eps')
         self.plot_Rmasscolor(colors,v1,v2,cmaps,colorlabel,cbticks,reflag=0)

         savefig(homedir+'research/LocalClusters/SamplePlots/Risosizeenv1.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/Risosizeenv1.eps')

    def plotRenv2(self):
         colors=[log10(self.s.HAEW),self.s.CLUSTER_LX*self.membflag + zeros(len(self.s.CLUSTER),'f')*~self.membflag,self.gim2d.B_T_r,self.s.SERSIC_N]
         v1=[0,0,0,0.5]
         v2=[2,3,.5,4]
         cmaps=['jet_r','jet','jet','jet']
         colorlabel=[r'$log_{10}(H \alpha \ EW)$','$L_X$','$B/T$','$Sersic_n$']
         cbticks=[arange(v1[0],v2[0]+1,1),arange(v1[1],v2[1]+1,2),arange(v1[2],v2[2]+1,.2),arange(v1[3],v2[3]+1,1)]
         self.plot_Rmasscolor(colors,v1,v2,cmaps,colorlabel,cbticks)

         savefig(homedir+'research/LocalClusters/SamplePlots/Resizeenv2.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/Resizeenv2.eps')
         self.plot_Rmasscolor(colors,v1,v2,cmaps,colorlabel,cbticks,reflag=0)

         savefig(homedir+'research/LocalClusters/SamplePlots/Risosizeenv2.png')
         savefig(homedir+'research/LocalClusters/SamplePlots/Risosizeenv2.eps')

    def plotSNRSE_LIR(self):
         for i in range(len(clusternames)):
             c=clusternames[i]
             flag= (c == self.s.CLUSTER)
             plot(log10(self.s.LIR_ZDIST[flag]),self.s.SNR_SE[flag],'k.',color=colors[i],marker=shapes[i])

    def plotall(self):
         self.compare_BT()
         self.compare_sersicn()
         self.compare_dr()
         self.compare_color()
         self.compare_mag24()
         self.compare_asymu()
         #self.compare_clumpyu()
         self.compare_pcs()
         self.compare_pel()
         self.compare_nsasersicn()
         self.compare_localdens()
         #self.compare_n2()
         self.compare_HaEW()
         self.compare_Ha()
         self.compare_Hb()
         self.compare_av()
         self.compare_gasfrac()
         self.compare_SFR24stellarmass()
         self.compare_NUV24()

         self.compare(self.s.SNR_SE,baseflag=self.sampleflag,plotflag=1,xlab='$ SNR\_SE $',plotname='SNRSE')
         self.compare(np.log10(self.s.LIR_ZDIST),baseflag=self.sampleflag,plotflag=1,xlab='$ log_{10}(LIR\_ZDIST/L_\odot) $',plotname='LIRZDIST')

         #self.compare_nsasersicth50()
    def compare_all(self,inputcolumns,tablesuffix=''):
         allcolumns=nsa_columns+n_columns+galfit24_columns+gim2d_columns+zoo_columns+ce_columns+ld_columns+my_columns
         allcolumns=inputcolumns
         sdssspecflag=['D4000','HAEW','VDISP','HAFLUX','N2FLUX','HBFLUX','O3FLUX','AHDEW','AV']
         cnames=[]
         d1=[]
         p1=[]
         d2=[]
         p2=[]
         for name in allcolumns:
             print '******************************************'
             baseflag=self.sampleflag & ~self.agnflag & self.sbflag
             if name in sdssspecflag:
                 baseflag=baseflag & self.emissionflag #& self.sdssspecflag
             if name in gim2d_columns:
                 baseflag = baseflag & self.gim2dflag
             if name in zoo_columns:
                 baseflag = baseflag & self.zooflag
             if name.find('HI') > -1:
                 baseflag = baseflag & self.HIflag

             if (name.find('CLUMPY') > -1) | (name.find('ASYMMETRY') > -1):
                 for j in range(7):
                     print '################################'
                     print name+'[:,'+str(j)+']'
                     a,b,c,d=self.compare(self.s[name][:,j],baseflag=baseflag)
                     d1.append(a)
                     p1.append(b)
                     d2.append(c)
                     p2.append(d)
                     cnames.append(name+'[:,'+str(j)+']')
             else:
                 print name
                 #t=self.compare(self.s[name],baseflag=baseflag)
                 #print t
                 a,b,c,d=self.compare(self.s[name],baseflag=baseflag)
                 print a,b,c,d
                 d1.append(a)
                 p1.append(b)
                 d2.append(c)
                 p2.append(d)
                 cnames.append(name)
         self.d1=d1
         self.p1=p1
         self.d2=d2
         self.p2=p2
         self.cnames=cnames
         self.ksresults=Table()
         arrays=[self.cnames,self.d1,self.p1,self.d2,self.p2]
         colnames=['VARIABLE','KSD-CF','KSP-CF','KSD-TN','KSP-TN']
         datatypes=['S16','f','f','f','f']
         print 'got here 1'
         for i in range(len(self.cnames)):
             self.cnames[i]=self.cnames[i].replace('_','\_')
         print self.cnames
         newcol=Column(data=np.array(self.cnames,'S16'),name='VARIABLE',format='%16s')
         self.ksresults.add_column(newcol)
         print 'got here 2'
         newcol=Column(data=np.array(self.d1,'f'),name=colnames[1],format='%5.4f')
         self.ksresults.add_column(newcol)
         print 'got here 3'
         newcol=Column(data=np.array(self.p1,'f'),name=colnames[2],format='%5.4f')
         self.ksresults.add_column(newcol)
         print 'got here 4'
         newcol=Column(data=np.array(self.d2,'f'),name=colnames[3],format='%5.4f')
         self.ksresults.add_column(newcol)
         print 'got here 5'
         newcol=Column(data=np.array(self.p2,'f'),name=colnames[4],format='%5.4f')
         self.ksresults.add_column(newcol)
         outfile=homedir+'research/LocalClusters/NSAmastertables/KS_results'+tablesuffix+'.tex'
         print outfile

         self.ksresults.write(outfile,format='latex')
    def plotsizevsStellarmass(self,plotsingle=1,plotagn=0):
        pflag=self.sampleflag & ~self.agnflag #& self.membflag
        if plotsingle:
            figure()
            subplots_adjust(bottom=.15,left=.15)
        plot(self.logstellarmass[pflag & ~self.upperlimit],self.sizeratio[pflag & ~self.upperlimit],'ko',label='Star-Forming')
        spearman(self.logstellarmass[pflag & ~self.upperlimit],self.sizeratio[pflag & ~self.upperlimit])
        xbin,ybin,ybinerr=my.binit(self.logstellarmass[pflag & ~self.upperlimit],self.sizeratio[pflag & ~self.upperlimit],4)
        plot(xbin,ybin,'bo',markersize=16,label='Binned SF')
        errorbar(xbin,ybin,ybinerr,fmt=None,ecolor='k',label='_nolegend_')
        plot(self.logstellarmass[pflag & self.upperlimit & ~self.pointsource],self.sizeratio[pflag & self.upperlimit & ~self.pointsource],'kv',markersize=10)
        plot(self.logstellarmass[pflag & self.pointsource],self.sizeratio[pflag & self.pointsource],'k*',markersize=10)
        if plotagn:
            plot(self.logstellarmass[self.sampleflag & self.AGNKAUFF],self.sizeratio[self.sampleflag & self.AGNKAUFF],'k*',mec='0.5',mfc='None',markersize=10,label='AGN')
        plot(self.logstellarmass[self.sampleflag & self.unknownagn],self.sizeratio[self.sampleflag & self.unknownagn],'k*',mec='c',mfc='None',markersize=10,label='AGN-unknown')
        axis([9,11,.1,3])
        gca().set_yscale('log')
        legend(numpoints=1)
        xlabel('$log_{10}(M_*/M_\odot) $',fontsize=20)
        ylabel('$R_e(24)/R_e(r)  $',fontsize=20)
    def plothistssfr(self,minmass=None,maxmass=None,plotsingle=True,sfms=False):
        '''
        sfms flag normalizes sSFR by sSFR of MS = 0.08
        '''
        if plotsingle:
            plt.figure()
            plt.subplots_adjust(bottom=.15,left=.15)
        f1=self.lirflag & self.membflag & ~self.agnflag 
        f2=self.lirflag & ~self.membflag & ~self.agnflag
        if minmass != None:
            f1 = f1 & (self.logstellarmass > minmass)
            f2 = f2 & (self.logstellarmass > minmass)
        if maxmass != None:
            f1 = f1 & (self.logstellarmass < maxmass)
            f2 = f2 & (self.logstellarmass < maxmass)
        
        normfactor = 1.e9
        mybins=arange(-2.2,1,.2)
        # uncomment if you want to normalize by mass of sfms
        if sfms:
            normfactor=1.e9/.08
            mybins=arange(-2.2,1,.2)
        plt.hist(log10(self.ssfr[f1]*normfactor),bins=mybins,histtype='step',label='Cluster',color='r',hatch='\\',normed=True)
        plt.hist(log10(self.ssfr[f2]*normfactor),bins=mybins,histtype='step',label='External',color='b',hatch='/',normed=True)
        ssfr1=np.log10(self.ssfr[f1]*normfactor)
        ssfr2=np.log10(self.ssfr[f2]*normfactor)
        print 'CLUSTER sSFR: mean (median) +/- std (error mean) = %5.2f (%5.2f) +/- %5.2f (%5.2f)'%(np.mean(ssfr1),np.median(ssfr1),np.std(ssfr1),np.std(ssfr1)/np.sqrt(1.*sum(f1)))
        print 'CLUSTER N_TOTAL:', sum(f1)
        print 'EXTERIOR   sSFR: mean (median) +/- std (error mean) = %5.2f (%5.2f) +/- %5.2f (%5.2f)'%(np.mean(ssfr2),np.median(ssfr2),np.std(ssfr2),np.std(ssfr2)/np.sqrt(1.*sum(f2)))
        print 'EXTERIOR   N_TOTAL:', sum(f2)

        if plotsingle:
            if sfms:
                plt.xlabel('$log_{10}(sSFR/sSFR_{MS}) $')
                plt.axvline(x=0,ls='--',color='k')
            else:
                plt.xlabel('$log_{10}(sSFR/Gyr) $')
            plt.ylabel('$ Frequency $')
        plt.legend(loc='upper left')
        print 'comparing sSFR:'
        ks(ssfr1,ssfr2)
        print 'comparing Stellar Mass:'
        ks(self.logstellarmass[f1],self.logstellarmass[f2])

        print 'comparing Re(24)/Re(r):'
        ks(self.logstellarmass[f1 & self.sampleflag],self.logstellarmass[f2 & self.sampleflag])
        print np.mean(self.logstellarmass[f1]),np.mean(self.logstellarmass[f2])
    def plotssfrhistbymass(self):
        plt.figure()
        m1=[9.3,9.8,10.3]
        m2=[9.8,10.3,10.8]
        for i in range(3):
            plt.subplot(3,1,i+1)
            print '#######################################'
            print '#####   ',m1[i],'< log(M) < ',m2[i],'  ######'
            print '#######################################'

            self.plothistssfr(minmass=m1[i],maxmass=m2[i],plotsingle=False)
        plt.savefig(homedir+'/research/LocalClusters/SamplePlots/ssfrhistbymass.eps')
        plt.savefig(homedir+'/research/LocalClusters/SamplePlots/ssfrhistbymass.png')



    def calc_size_starburst(self):
        # combine exterior and cluster galaxies
        f1=self.starburst & self.bluesampleflag & ~self.agnflag
        f2=~self.starburst & self.bluesampleflag & ~self.agnflag
        print 'mean (median) size of starburst galaxies = %5.2f (%5.2f) +/- %5.2f'%(mean(self.sizeratio[f1]),median(self.sizeratio[f1]),std(self.sizeratio[f1])/sqrt((1.*sum(f1))))
        print 'mean (median) size of non-starburst galaxies = %5.2f (%5.2f) +/- %5.4f'%(mean(self.sizeratio[f2]),median(self.sizeratio[f2]),std(self.sizeratio[f2])/sqrt(1.*sum(f2)))
        # CLUSTER ONLY
        print '\n CLUSTER ONLY \n'
        f1=self.starburst & self.bluesampleflag & self.membflag
        f2=~self.starburst & self.bluesampleflag & self.membflag
        print 'mean (median) size of starburst galaxies = %5.2f (%5.2f) +/- %5.2f'%(mean(self.sizeratio[f1]),median(self.sizeratio[f1]),std(self.sizeratio[f1])/sqrt(1.*sum(f1)))
        print 'mean (median) size of non-starburst galaxies = %5.2f (%5.2f) +/- %5.4f'%(mean(self.sizeratio[f2]),median(self.sizeratio[f2]),std(self.sizeratio[f2])/sqrt(1.*sum(f2)))
        # EXTERIOR ONLY
        print '\n EXTERIOR ONLY \n'
        f1=self.starburst & self.bluesampleflag & ~self.membflag
        f2=~self.starburst & self.bluesampleflag & ~self.membflag
        print 'mean (median) size of starburst galaxies = %5.2f (%5.2f) +/- %5.2f'%(mean(self.sizeratio[f1]),median(self.sizeratio[f1]),std(self.sizeratio[f1])/sqrt(1.*sum(f1)))
        print 'mean (median) size of non-starburst galaxies = %5.2f (%5.2f) +/- %5.4f'%(mean(self.sizeratio[f2]),median(self.sizeratio[f2]),std(self.sizeratio[f2])/sqrt(1.*sum(f2)))

    def plotsffracvsMstar(sbcutobs=20,masscut=0):

        figure(figsize=(10,8))
    
        subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
        i=0

        # bin by stellar mass
        # get fraction of SF
        flag =  ~self.agnflag & self.membflag
        x = self.logstellarmass[flag]
        y = self.lirflag[flag]
        xmax = max(x)
        bins = np.arange(8.,12.1,.5)
        binnumb=((xmax-xmin)*nbin/(xmax-xmin))

        xlabel('$ L_X \ (10^{43} \ erg \ s^{-1} )$',fontsize = 28)
        ylabel('$SF \ Frac$',fontsize = 28)
        #axis([.05,10,0.,1.05])
        savefig(homedir+'/research/LocalClusters/SamplePlots/sffracvsMstar.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/sffracvsMstar.png')



def print_tables():
    s.compare_all(nsa_columns,tablesuffix='nsa')
    s.compare_all(galfit24_columns,tablesuffix='galfit24')
    s.compare_all(zoo_columns,tablesuffix='zoo')
    s.compare_all(gim2d_columns,tablesuffix='gim2d')
    s.compare_all(n_columns+ld_columns+ce_columns,tablesuffix='ldce')
    s.compare_all(my_columns,tablesuffix='my')

def print_tables_nc():
    nc.compare_all(nsa_columns,tablesuffix='nsa_nc')
    nc.compare_all(galfit24_columns,tablesuffix='galfit24_nc')
    nc.compare_all(zoo_columns,tablesuffix='zoo_nc')
    nc.compare_all(gim2d_columns,tablesuffix='gim2d_nc')
    nc.compare_all(n_columns+ld_columns+ce_columns,tablesuffix='ldce_nc')
    nc.compare_all(my_columns,tablesuffix='my_nc')


def plotRevsmagboth(absmagflag=0):
    figure(figsize=(10,5))
    subplots_adjust(wspace=0.02,bottom=.15,left=.12,top=.95,right=.95)

    subplot(1,2,1)
    s.plotRevsmag(plotsingle=0,absmagflag=absmagflag)
    ylabel('$ R_e \ (arcsec) $',fontsize=24)
    ax=gca()
    text(.7,.9,'$r-band $',transform=ax.transAxes,fontsize=20)

    subplot(1,2,2)
    s.plotRe24vsmag(plotsingle=0,absmagflag=absmagflag)
    ax=gca()
    text(.7,.9,'$24 \mu m $',transform=ax.transAxes,fontsize=20)
    ax.set_yticklabels(([]))
    text(-.025,-.09,'$ m_{24}$',transform=ax.transAxes,horizontalalignment='center',fontsize=24)

    if absmagflag:
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsM24both.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsM24both.png')
    else:
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsmagboth.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsmagboth.png')

def plotRevsrmagboth():
    figure(figsize=(10,5))
    subplots_adjust(wspace=0.02,bottom=.15,left=.12,top=.95,right=.95)

    subplot(1,2,1)
    s.plotRevsrmag(plotsingle=0)
    ylabel('$ R_e \ (arcsec) $',fontsize=24)
    ax=gca()
    text(.1,.9,'$r-band $',transform=ax.transAxes,fontsize=20)

    subplot(1,2,2)
    s.plotRe24vsrmag(plotsingle=0)
    ax=gca()
    text(.1,.9,'$24 \mu m $',transform=ax.transAxes,fontsize=20)
    ax.set_yticklabels(([]))
    text(-.02,-.12,'$ M_r$',transform=ax.transAxes,horizontalalignment='center',fontsize=24)

    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsrmagboth.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsrmagboth.png')

def plotRisovsmassboth():
    figure(figsize=(10,5))
    subplots_adjust(wspace=0.02,bottom=.15,left=.12,top=.95,right=.95)

    subplot(1,2,1)
    s.plotRisovsmass(plotsingle=0,flag24=0)
    ylabel('$ R_{iso} \ (arcsec) $',fontsize=24)
    ax1=gca()
    text(.1,.9,'$r-band $',transform=ax1.transAxes,fontsize=20)

    subplot(1,2,2)
    s.plotRisovsmass(plotsingle=0,flag24=1)
    ax2=gca()
    text(.1,.9,'$24 \mu m $',transform=ax2.transAxes,fontsize=20)
    ax2.set_yticklabels(([]))
    colorbar(ax=[ax1,ax2])
    text(-.02,-.12,'$ log_{10}(M_*/M_\odot)$',transform=ax2.transAxes,horizontalalignment='center',fontsize=24)

    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRisovsmassboth.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRisovsmassboth.png')

def plotRevsmassboth():
    figure(figsize=(10,5))
    subplots_adjust(wspace=0.02,bottom=.15,left=.12,top=.95,right=.95)

    subplot(1,2,1)
    s.plotRevsmass(plotsingle=0,flag24=0)
    ylabel('$ R_e \ (arcsec) $',fontsize=24)
    ax1=gca()
    text(.1,.9,'$r-band $',transform=ax1.transAxes,fontsize=20)

    subplot(1,2,2)
    s.plotRevsmass(plotsingle=0,flag24=1)
    ax2=gca()
    text(.1,.9,'$24 \mu m $',transform=ax2.transAxes,fontsize=20)
    ax2.set_yticklabels(([]))
    text(-.02,-.12,'$ log_{10}(M_*/M_\odot)$',transform=ax2.transAxes,horizontalalignment='center',fontsize=24)
    colorbar(ax=[ax1,ax2])
    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsmassboth.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/plotRevsmassboth.png')

def plotsizevsMclall(sbcutobs=20,masscut=0):

    figure(figsize=(10,8))
    
    subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
    i=0
    for cl in clusternamesbylx:
        flag = (s.s.CLUSTER == cl) & s.sampleflag & (s.sb_obs < sbcutobs) & s.membflag & ~s.agnflag
        if cl == 'MKW8':
            print 'number in MKW8 = ',sum(flag)
            print s.s.SIZE_RATIO[flag]
        if masscut:
            flag=flag & (log10(s.logstellarmass) < masscut)
        x=clusterLx[cl]
        y=median(s.s.SIZE_RATIO[flag])
        BT=mean(s.gim2d.B_T_r[flag & s.gim2dflag])
        erry=std(s.s.SIZE_RATIO[flag])/sum(flag)
        plot(x,y,'k.',color=colors[i],marker=shapes[i],markersize=20,label=cl)
        errorbar(x,y,yerr=erry,fmt=None,ecolor=colors[i])
        #plot(x,BT,'b^',markersize=15)
    
        
        i+=1
    legend(loc='upper right',numpoints=1,markerscale=.75)
    flag =  s.sampleflag & (s.sb_obs < sbcutobs) & ~s.membflag & s.dvflag
    exteriorvalue=mean(s.s.SIZE_RATIO[flag])
    errexteriorvalue=std(s.s.SIZE_RATIO[flag])/(sum(flag))
    #axhline(y=exteriorvalue,color='k',ls='-')
    #axhline(y=exteriorvalue+errexteriorvalue,color='k',ls='--')
    #axhline(y=exteriorvalue-errexteriorvalue,color='k',ls='--')
    ax=gca()
    ax.set_xscale('log')
    ax.tick_params(axis='both', which='major', labelsize=16)
    xl=arange(-1.2,2,.1)
    yl=-.3*(xl)+.64
    plot(10.**xl,yl,'k--')
    xlabel('$ L_X \ (10^{43} \ erg \ s^{-1} )$',fontsize = 28)
    ylabel('$R_{24}/R_d$',fontsize = 28)
    axis([.05,10,0.,1.09])


    savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsLxall.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsLxall.png')

    
def plotsizevsMclallwhisker(sbcutobs=20,masscut=None,drcut=1.,blueflag=False,usetemp=False,useM500=False,usesigma=False,bwflag=True,btcut=None):

    figure(figsize=(10,8))
    
    subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
    i=0
    x1=[]
    y1=[]
    y2all=[]
    y3all=[]
    for cl in clusternamesbylx:
        
        flag = (s.s.CLUSTER == cl) & s.sampleflag  & s.membflag & ~s.agnflag
        if btcut != None:
            flag = flag & (s.gim2d.B_T_r < btcut)#& ~s.blueflag
        if blueflag:
            flag = flag & self.blueflag2
        print 'number in ',cl,' = ',sum(flag)
        if masscut != None:
            flag=flag & (s.logstellarmass < masscut)
        if usetemp:
            x=float(clusterTx[cl])
        elif useM500:
            x=clusterXray[cl][1] # M500
        elif usesigma:
            x=log10(clustersigma[cl])
        else:
            x=log10(clusterLx[cl])+44
        y=(s.sizeratio[flag])

        y2=(s.size_ratio_corr[flag])
        BT=mean(s.gim2d.B_T_r[flag & s.gim2dflag])
        erry=std(s.sizeratioERR[flag])/sum(flag)
        #plot(x,median(y2),'k.',label='_nolegend_')
        if x > -99: #check for temp data, which is negative if not available
            print x, y
            if bwflag:
                plot(x,median(y),'k.',color='k',marker=shapes[i],markersize=18,label=cl)
                bp = boxplot([y],positions=[x],whis=99)
                plt.setp(bp['boxes'], color='black')
                plt.setp(bp['whiskers'], color='black')
                plt.setp(bp['fliers'], color='black', marker='+')
                plt.setp(bp['medians'], color='black')
            else:
                plot(x,median(y),'k.',color=colors[i],marker=shapes[i],markersize=20,label=cl)                
                boxplot([y],positions=[x],whis=99)

            x1.append(x)
            y1.append(median(y))
            y2all.append(median(y2))
            y3all.append(mean(y2))
        #errorbar(x,y,yerr=erry,fmt=None,ecolor=colors[i])
        #plot(x,BT,'b^',markersize=15)
    
        
        i+=1
    legend(loc='upper right',numpoints=1,markerscale=.6)
    flag =  s.sampleflag  & ~s.membflag & ~s.agnflag #& ~s.dvflag
    exteriorvalue=mean(s.sizeratio[flag])
    errexteriorvalue=std(s.sizeratio[flag])/sqrt(1.*sum(flag))
    axhline(y=exteriorvalue,color='0.5',ls='-')
    axhline(y=exteriorvalue+errexteriorvalue,color='0.5',ls='--')
    axhline(y=exteriorvalue-errexteriorvalue,color='0.5',ls='--')

    #print 'size corrected by B/A'
    #spearman(x1,y2all)
    #print y1
    #print y2all
    #print 'size corrected by B/A, mean'
    #spearman(x1,y3all)
    ax=gca()
    #ax.set_xscale('log')

    #xl=arange(41,45,.1)
    #yl=-.3*(xl-43.)+.64
    #plot(xl,yl,'k--')
    if usetemp:
        xlabel('$ T_X  (kev)$',fontsize = 28)
    else:
        xlabel('$ log_{10}(L_X  \ erg \ s^{-1} )$',fontsize = 28)
    if USE_DISK_ONLY:
        ylabel('$R_{24}/R_d$',fontsize = 28)
    else:
        ylabel('$R_e(24)/R_e(r)$',fontsize = 28)
    if usetemp:
        xticks(arange(0,10.,1))
        axis([-.05,10.5,0.,1.2])
        ax.tick_params(axis='both', which='major', labelsize=16)
    elif useM500:
        axis([-.75,5.5,0.,1.2])
        ax.tick_params(axis='both', which='major', labelsize=16)
    elif usesigma:
        #axis([2,3.5,0.,1.2])
        ax.tick_params(axis='both', which='major', labelsize=16)
        #xticks(arange(2,4,.5))#,['','44','45'])
    else:
        if USE_DISK_ONLY:
            axis([42.5,45.5,-.1,2.8])
        else:
            axis([42.5,45.5,0.1,1.2])
        xticks(arange(43,46),['43','44','45'])
        ax.tick_params(axis='both', which='major', labelsize=16)

    if usetemp:
        savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsTxall_whisker.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsTxall_whisker.png')
    elif useM500:
        savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsM500all_whisker.eps')
        savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsM500all_whisker.png')
    else:
        #savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsLxall_whisker.eps')
        #savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsLxall_whisker.png')
        savefig(figuredir+'fig14.eps')
    print x1
    print y1
    spearman(np.array(x1),np.array(y1))

def plotsizevsMclall(sbcutobs=20,masscut=0):

    figure(figsize=(10,8))
    
    subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
    i=0
    for cl in clusternamesbylx:
        flag = (s.s.CLUSTER == cl) & s.sampleflag & (s.sb_obs < sbcutobs) & s.membflag & ~s.agnflag
        if cl == 'MKW8':
            print 'number in MKW8 = ',sum(flag)
            print s.s.SIZE_RATIO[flag]
        if masscut:
            flag=flag & (log10(s.logstellarmass) < 10.41)
        x=clusterLx[cl]
        y=median(s.s.SIZE_RATIO[flag])
        BT=mean(s.gim2d.B_T_r[flag & s.gim2dflag])
        erry=std(s.s.SIZE_RATIO[flag])/sum(flag)
        plot(x,y,'k.',color=colors[i],marker=shapes[i],markersize=20,label=cl)
        errorbar(x,y,yerr=erry,fmt=None,ecolor=colors[i])
        #plot(x,BT,'b^',markersize=15)
    
        
        i+=1
    legend(loc='upper right',numpoints=1,markerscale=.75)
    flag =  s.sampleflag & (s.sb_obs < sbcutobs) & ~s.membflag & s.dvflag
    exteriorvalue=mean(s.s.SIZE_RATIO[flag])
    errexteriorvalue=std(s.s.SIZE_RATIO[flag])/(sum(flag))
    #axhline(y=exteriorvalue,color='k',ls='-')
    #axhline(y=exteriorvalue+errexteriorvalue,color='k',ls='--')
    #axhline(y=exteriorvalue-errexteriorvalue,color='k',ls='--')
    ax=gca()
    ax.set_xscale('log')
    ax.tick_params(axis='both', which='major', labelsize=16)
    xl=arange(-1.2,2,.1)
    yl=-.3*(xl)+.64
    plot(10.**xl,yl,'k--')
    xlabel('$ L_X \ (10^{43} \ erg \ s^{-1} )$',fontsize = 28)
    ylabel('$R_e(24)/R_e(r)$',fontsize = 28)
    axis([.05,10,0.,1.09])


    savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsLxall.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsLxall.png')

    
def plotsizevsBTall(sbcutobs=20,masscut=0):

    figure(figsize=(10,8))
    
    subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
    i=0
    for cl in clusternamesbylx:
        flag = (s.s.CLUSTER == cl) & s.sampleflag & (s.sb_obs < sbcutobs) & s.membflag & ~s.agnflag
        if cl == 'MKW8':
            print 'number in MKW8 = ',sum(flag)
            print s.s.SIZE_RATIO[flag]
        if masscut:
            flag=flag & (log10(s.logstellarmass) < 10.41)
        x=clusterLx[cl]
        y=median(s.s.SIZE_RATIO[flag])
        BT=mean(s.gim2d.B_T_r[flag & s.gim2dflag])
        erry=std(s.s.SIZE_RATIO[flag])/sum(flag)
        plot(x,y,'k.',color=colors[i],marker=shapes[i],markersize=20,label=cl)
        errorbar(x,y,yerr=erry,fmt=None,ecolor=colors[i])
        #plot(x,BT,'b^',markersize=15)
    
        
        i+=1
    legend(loc='upper right',numpoints=1,markerscale=.75)
    flag =  s.sampleflag & (s.sb_obs < sbcutobs) & ~s.membflag & s.dvflag
    exteriorvalue=mean(s.s.SIZE_RATIO[flag])
    errexteriorvalue=std(s.s.SIZE_RATIO[flag])/(sum(flag))
    #axhline(y=exteriorvalue,color='k',ls='-')
    #axhline(y=exteriorvalue+errexteriorvalue,color='k',ls='--')
    #axhline(y=exteriorvalue-errexteriorvalue,color='k',ls='--')
    ax=gca()
    ax.set_xscale('log')
    ax.tick_params(axis='both', which='major', labelsize=16)
    xl=arange(-1.2,2,.1)
    yl=-.3*(xl)+.64
    plot(10.**xl,yl,'k--')
    xlabel('$ L_X \ (10^{43} \ erg \ s^{-1} )$',fontsize = 28)
    ylabel('$R_e(24)/R_e(r)$',fontsize = 28)
    axis([.05,10,0.,1.09])


    savefig(homedir+'/research/LocalClusters/SamplePlots/sizevsLxall.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/sizsevsLxall.png')

def plotsffracvsMclall(sbcutobs=20,masscut=0):

    figure(figsize=(10,8))
    
    subplots_adjust(hspace=.02,wspace=.02,bottom=.15,left=.15)
    i=0
    for cl in clusternamesbylx:
        flag = (s.s.CLUSTER == cl) & s.sampleflag & s.membflag
        denom = (s.s.CLUSTER == cl) & s.sfsampleflag & s.membflag
        if cl == 'MKW8':
            print 'number in MKW8 = ',sum(flag)
            print s.s.SIZE_RATIO[flag]
        x=clusterLx[cl]
        y,errdown,errup=my.ratioerror(1.*sum(flag),1.*sum(denom))
        #erry=std(s.s.SIZE_RATIO[flag])/sum(flag)
        plot(x,y,'k.',color=colors[i],marker=shapes[i],markersize=20,label=cl)

        #errorbar(x,y,yerr=[errdown,errup],fmt=None,ecolor=colors[i])
        i+=1
    legend(loc='upper right',numpoints=1,markerscale=.75)
    fflag=s.sampleflag & (s.sb_obs < sbcutobs) & s.membflag
    fdemon =  s.spiralflag & (s.logstellarmass > minmass) & (s.s.SERSIC_TH50*s.DA > minsize_kpc) & ~s.membflag & s.dvflag
    exteriorvalue=mean(s.s.SIZE_RATIO[flag])
    errexteriorvalue=std(s.s.SIZE_RATIO[flag])/(sum(flag))
    #axhline(y=exteriorvalue,color='k',ls='-')
    #axhline(y=exteriorvalue+errexteriorvalue,color='k',ls='--')
    #axhline(y=exteriorvalue-errexteriorvalue,color='k',ls='--')
    ax=gca()
    ax.set_xscale('log')
    ax.tick_params(axis='both', which='major', labelsize=16)

    xlabel('$ L_X \ (10^{43} \ erg \ s^{-1} )$',fontsize = 28)
    ylabel('$SF \ Frac$',fontsize = 28)
    axis([.05,10,0.,1.05])
    savefig(homedir+'/research/LocalClusters/SamplePlots/sffracvsLxall.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/sffracvsLxall.png')



def plotRe24vsReall(sbcutobs=20,plotcolorbar=0,fixPA=False,logyflag=False,usedr=False):

    figure(figsize=(10,8))
    subplots_adjust(hspace=.02,wspace=.02,left=.15,bottom=.15,right=.9,top=.9)
    i=1
    allax=[]
#    for cl in clusternamesbydistance:
    for cl in clusternamesbylx:
        subplot(3,3,i)
        flag = (s.s.CLUSTER == cl) & s.sampleflag  & ~s.agnflag #& s.membflag
        s.plotRe24vsRe(plotsingle=0,usemyflag=1,myflag=flag,sbcutobs=sbcutobs,logy=logyflag,fixPA=fixPA,usedr=usedr)
        
        #fflag = (s.s.CLUSTER == cl) & s.sampleflag  & ~s.agnflag & ~s.dvflag
        #plot(s.s.SERSIC_TH50[fflag],s.s.fcre1[fflag]*mipspixelscale,'bs',mfc='None',mec='b',markersize=14)
            
        ax=gca()
        cname='$'+cl+'$'
        text(.9,.8,cname,fontsize=18,transform=ax.transAxes,horizontalalignment='right')
        #ax.set_xscale('log')
        #ax.set_yscale('log')
        #axis([1,30,.8,20])
        allax.append(ax)
        multiplotaxes(i)
        i+=1
    if plotcolorbar:
        if usedr:
            cblabel = '$\Delta r/R_{200}$'
            cblabel='$log_{10}(\sqrt{(\Delta r/R_{200})^2 + (\Delta v/\sigma)^2})$'
        else:
            cblabel='$log_{10}(M_*/M\odot) $'

        colorbar(ax=allax,fraction=0.08,label=cblabel)
    #text(-.5,-.25,'$R_e \ NSA \ (arcsec)$',fontsize=22,horizontalalignment='center',transform=ax.transAxes)
    #text(-2.4,1.5,'$R_e \ 24\mu m \ (arcsec) $',fontsize=22,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')
    if USE_DISK_ONLY:
        text(-.5,-.3,'$R_d \ (kpc)$',fontsize=22,horizontalalignment='center',transform=ax.transAxes)
    else:
        text(-.5,-.3,'$R_e  \ (kpc)$',fontsize=22,horizontalalignment='center',transform=ax.transAxes)
    text(-2.4,1.5,'$R_{24} \ (kpc) $',fontsize=22,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')


    #savefig(homedir+'/research/LocalClusters/SamplePlots/Re24vsReall.eps')
    #savefig(homedir+'/research/LocalClusters/SamplePlots/Re24vsReall.png')
    savefig(figuredir+'fig10.eps')
def plotdvdrall(sbcutobs=20,plotcolorbar=1,fixPA=False,logyflag=True,scalepoint=0,hexbinmax=20):

    plt.figure(figsize=(9,6))
    plt.subplots_adjust(hspace=.02,wspace=.02,left=.12,bottom=.12,right=.85)
    i=1
    allax=[]
    for cl in clusternamesbylx:
        plt.subplot(3,3,i)
        #flag = (s.s.CLUSTER == cl) & s.sampleflag #& (s.sb_obs < sbcutobs) & ~s.agnflag
        s.plotsizedvdr(plotsingle=0,cluster=cl,plothexbin=True,hexbinmax=hexbinmax,scalepoint=scalepoint,plotHI=True)

        ax=plt.gca()
        allax.append(ax)
        cname='$'+cl+'$'
        text(.1,.8,cname,fontsize=18,transform=ax.transAxes,horizontalalignment='left')
        plt.axis([-.1,4,-.1,6])
        plt.xticks(arange(0,1.6,.5))
        plt.yticks(arange(0,3.5,1))
        #plt.gca().set_xscale('log')

        multiplotaxes(i)
        i+=1
    if plotcolorbar:
        c=colorbar(ax=allax,fraction=0.1)
        if USE_DISK_ONLY:
            c.ax.text(2.2,.5,'$R_e(24)/R_d$',rotation=-90,verticalalignment='center',fontsize=20)
        else:
            c.ax.text(2.2,.5,'$R_e(24)/R_e(r)$',rotation=-90,verticalalignment='center',fontsize=20)
    plt.text(-.5,-.4,'$\Delta r/R_{200}$',fontsize=26,horizontalalignment='center',transform=ax.transAxes)
    plt.text(-2.4,1.5,'$\Delta v/\sigma_v$',fontsize=26,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')


    plt.savefig(homedir+'/research/LocalClusters/SamplePlots/sizedvdrall.eps')
    plt.savefig(homedir+'/research/LocalClusters/SamplePlots/sizedvdrall.png')
def plotsigmahistall():

    plt.figure(figsize=plotsize_single)
    plt.subplots_adjust(left=.15,bottom=.2,hspace=.02,wspace=.02)
    i=1
    xl='$\Sigma_5 $'
    yl='$\Delta r/R_{200}$'
    allax=[]
    i=0
    for cl in clusternamesbylx:
        #plt.subplot(9,1,i)
        flag = (s.s.CLUSTER == cl) #& s.membflag #& s.sampleflag & ~s.agnflag
        #s.plotdrsigma(flag,plotsingle=0)
        hist(log10(s.s.SIGMA_5[flag]),bins=np.arange(-1.5,2,.05),color=colors[i],label=cl,histtype='step',normed=True,cumulative=True)
        ax=plt.gca()
        #cname='$'+cl+'$'
        #plt.text(.05,.3,cname,fontsize=18,transform=ax.transAxes,horizontalalignment='left')
        #ax.set_xscale('log')
        #ax.set_yscale('log')
        #axis([1,30,.8,20])
        #allax.append(ax)
        #if i < 9:
        #    plt.gca().set_xticklabels([])
        #multiplotaxes(i)
        i+=1
    plt.legend(loc='upper left')
    #plt.text(.5,-.5,xl,fontsize=24,horizontalalignment='center',transform=ax.transAxes)
    #plt.text(-.2,4.5,yl,fontsize=24,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')
    plt.xlabel('$ \log_{10}(\Sigma_5 \ (gal/Mpc^{-2})) $')
    plt.ylabel('$ Cumulative \ Distribution $')
    plt.axis([-1.2,1.9,-.05,1.05])
    #plt.savefig(homedir+'/research/LocalClusters/SamplePlots/drvssigmaall.eps')
    #plt.savefig(homedir+'/research/LocalClusters/SamplePlots/drvssigmaall.png')
    plt.savefig(homedir+'/research/LocalClusters/SamplePlots/sigmahist.eps')
    plt.savefig(homedir+'/research/LocalClusters/SamplePlots/sigmahist.png')

def plotRiso24vsRisoall(sbcutobs=20):

    figure(figsize=(10,8))
    subplots_adjust(hspace=.02,wspace=.02)
    i=1
    for cl in clusternamesbylx:
        subplot(3,3,i)
        print cl
        flag = (s.s.CLUSTER == cl) & s.isosampleflag #& (s.sb_obs < sbcutobs)
        s.plotRiso24vsRiso(plotsingle=0,usemyflag=1,myflag=flag,sbcutobs=sbcutobs)

        ax=gca()
        cname='$'+cl+'$'
        text(.1,.8,cname,fontsize=18,transform=ax.transAxes,horizontalalignment='left')
        ax.set_xscale('log')
        ax.set_yscale('log')
        axis([8,150,2,120])
        multiplotaxes(i)
        i+=1


    text(-.5,-.25,'$R_{iso} \ NSA \ (arcsec)$',fontsize=22,horizontalalignment='center',transform=ax.transAxes)
    text(-2.4,1.5,'$R_{iso} \ 24\mu m \ (arcsec) $',fontsize=22,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')


    savefig(homedir+'/research/LocalClusters/SamplePlots/Riso24vsRisoall.eps')
    savefig(homedir+'/research/LocalClusters/SamplePlots/Riso24vsRisoall.png')

def showhighsb():
    ind=s.s.NSAID[(s.sb_obs < 16) & s.sampleflag]
    for i in ind:
        os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(i)+'*profiles.png')
        try:
            os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(i)+'*profiles-Ha.png')
        except:
            print 'no Halpha for ',i

def showspirals(cut=.8):
    index=arange(len(s.s.RA))
    ind=index[s.spiralflag]
    for i in ind:
        st='cp '+homedir+'research/LocalClusters/EllipseProfiles/'+str(s.s.CLUSTER[i])+'-'+str(s.s.NSAID[i])+'-ellipse-profiles.png '+homedir+'research/LocalClusters/EllipseProfiles/PureSpirals/.'
        print st
        os.system(st)
        #try:
        #os.system('cp '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(i)+'*profiles-Ha.png '+homedir+'research/LocalClusters/EllipseProfiles/PureSpirals/*'+str(i)+'*profiles-Ha.png ')
        #except:
        #print 'no Halpha for ',i

def makepaperplots():
    '''
    #s.plotsizedr()
    plotRe24vsReall()
    s.plotRe24vsRe()

    s.plotsizedrbymass()
    #s.plotsizemass()
    s.plotsizesigmabymass()
    s.plotsizeBT()
    s.plotsizeHIdef()
    s.plotsizetdepletion()
    plotsizevsMclallwhisker()
    #plotRevsmagboth()
    #plotRevsrmagboth()
    #plotRevsmassboth()
    '''
    plotpositionson24()
    s.plotsize3panel(use_median=False,equal_pop_bins=True)
    plotRe24vsReall(logyflag=False)
    plotsizevsMclallwhisker(btcut=.3)
    plotsizevscluster(btcut=.3)
    #s.plotcolorcolor3panel()
    s.plotsizeHIfrac()
    s.plotsizeHIdef()
    plotsigmaLx()
    #s.plotcolorcolor3panel()

    s.plotsizedvdr(plothexbin=True,plotmembcut=False,plotoman=True,plotbadfits=0,hexbinmax=40,colormin=.2,colormax=1.1)
    #s.plotsizedvdr(plothexbin=True,plotmembcut=False,plotoman=True,plotbadfits=0,hexbinmax=40,colormin=.2,colormax=1.1,masscut=10.,BTcut=0.3)
    s.compare_cluster_exterior()
    #s.plotsizestellarmassblue()
    #s.plotsizeBTblue()
    #s.plotsizeNUVrblue()
    s.plotsizehist(colorflag=True)
    s.plotsizehist(btcut=.3,colorflag=True)
    s.plotsizestellarmass(use_median=False,equal_pop_bins=True,btmax=0.3)
    paperTable1Paper1()
def talkplots():
    s.compare_dr()
    s.plotsizedrbymass(masscut=10.**10.41,isoflag=1)
    s.plotsizedrbymass(masscut=10.**10.41,isoflag=0)
    plotRevsmassboth()
    s.compare_BT()
    s.compare_BT(isoflag=1)
def show_enhanced():
    for id in s.s.NSAID[s.enhanced]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')

def show_enhanced():
    for id in s.s.NSAID[s.enhanced]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')
def show_depleted():
    for id in s.s.NSAID[s.depleted]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')
def show_normaltrunc():
    for id in s.s.NSAID[s.normaltrunc]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')
def show_R90trunc():
    for id in s.s.NSAID[s.r90size[s.mipsflag] < 0.5]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')
def show_normalconc():
    for id in s.s.NSAID[s.normalconc]: os.system('open '+homedir+'research/LocalClusters/EllipseProfiles/*'+str(id)+'*.png')

def comparepops(plotflag=1,printflag=1):
    dmasscut=(s.logstellarmass > 10.) & (s.logstellarmass < 11.3) 
    xflags=[s.normalgalfit,s.normal,s.normalgalfit,s.normal,(s.normal & dmasscut),s.normalgalfit,s.normal]
    yflags=[s.normalconc,s.normaltrunc,s.enhanced,s.lowsfr,(s.depleted & dmasscut),s.truncflag,s.isotruncflag]
    yname=['normal-concentrated','normal-truncated','enhanced','low ssfr','depleted','concentrated','truncated']
    compvar=[s.s.DR_R200,s.logstellarmass,s.gim2d.B_T_r,s.s.HAEW]
    varname=['DR_R200','M*','B/T','Halpha']
    nsubplots=4
    varlabel=['$ \Delta R/R_{200} $', '$ M_* \ (M_\odot/yr) $', '$B/T $',r'$H \alpha \ EW$']
    iplots=[0,1,2,3,4,5,6]
    #for i in range(len(xflags)):
    for i in iplots:
        if plotflag:
            plt.figure(figsize=(10,8))
            subplots_adjust(bottom=.1,left=.1,wspace=.3,hspace=.35)


        for j in range(nsubplots):
            if j == 2:
                x=compvar[j][xflags[i] & s.gim2dflag & ~yflags[i]]
                y=compvar[j][yflags[i] & s.gim2dflag]
            elif j == 3:
                x=compvar[j][xflags[i]  & (s.s.HAEW > 0.)& ~yflags[i]]
                y=compvar[j][yflags[i]  & (s.s.HAEW > 0.)]
            else:
                x=compvar[j][xflags[i] & ~yflags[i]]
                y=compvar[j][yflags[i]]
            xmin=min(min(x),min(y))
            xmax=max(max(x),max(y))
            if printflag:
                print ''
                print ''
                print '#############################################'
                print 'len(x),len(y) = ',len(x),len(y)
                print 'comparing '+varname[j]+' of '+yname[i]+' vs normal'
                (D,p)=ks(x,y)
                t=anderson.anderson_ksamp([x,y])
                print_anderson(t)

            if plotflag:
                plt.subplot(2,2,j+1)
                #print 'x = ',len(x),x
                #print 'y = ',len(y),y
                
                plt.hist(x,bins=len(x),cumulative=True,histtype='step',normed=True,label='Normal',color='b',range=(xmin,xmax))
                plt.hist(y,bins=len(y),cumulative=True,histtype='step',normed=True,label=yname[i],color='r',range=(xmin,xmax))
                if j < 1:
                    plt.title(yname[i]+' vs normal')
                    legend(loc='lower right')
                if j in [0,2]:
                    plt.ylabel('$Cumulative \ Distribution $',fontsize=20)

                plt.xlabel(varlabel[j],fontsize=20)


                ylim(-.05,1.05)
                ax=gca()
                text(.05,.9,'$D = %4.2f$'%(D),horizontalalignment='left',transform=ax.transAxes,fontsize=14)
                text(.05,.8,'$p = %5.4f$'%(p),horizontalalignment='left',transform=ax.transAxes,fontsize=14)

        figname=homedir+'research/LocalClusters/SamplePlots/'+yname[i]+'_ks.png'
        plt.savefig(figname)
        figname=homedir+'research/LocalClusters/SamplePlots/'+yname[i]+'_ks.eps'
        plt.savefig(figname)


        
def print_anderson(t):
    print '%%%%%%%%% ANDERSON  %%%%%%%%%%%'
    print 'anderson statistic = ',t[0]
    print 'critical values = ',t[1]
    print 'p-value = ',t[2]
    

def plotsigmaLx(bwflag=True):
    figure(figsize=[7,6])

    clf()
    subplots_adjust(left=.16,bottom=.16,right=.95,top=.95,wspace=.3)
    i=0
    x=[]
    y=[]
    errm=[]
    errp=[]
    for cl in clusternamesbylx:
        if bwflag:
            plot(clusterLx[cl],clusterbiweightscale[cl],'ko',marker=shapes[i],markersize=18,mfc=None,label=cl)
        else:
            plot(clusterLx[cl],clusterbiweightscale[cl],'ko',color=colors[i],marker=shapes[i],markersize=16,label=cl)
        errm.append(clusterbiweightscale_errm[cl])
        errp.append(clusterbiweightscale_errp[cl])
        x.append(clusterLx[cl])
        y.append(clusterbiweightscale[cl])

        i += 1
    errm=array(errm)
    errp=array(errp)
    yerror=array(zip(errm, errp),'f')
    #print 'yerror = ',yerror
    errorbar(x,y,yerr=yerror.T,fmt=None,ecolor='k')
    # plot comparison sample
    mah = fits.getdata(homedir+'research/Mahdavi2001/systems.fits')
    # correct Lx to convert from H0=50 to H0=71 (divide by 1.96)
    # convert bolometric luminosity to L in 0.1-2.4 kev band, which is what I use in the figure
    # this conversion depends on temperature, ranges from 1.44 - 4.05; using 1.4 as a typical value
    # this also brings coma into agreement
    plot(10.**(mah.logLXbol-44.)/1.96/1.4,10.**mah.logsigma,'k.',c='0.5',alpha=0.5)
        
    gca().set_xscale('log')
    xlabel('$L_X \ (10^{44} erg/s)$',fontsize=26)
    ylabel('$\sigma \ (km/s) $',fontsize=26)
    axis([.04,10,300,1100])
    leg=legend(numpoints=1,loc='upper left',scatterpoints=1,markerscale=.6,borderpad=.2,labelspacing=.2,handletextpad=.2,prop={'size':14})
    gca().tick_params(axis='both', which='major', labelsize=16)

    savefig(homedir+'research/LocalClusters/SamplePlots/sigmalxall.eps')
    savefig(figuredir+'fig1.eps')
def computePCA():
    flag=s.sampleflag & s.dvflag & ~s.agnflag
    exteriors=[s.logstellarmass,s.s.SIZE_RATIO,s.massdensity,s.ssfr,s.s.DR_R200,s.s.SIGMA_5]
    exteriors=[s.logstellarmass,s.s.ABSMAG[:,4],s.s.ABSMAG[:,2],s.s.SFR_ZDIST]
    dat=[]
    for f in exteriors:
        dat.append(f[flag].tolist())
    dataMatrix=np.array(dat)
    mpca=mlabPCA(dataMatrix.T)
    print('PC axes in terms of the measurement axes'\
          ' scaled by the standard deviations: \n')
    print mpca.Wt
    figure()
    plot(mpca.Y[:,0],mpca.Y[:,1],'o',label='class1')
    xlabel('Principal Axis')
    ylabel('Second Axis')
    return dataMatrix,mpca



def paperTable5(sbcutobs=20,masscut=0):
    #clustersigma={'MKW11':361, 'MKW8':325., 'AWM4':500., 'A2063':660., 'A2052':562., 'NGC6107':500., 'Coma':1000., 'A1367':745., 'Hercules':689.}

    #clusterz={'MKW11':.022849,'MKW8':.027,'AWM4':.031755,'A2063':.034937,'A2052':.035491,'NGC6107':.030658,'Coma':.023,'A1367':.028,'Hercules':.037,'MKW10':.02054}
    #clusterbiweightcenter={'MKW11':6897,'MKW8':8045,'AWM4':9636,'A2063':10426,'A2052':10354,'NGC6107':9397,'Coma':7015,'A1367':6507,'Hercules':10941}

    #clusterbiweightcenter_errp={'MKW11':45,'MKW8':36,'AWM4':51,'A2063':63,'A2052':64,'NGC6107':48,'Coma':41,'A1367':48,'Hercules':48}
    
    #clusterbiweightcenter_errm={'MK
    
    outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSpaper1/Table3.tex','w')
    outfile.write('\\begin{deluxetable*}{lcccccccc} \n')
    outfile.write('\\tablecaption{Rank Correlation Test Between \size \ and Cluster/Galaxy Properties  \label{statTests}} \n')
    #outfile.write('\\tablehead{\colhead{Cluster} &\colhead{Biweight Central Velocity} & \colhead{Lit.} & \colhead{Biweight Scale} & \colhead{Lit} & \colhead{N$_{spiral}$} & \colhead{N$_{spiral}$} } \n')#  % \\\\ & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{Member} & \colhead{External}} \n')
    outfile.write('\\tablehead{& \multicolumn{4}{c}{With Coma} & \multicolumn{4}{c}{Without Coma} \\\\ & \multicolumn{2}{c}{All} & \multicolumn{2}{c}{$log_{10}(M_*) < 10.41$} & \multicolumn{2}{c}{All} & \multicolumn{2}{c}{$log_{10}(M_*) < 10.41$} \\\\ &  {$\\rho$} & {P} & {$\\rho$} &{P}&  {$\\rho$} & {P} & {$\\rho$} & {P}}\n')
    outfile.write('\startdata \n')
    labels=['$\Delta r/R_{200}$','$\Sigma_5$','$log_{10}(M_*)$','$B/T$','$HI \\ Def$']
    params=[s.s.DR_R200,s.s.SIGMA_5,s.logstellarmassTaylor,s.gim2d.B_T_r,s.s.HIDef]
    flags=[s.sampleflag,s.sampleflag,s.sampleflag,(s.sampleflag & s.gim2dflag),(s.sampleflag & s.HIflag)]
    
    for i in range(len(labels)):

        flagLM=flags[i] & (s.logstellarmass < 10.41)
        flag2=flags[i] & (s.s.CLUSTER != 'Coma')
        flag2LM=flags[i] & (s.s.CLUSTER != 'Coma') & (s.logstellarmass < 10.41)
        a,b = spearman(s.s.SIZE_RATIO[flags[i]],params[i][flags[i]])
        aLM,bLM = spearman(s.s.SIZE_RATIO[flagLM],params[i][flagLM])
        c,d=spearman(s.s.SIZE_RATIO[flag2],params[i][flag2])
        cLM,dLM=spearman(s.s.SIZE_RATIO[flag2LM],params[i][flag2LM])
        tableline='%s & %5.2f  & %5.3f & %5.2f & %5.3f & %5.2f & %5.3f & %5.2f & %5.3f \\\\ \n' %(labels[i],a,b,aLM,bLM,c,d,cLM,dLM)
        outfile.write(tableline)
    outfile.write('\enddata \n')
    outfile.write('\end{deluxetable*} \n')
    outfile.close()
def paperTable1(sbcutobs=20,masscut=0):
    #clustersigma={'MKW11':361, 'MKW8':325., 'AWM4':500., 'A2063':660., 'A2052':562., 'NGC6107':500., 'Coma':1000., 'A1367':745., 'Hercules':689.}

    #clusterz={'MKW11':.022849,'MKW8':.027,'AWM4':.031755,'A2063':.034937,'A2052':.035491,'NGC6107':.030658,'Coma':.023,'A1367':.028,'Hercules':.037,'MKW10':.02054}
    #clusterbiweightcenter={'MKW11':6897,'MKW8':8045,'AWM4':9636,'A2063':10426,'A2052':10354,'NGC6107':9397,'Coma':7015,'A1367':6507,'Hercules':10941}

    #clusterbiweightcenter_errp={'MKW11':45,'MKW8':36,'AWM4':51,'A2063':63,'A2052':64,'NGC6107':48,'Coma':41,'A1367':48,'Hercules':48}
    
    #clusterbiweightcenter_errm={'MK
    
    outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSpaper1/Table1.tex','w')
    outfile.write('\\begin{deluxetable*}{cccccc} \n')
    outfile.write('\\tablecaption{Cluster Properties and Blue Galaxy Sample Sizes  \label{finalsample}} \n')
    #outfile.write('\\tablehead{\colhead{Cluster} &\colhead{Biweight Central Velocity} & \colhead{Lit.} & \colhead{Biweight Scale} & \colhead{Lit} & \colhead{N$_{spiral}$} & \colhead{N$_{spiral}$} } \n')#  % \\\\ & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{Member} & \colhead{External}} \n')
    outfile.write('\\tablehead{\colhead{Cluster} &\colhead{Biweight Central Velocity}  & \colhead{Biweight Scale} & \colhead{N$_{gal}$} & \colhead{N$_{gal}$}& \colhead{N$_{gal}$} \\\\ & \colhead{(km/s)}  & \colhead{(km/s)}  & Member & Near-External & External } \n')
    outfile.write('\startdata \n')

    for cl in clusternamesbydistance:
        nmemb_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & s.membflag)
        nnearexterior_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & ~s.membflag & s.dvflag)
        nexterior_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & ~s.membflag & ~s.dvflag)
        #tableline='%s & %i$^{%+i}_{-%i}$ & %i & %i$^{+%i}_{-%i}$ & %i & %i & %i & %i \\\\ \n' %(cl, clusterbiweightcenter[cl],clusterbiweightcenter_errp[cl],clusterbiweightcenter_errm[cl],int(round(clusterz[cl]*3.e5)), clusterbiweightscale[cl],clusterbiweightscale_errp[cl],clusterbiweightscale_errm[cl],int(round(clustersigma[cl])),nmemb_spiral,nexterior_spiral)
        tableline='%s & %i$^{%+i}_{-%i}$  & %i$^{+%i}_{-%i}$  & %i & %i & %i \\\\ \n' %(cl, clusterbiweightcenter[cl],clusterbiweightcenter_errp[cl],clusterbiweightcenter_errm[cl], clusterbiweightscale[cl],clusterbiweightscale_errp[cl],clusterbiweightscale_errm[cl],nmemb_spiral,nnearexterior_spiral,nexterior_spiral)
        outfile.write(tableline)
    outfile.write('\enddata \n')
    outfile.write('\end{deluxetable*} \n')
    outfile.close()
def paperTable1Paper1(sbcutobs=20,masscut=0):
    #clustersigma={'MKW11':361, 'MKW8':325., 'AWM4':500., 'A2063':660., 'A2052':562., 'NGC6107':500., 'Coma':1000., 'A1367':745., 'Hercules':689.}

    #clusterz={'MKW11':.022849,'MKW8':.027,'AWM4':.031755,'A2063':.034937,'A2052':.035491,'NGC6107':.030658,'Coma':.023,'A1367':.028,'Hercules':.037,'MKW10':.02054}
    #clusterbiweightcenter={'MKW11':6897,'MKW8':8045,'AWM4':9636,'A2063':10426,'A2052':10354,'NGC6107':9397,'Coma':7015,'A1367':6507,'Hercules':10941}

    #clusterbiweightcenter_errp={'MKW11':45,'MKW8':36,'AWM4':51,'A2063':63,'A2052':64,'NGC6107':48,'Coma':41,'A1367':48,'Hercules':48}
    
    #clusterbiweightcenter_errm={'MK
    
    #outfile=open(homedir+'/Dropbox/Research/MyPapers/LCSpaper1/Table1.tex','w')
    outfile=open(figuredir+'Table1.tex','w')
    outfile.write('\\begin{deluxetable*}{ccccc} \n')
    outfile.write('\\tablecaption{Cluster Properties and Galaxy Sample Sizes  \label{finalsample}} \n')
    #outfile.write('\\tablehead{\colhead{Cluster} &\colhead{Biweight Central Velocity} & \colhead{Lit.} & \colhead{Biweight Scale} & \colhead{Lit} & \colhead{N$_{spiral}$} & \colhead{N$_{spiral}$} } \n')#  % \\\\ & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{(km/s)}  & \colhead{(km/s)} & \colhead{Member} & \colhead{External}} \n')
    outfile.write('\\tablehead{\colhead{Cluster} &\colhead{Biweight Central Velocity}  & \colhead{Biweight Scale} & \colhead{N$_{gal}$} & \colhead{N$_{gal}$} \\\\ & \colhead{(km/s)}  & \colhead{(km/s)}  & Core & External } \n')
    outfile.write('\startdata \n')

    for cl in clusternamesbydistance:
        nmemb_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & s.membflag)
        nnearexterior_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & ~s.membflag & s.dvflag)
        nexterior_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & ~s.membflag & ~s.dvflag)
        exterior_spiral = sum((s.s.CLUSTER == cl) & s.sampleflag & ~s.membflag)

        #tableline='%s & %i$^{%+i}_{-%i}$ & %i & %i$^{+%i}_{-%i}$ & %i & %i & %i & %i \\\\ \n' %(cl, clusterbiweightcenter[cl],clusterbiweightcenter_errp[cl],clusterbiweightcenter_errm[cl],int(round(clusterz[cl]*3.e5)), clusterbiweightscale[cl],clusterbiweightscale_errp[cl],clusterbiweightscale_errm[cl],int(round(clustersigma[cl])),nmemb_spiral,nexterior_spiral)
        tableline='%s & %i$^{%+i}_{-%i}$  & %i$^{+%i}_{-%i}$  & %i & %i  \\\\ \n' %(cl, clusterbiweightcenter[cl],clusterbiweightcenter_errp[cl],clusterbiweightcenter_errm[cl], clusterbiweightscale[cl],clusterbiweightscale_errp[cl],clusterbiweightscale_errm[cl],nmemb_spiral,exterior_spiral)
        outfile.write(tableline)
    outfile.write('\enddata \n')
    outfile.write('\end{deluxetable*} \n')
    outfile.close()

def plotabellclustersposition():
    figure()#figsize=(6,6))
    subplots_adjust(bottom=.15)
    eaflag=((s.s.CLUSTER == 'A2063') | (s.s.CLUSTER == 'A2052')) & (abs(s.s.DELTA_V) < 3)
    hexbin(s.s.RA[eaflag],s.s.DEC[eaflag],cmap=cm.Greys,gridsize=40,vmin=0,vmax=10)
    aflag=((s.s.CLUSTER == 'A2063') | (s.s.CLUSTER == 'A2052')) & (abs(s.s.DELTA_V) < 3) #& s.sampleflag
    aflag24=aflag & s.sampleflag 
    aflag=aflag & s.spiralflag
    pflag=aflag24 & s.pointsource
    print 'NSAIDs of point sources ', s.s.NSAID[pflag]
    npflag=aflag24 & ~s.pointsource
    plot(s.s.RA[aflag & ~aflag24],s.s.DEC[aflag & ~aflag24],'k.')
    scatter(s.s.RA[aflag24],s.s.DEC[aflag24],s=s.s.SIZE_RATIO[aflag24]*60,c='red')
    plot(s.s.RA[pflag],s.s.DEC[pflag],'k*',markersize=14)
    axis('equal')
    axis([228,232,5,11])
    plot(clusterRA['A2052'],clusterDec['A2052'],'bx',markersize=16, lw=3)
    plot(clusterRA['A2063'],clusterDec['A2063'],'bx',markersize=16, lw=3)
    xlabel('$RA \ (deg)$',fontsize=20)
    ylabel('$Dec \ (deg) $',fontsize=20)
    cl='A2063'
    r200=2.02*(clusterbiweightscale[cl])/1000./sqrt(OmegaL+OmegaM*(1.+clusterz[cl])**3)*H0/70. # in Mpc
    r200deg=r200*1000./my.DA(clusterbiweightcenter[cl]/3.e5,h)/3600.
    cir=Circle((clusterRA[cl],clusterDec[cl]),radius=1.3*r200deg,color='None',ec='k')
    gca().add_patch(cir)
    cl='A2052'
    r200=2.02*(clusterbiweightscale[cl])/1000./sqrt(OmegaL+OmegaM*(1.+(clusterbiweightcenter[cl]/3.e5))**3)*H0/70. # in Mpc
    r200deg=r200*1000./my.DA(clusterbiweightcenter[cl]/3.e5,h)/3600.
    cir=Circle((clusterRA[cl],clusterDec[cl]),radius=1.3*r200deg,color='None',ec='k')
    gca().add_patch(cir)
def plotpositionson24(plotsingle=0,plotcolorbar=1,plotnofit=0,useirsb=0,blueflag=False):
    plt.figure(figsize=(10,8))
    plt.subplots_adjust(hspace=.02,wspace=.02,left=.12,bottom=.12,right=.85)
    i=1
    allax=[]
    for cl in clusternamesbylx:
        plt.subplot(3,3,i)
        infile=homedir+'research/LocalClusters/NSAmastertables/'+cl+'_NSAmastertable.fits'
        d=fits.getdata(infile)
        #print cl, i
        ra=s.s.RA-clusterRA[cl]
        dec=s.s.DEC-clusterDec[cl]
        r200=2.02*(clusterbiweightscale[cl])/1000./sqrt(OmegaL+OmegaM*(1.+clusterz[cl])**3)*H0/70. # in Mpc
        r200deg=r200*1000./my.DA(clusterbiweightcenter[cl]/3.e5,h)/3600.
        cir=Circle((0,0),radius=r200deg,color='None',ec='k')
        gca().add_patch(cir)

        flag=(s.s.CLUSTER == cl) & s.dvflag
        hexbin(d.RA-clusterRA[cl],d.DEC-clusterDec[cl],cmap=cm.Greys,gridsize=40,vmin=0,vmax=10)
        if plotnofit:
            flag=s.sfsampleflag & ~s.sampleflag & s.dvflag & (s.s.CLUSTER == cl)
            plot(ra[flag],dec[flag],'rv',mec='r',mfc='None')

        if blueflag:
            flag=s.bluesampleflag & s.dvflag & (s.s.CLUSTER == cl)
        else:
            flag=s.sampleflag & s.dvflag & (s.s.CLUSTER == cl)
        #print cl, len(ra[flag]),len(dec[flag]),len(s.s.SIZE_RATIO[flag])
        if useirsb:
            color=log10(s.sigma_ir)
            v1=7.6
            v2=10.5
            colormap=cm.jet
        else:
            color=s.s.SIZE_RATIO
            v1=.1
            v2=1
            colormap=cm.jet_r
        try:
            scatter(ra[flag],dec[flag],s=30,c=color[flag],cmap=colormap,vmin=v1,vmax=v2)
        except ValueError:
            scatter(ra[flag],dec[flag],s=30,c='k',cmap=cm.jet_r,vmin=.1,vmax=1)   
        


        ax=plt.gca()
        fsize=14
        t=cluster24Box[cl]
        drawbox([t[0]-clusterRA[cl],t[1]-clusterDec[cl],t[2],t[3],t[4]],'g-')
        ax=gca()
        ax.invert_xaxis()
        if plotsingle:
            xlabel('$ \Delta RA \ (deg) $',fontsize=22)
            ylabel('$ \Delta DEC \ (deg) $',fontsize=22)
            legend(numpoints=1,scatterpoints=1)

        cname='$'+cl+'$'
        text(.1,.8,cname,fontsize=18,transform=ax.transAxes,horizontalalignment='left')
        plt.axis([1.8,-1.8,-1.8,1.8])
        plt.xticks(arange(-1,2,1))
        plt.yticks(arange(-1,2,1))
        allax.append(ax)
        multiplotaxes(i)
        i+=1
    if plotcolorbar:
        c=colorbar(ax=allax,fraction=0.05)
        c.ax.text(2.2,.5,'$R_{24}/R_d$',rotation=-90,verticalalignment='center',fontsize=20)
    plt.text(-.5,-.28,'$\Delta RA \ (deg) $',fontsize=26,horizontalalignment='center',transform=ax.transAxes)
    plt.text(-2.4,1.5,'$\Delta Dec \ $',fontsize=26,verticalalignment='center',rotation=90,transform=ax.transAxes,family='serif')


    #plt.savefig(homedir+'/research/LocalClusters/SamplePlots/positionson24.eps')
    #plt.savefig(homedir+'/research/LocalClusters/SamplePlots/positionson24.png')
    plt.savefig(figuredir+'fig3.eps')


def plotabellclusters():
    
    # plot density of ellipticals

    # plot color mag

    # plot color-mass

    print '************* u-r vs M*'
    color=s.nsamag[:,2]-s.nsamag[:,4]
    #plotabellxy(s.logstellarmass,color,xlab='$log_{10}(M_*)$',ylab='$u - r$',axlim=[8.5,12,0.5,3.5])

    color=s.gi_corr

    print '************* NUV-r vs M*'
    color=s.nsamag[:,1]-s.nsamag[:,4]
    plotabellxy(s.logstellarmass,color,xlab='$log_{10}(M_*)$',ylab='$NUV - r$',axlim=[8.5,12,0,6.5])
    print '************* u-i vs M*'
    color=s.nsamag[:,2]-s.nsamag[:,5]
    plotabellxy(s.logstellarmass,color,xlab='$log_{10}(M_*)$',ylab='$u - i$',axlim=[8.5,12,0,4])
    print '************* u-24 vs M*'
    color=s.NUV24
    plotabellxy(s.logstellarmass,color,xlab='$log_{10}(M_*)$',ylab='$NUV-24$')#,axlim=[8.5,12,0,4])
    print '************* size vs M*'
    plotabellxy(s.logstellarmass,s.s.SIZE_RATIO,xlab='$log_{10}(M_*)$',ylab='$R_e(24)/R_e(r)$',axlim=[8.5,12,-0.1,2],detectonly=1)
    print '************* size vs Sigma_10'
    plotabellxy(s.s.SIGMA_10,s.s.SIZE_RATIO,xlab='$ \Sigma_5$',ylab='$R_e(24)/R_e(r)$',axlim=[0.1,100,-.1,2])
    gca().set_xscale('log')
    print '************* dv vs dr'
    plotabellxy(s.s.DR_R200,s.s.DELTA_V,xlab='$ \Delta R/R_{200}$',ylab='$\Delta v$',axlim=[0.,3,-3,3])
def plotabellxy(x,y,xlab=None,ylab=None,axlim=None,detectonly=None,newfigure=True):
    if newfigure:
        figure(figsize=(6,4))
        subplots_adjust(bottom=.2,left=.15)
    aflag=((s.s.CLUSTER == 'A2063') | (s.s.CLUSTER == 'A2052')) & (abs(s.s.DELTA_V) < 3)
    aflag24=aflag & s.sampleflag 
    aflag=aflag & s.spiralflag
    pflag=aflag24 & s.pointsource
    npflag=aflag24 & ~s.pointsource
    if detectonly: # plot spirals that don't make the galfit analysis cut
        print 'not plotting spirals that dont make galfit cut'
    else:
        plot(x[aflag & ~aflag24],y[aflag & ~aflag24],'k.')
    scatter(x[aflag24],y[aflag24],s=s.sizeratio[aflag24]*60,c='red')
    plot(x[pflag],y[pflag],'k*',markersize=14)
    if xlab:
        xlabel(xlab,fontsize=20)
    if ylab:
        ylabel(ylab,fontsize=20)
    if axlim:
        axis(axlim)
       
    #print 'comparing x values'
    #ks(x[npflag],x[pflag])
    #print 'comparing y values'
    #ks(y[npflag],y[pflag])
def calc_starburst_fraction():
    
    fcompactstarburst=[]
    avesizeratio=[]
    for i in range(len(clusternamesbylx)):
        cl=clusternames[i]
        flag = (s.s.CLUSTER == cl) & s.sampleflag  & s.membflag & ~s.agnflag & (s.logstellarmass < 10.4)#& ~s.blueflag
        
        print 'number in ',cl,' = ',sum(flag)
        y=np.mean(s.s.SIZE_RATIO[flag])

        n=sum(s.compact_starburst & flag)
        d=sum(flag)
        a,b,c=my.ratioerror(n,d)
        print '%s: %5.2f + %5.2f - %5.2f (%i/%i) (N_failed fits = %5.2f)'%(cl,a,b,c,n,d,1.*sum(s.sampleflag & (s.s.CLUSTER == cl))/sum(s.sfsampleflag & (s.s.CLUSTER == cl)))
        fcompactstarburst.append(a)
        avesizeratio.append(y)
    for i in range(len(clusternamesbylx)):
        print clusternames[i],fcompactstarburst[i],avesizeratio[i]
    spearman(np.array(fcompactstarburst),np.array(avesizeratio))
    plt.figure()
    plt.subplots_adjust(left=.15,bottom=.15)
    plot(np.array(fcompactstarburst),np.array(avesizeratio),'bo')
    plt.xlabel('$Frac \ Compact  \ Starburst \ Galaxies$')
    plt.ylabel('$ave(Re(24)/Re(r))$')
    plt.axis([-.01,.4,.2,.8])

def compareSEGalfitradii():
    plt.figure()
    plt.subplots_adjust(left=.15,bottom=.15)
    plt.plot(s.s.fcre1[s.sampleflag],s.s.FLUX_RADIUS2[s.sampleflag],'bo',label='SE R90')
    plt.plot(s.s.fcre1[s.sampleflag],s.s.FLUX_RADIUS1[s.sampleflag],'co',label='SE R50')
    plt.legend(numpoints=1,loc='lower right')
    xl=np.arange(0,8.1)
    plt.plot(xl,xl,'k-')
    plt.axis([0,10,0,10])

    plt.ylabel('$SE \ Flux \ Radius$')
    plt.xlabel('$GALFIT \ R50$')
    plt.savefig(homedir+'research/LocalClusters/SamplePlots/SEvGalfitRadii.eps')
    plt.savefig(homedir+'research/LocalClusters/SamplePlots/SEvGalfitRadii.png')
def plotsizevscluster(masscut=None,btcut=None):

    clusters = ['Hercules','A1367','A2052','A2063']
    bigmomma = ['Coma']
    zflag = np.ones(len(s.sampleflag),'bool')
    if masscut != None:
        zflag = zflag & (s.logstellarmass < 10.)
    if btcut != None:
        zflag = zflag & (s.gim2d.B_T_r < btcut)
    
    btcut = .3
    flag = zflag & s.sampleflag  & s.membflag

    groupflag = flag & ((s.s.CLUSTER == 'MKW11') | (s.s.CLUSTER == 'MKW8') | (s.s.CLUSTER == 'AWM4') | (s.s.CLUSTER == 'NGC6107'))
    clusterflag = flag & ((s.s.CLUSTER == 'Hercules') | (s.s.CLUSTER == 'A1367') | (s.s.CLUSTER == 'A2052') | (s.s.CLUSTER == 'A2063'))
    bigmommaflag = flag & (s.s.CLUSTER == 'Coma')

    
    exteriorflag = zflag & s.sampleflag & (s.gim2d.B_T_r < btcut) & ~s.membflag & ~s.dvflag
    nearexteriorflag = zflag & s.sampleflag & (s.gim2d.B_T_r < btcut) & ~s.membflag & s.dvflag


    envs = [exteriorflag, nearexteriorflag,groupflag, clusterflag, bigmommaflag]
    plt.figure()
    
    ypoint = []
    y2 = []
    y2err=[]
    yerr = []
    for i in range(len(envs)):
        ypoint.append(np.median(s.sizeratio[envs[i]]))
        #ypoint.append(ws.weighted_mean(s.sizeratio[envs[i]],weights=1./s.sizeratioERR[envs[i]]))
        yerr.append(np.std(s.sizeratio[envs[i]])/np.sqrt(1.*np.sum(envs[i])))
        y2.append(np.median(s.gim2d.B_T_r[envs[i]]))
        #ypoint.append(ws.weighted_mean(s.sizeratio[envs[i]],weights=1./s.sizeratioERR[envs[i]]))
        y2err.append(np.std(s.gim2d.B_T_r[envs[i]])/np.sqrt(1.*np.sum(envs[i])))
        y=s.sizeratio[envs[i]]
        plt.plot(i,np.median(y),'ko',markersize=10)
        bp = boxplot([y],positions=[i],widths=[.3],whis=99)
        plt.setp(bp['boxes'], color='black')
        plt.setp(bp['whiskers'], color='black')
        plt.setp(bp['fliers'], color='black', marker='+')
        plt.setp(bp['medians'], color='black')

        #plt.errorbar(np.arange(len(envs)),ypoint,yerr=yerr,fmt='ko',markersize=12,label='$R_{24}/R_d$')

    #plt.errorbar(np.arange(len(envs)),y2,yerr=y2err,fmt='ks',markersize=12,label='$B/T$')
    ax = plt.gca()
    plt.text(.5,.92,'$Far-External: \ \Delta v/\sigma > 3 $',fontsize=14,transform = ax.transAxes,horizontalalignment='left')
    plt.text(.5,.82,'$Near-External: \ \Delta v/\sigma < 3$',fontsize=14,transform = ax.transAxes,horizontalalignment='left')
    plt.text(.5,.72,'$Group: \ \sigma < 700 \ km/s$',fontsize=14,transform = ax.transAxes,horizontalalignment='left')
    plt.text(.5,.62,'$Cluster: \ \sigma > 700 \ km/s$',fontsize=14,transform = ax.transAxes,horizontalalignment='left')
    plt.xticks(np.arange(len(envs)),['$Field$', '$Near-Field$', '$Group$', '$Cluster$', '$Coma$'],fontsize=16)
    plt.xlim(-.3,len(envs)-.7)
    plt.ylim(-.1,2.95)
    #plt.legend()
    plt.ylabel('$R_{24}/R_d$')
    plt.xlabel('$Environment$')
    plt.subplots_adjust(bottom=.2,top=.9,left=.15,right=.92)
    #plt.subplots_adjust(bottom=.15)

    #plt.savefig(homedir+'research/LocalClusters/SamplePlots/size_env.eps')
    #plt.savefig(homedir+'research/LocalClusters/SamplePlots/size_env.png')
    plt.savefig(figuredir+'fig15.eps')
    
def write_out_sizes():
    outfile = open(homedir+'research/LocalClusters/catalogs/sizes.txt','w')
    size = s.sizeratio[s.sampleflag]
    sizerr = s.sizeratioERR[s.sampleflag]
    myflag = s.membflag[s.sampleflag]
    bt = s.gim2d.B_T_r[s.sampleflag]
    ra = s.s.RA[s.sampleflag]
    dec = s.s.DEC[s.sampleflag]
    outfile.write('#R24/Rd size_err  core_flag   B/T RA DEC \n')
    for i in range(len(size)):
        outfile.write('%6.2f  %6.2f  %i   %.2f %10.9e %10.9e \n'%(size[i],sizerr[i],myflag[i],bt[i],ra[i],dec[i]))
    outfile.close()
                          
    
###############################################################
#####################   MAIN PROGRAM      ##################### 
###############################################################
        
if __name__ == '__main__':
    nsa_columns=['ZDIST','SERSIC_TH50','SERSIC_N','D4000','HAEW','VDISP','HAFLUX','N2FLUX','HBFLUX','O3FLUX','AHDEW','CLUMPY','ASYMMETRY','AV','FA','SERSIC_BA']

    n_columns=['HIMASS']
    galfit24_columns=['cmag1','cnsersic1','cre1','cre1err','caxisratio1','cnumerical_error_flag24']
    gim2d_columns=['B_T_r','S2g_1']
    zoo_columns=['p_elliptical','p_spiral','p_el','p_cs','p_uncertain','p_mg','p_edge','p_dk']
    ce_columns=['LIR_ZDIST','SFR_ZDIST']
    ld_columns=['SIGMA_NN','SIGMA_5','SIGMA_10','RHOMASS']
    my_columns=['SIZE_RATIO','STELLARMASS','SNR_SE','RMAG', 'DELTA_V','DR_R200','CLUSTER_PHI','HIDef','NUVr_color','CLUSTER_SIGMA','CLUSTER_REDSHIFT','CLUSTER_LX']

    infile=homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_all_size.fits'
    infile=homedir+'research/LocalClusters/NSAmastertables/LCS_all_size.fits'

    s=spirals(infile,prefix='all')
    #e=ellipticals()
    #infile=homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_all_size.fits'
    nc=spirals(infile,usecoma=False,prefix='no_coma')
    #nh=spirals(infile,usecoma=True,useherc=False,prefix='no_herc')
    #infile=homedir+'research/LocalClusters/NSAmastertables/LCS_Spirals_all.fits'
    #c=spirals(infile,onlycoma=True,prefix='only_coma')

